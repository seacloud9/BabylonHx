#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_Engine
#include <com/gamestudiohx/babylonhx/Engine.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_Node
#include <com/gamestudiohx/babylonhx/Node.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_Scene
#include <com/gamestudiohx/babylonhx/Scene.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_animations_Animation
#include <com/gamestudiohx/babylonhx/animations/Animation.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_animations__Animatable
#include <com/gamestudiohx/babylonhx/animations/_Animatable.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_bones_Skeleton
#include <com/gamestudiohx/babylonhx/bones/Skeleton.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_cameras_Camera
#include <com/gamestudiohx/babylonhx/cameras/Camera.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_collisions_Collider
#include <com/gamestudiohx/babylonhx/collisions/Collider.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_collisions_PickingInfo
#include <com/gamestudiohx/babylonhx/collisions/PickingInfo.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_culling_BoundingBox
#include <com/gamestudiohx/babylonhx/culling/BoundingBox.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_culling_BoundingInfo
#include <com/gamestudiohx/babylonhx/culling/BoundingInfo.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_culling_octrees_Octree
#include <com/gamestudiohx/babylonhx/culling/octrees/Octree.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_culling_octrees_OctreeBlock
#include <com/gamestudiohx/babylonhx/culling/octrees/OctreeBlock.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_layer_Layer
#include <com/gamestudiohx/babylonhx/layer/Layer.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_lensflare_LensFlareSystem
#include <com/gamestudiohx/babylonhx/lensflare/LensFlareSystem.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_lights_Light
#include <com/gamestudiohx/babylonhx/lights/Light.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_lights_shadows_ShadowGenerator
#include <com/gamestudiohx/babylonhx/lights/shadows/ShadowGenerator.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_materials_Material
#include <com/gamestudiohx/babylonhx/materials/Material.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_materials_MultiMaterial
#include <com/gamestudiohx/babylonhx/materials/MultiMaterial.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_materials_StandardMaterial
#include <com/gamestudiohx/babylonhx/materials/StandardMaterial.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_materials_textures_BaseTexture
#include <com/gamestudiohx/babylonhx/materials/textures/BaseTexture.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_materials_textures_RenderTargetTexture
#include <com/gamestudiohx/babylonhx/materials/textures/RenderTargetTexture.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_materials_textures_Texture
#include <com/gamestudiohx/babylonhx/materials/textures/Texture.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_mesh_AbstractMesh
#include <com/gamestudiohx/babylonhx/mesh/AbstractMesh.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_mesh_Geometry
#include <com/gamestudiohx/babylonhx/mesh/Geometry.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_mesh_IGetSetVerticesData
#include <com/gamestudiohx/babylonhx/mesh/IGetSetVerticesData.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_mesh_SubMesh
#include <com/gamestudiohx/babylonhx/mesh/SubMesh.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_particles_ParticleSystem
#include <com/gamestudiohx/babylonhx/particles/ParticleSystem.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_postprocess_PostProcessManager
#include <com/gamestudiohx/babylonhx/postprocess/PostProcessManager.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_rendering_RenderingGroup
#include <com/gamestudiohx/babylonhx/rendering/RenderingGroup.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_rendering_RenderingManager
#include <com/gamestudiohx/babylonhx/rendering/RenderingManager.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_sprites_SpriteManager
#include <com/gamestudiohx/babylonhx/sprites/SpriteManager.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_tools_SmartArray
#include <com/gamestudiohx/babylonhx/tools/SmartArray.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_tools_Tools
#include <com/gamestudiohx/babylonhx/tools/Tools.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_tools_math_Color3
#include <com/gamestudiohx/babylonhx/tools/math/Color3.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_tools_math_Color4
#include <com/gamestudiohx/babylonhx/tools/math/Color4.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_tools_math_Frustum
#include <com/gamestudiohx/babylonhx/tools/math/Frustum.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_tools_math_Matrix
#include <com/gamestudiohx/babylonhx/tools/math/Matrix.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_tools_math_Plane
#include <com/gamestudiohx/babylonhx/tools/math/Plane.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_tools_math_Quaternion
#include <com/gamestudiohx/babylonhx/tools/math/Quaternion.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_tools_math_Ray
#include <com/gamestudiohx/babylonhx/tools/math/Ray.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_tools_math_Vector3
#include <com/gamestudiohx/babylonhx/tools/math/Vector3.h>
#endif
#ifndef INCLUDED_com_gamestudiohx_babylonhx_tools_math_Viewport
#include <com/gamestudiohx/babylonhx/tools/math/Viewport.h>
#endif
#ifndef INCLUDED_hxMath
#include <hxMath.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_gl_GL
#include <openfl/gl/GL.h>
#endif
namespace com{
namespace gamestudiohx{
namespace babylonhx{

Void Scene_obj::__construct(::com::gamestudiohx::babylonhx::Engine engine)
{
HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","new",0xf09756ac,"com.gamestudiohx.babylonhx.Scene.new","com/gamestudiohx/babylonhx/Scene.hx",47,0x7c8236a5)
HX_STACK_THIS(this)
HX_STACK_ARG(engine,"engine")
{
	HX_STACK_LINE(141)
	this->_animationStartDate = (int)-1;
	HX_STACK_LINE(117)
	this->_geometries = Array_obj< ::Dynamic >::__new();
	HX_STACK_LINE(145)
	this->_engine = engine;
	HX_STACK_LINE(146)
	this->autoClear = true;
	HX_STACK_LINE(147)
	::com::gamestudiohx::babylonhx::tools::math::Color4 _g = ::com::gamestudiohx::babylonhx::tools::math::Color4_obj::__new(0.2,0.2,0.3,null());		HX_STACK_VAR(_g,"_g");
	HX_STACK_LINE(147)
	this->clearColor = _g;
	HX_STACK_LINE(148)
	::com::gamestudiohx::babylonhx::tools::math::Color3 _g1 = ::com::gamestudiohx::babylonhx::tools::math::Color3_obj::__new((int)0,(int)0,(int)0);		HX_STACK_VAR(_g1,"_g1");
	HX_STACK_LINE(148)
	this->ambientColor = _g1;
	HX_STACK_LINE(150)
	engine->scenes->push(hx::ObjectPtr<OBJ_>(this));
	HX_STACK_LINE(152)
	this->_totalVertices = (int)0;
	HX_STACK_LINE(153)
	this->_activeVertices = (int)0;
	HX_STACK_LINE(154)
	this->_activeParticles = (int)0;
	HX_STACK_LINE(155)
	this->_lastFrameDuration = (int)0;
	HX_STACK_LINE(156)
	this->_evaluateActiveMeshesDuration = (int)0;
	HX_STACK_LINE(157)
	this->_renderTargetsDuration = (int)0;
	HX_STACK_LINE(158)
	this->_renderDuration = (int)0;
	HX_STACK_LINE(160)
	this->_renderId = (int)0;
	HX_STACK_LINE(161)
	this->_executeWhenReadyTimeoutId = (int)-1;
	HX_STACK_LINE(163)
	::com::gamestudiohx::babylonhx::tools::SmartArray _g2 = ::com::gamestudiohx::babylonhx::tools::SmartArray_obj::__new();		HX_STACK_VAR(_g2,"_g2");
	HX_STACK_LINE(163)
	this->_toBeDisposed = _g2;
	HX_STACK_LINE(165)
	this->_onReadyCallbacks = Dynamic( Array_obj<Dynamic>::__new());
	HX_STACK_LINE(166)
	this->_pendingData = Dynamic( Array_obj<Dynamic>::__new());
	HX_STACK_LINE(168)
	this->_onBeforeRenderCallbacks = Dynamic( Array_obj<Dynamic>::__new());
	HX_STACK_LINE(171)
	this->fogMode = ::com::gamestudiohx::babylonhx::Scene_obj::FOGMODE_NONE;
	HX_STACK_LINE(172)
	::com::gamestudiohx::babylonhx::tools::math::Color3 _g3 = ::com::gamestudiohx::babylonhx::tools::math::Color3_obj::__new(0.2,0.2,0.3);		HX_STACK_VAR(_g3,"_g3");
	HX_STACK_LINE(172)
	this->fogColor = _g3;
	HX_STACK_LINE(173)
	this->fogDensity = 0.1;
	HX_STACK_LINE(174)
	this->fogStart = (int)0;
	HX_STACK_LINE(175)
	this->fogEnd = 1000.0;
	HX_STACK_LINE(178)
	this->lightsEnabled = true;
	HX_STACK_LINE(179)
	Array< ::Dynamic > _g4 = Array_obj< ::Dynamic >::__new();		HX_STACK_VAR(_g4,"_g4");
	HX_STACK_LINE(179)
	this->lights = _g4;
	HX_STACK_LINE(182)
	Array< ::Dynamic > _g5 = Array_obj< ::Dynamic >::__new();		HX_STACK_VAR(_g5,"_g5");
	HX_STACK_LINE(182)
	this->cameras = _g5;
	HX_STACK_LINE(183)
	this->activeCamera = null();
	HX_STACK_LINE(186)
	Array< ::Dynamic > _g6 = Array_obj< ::Dynamic >::__new();		HX_STACK_VAR(_g6,"_g6");
	HX_STACK_LINE(186)
	this->meshes = _g6;
	HX_STACK_LINE(189)
	::com::gamestudiohx::babylonhx::tools::SmartArray _g7 = ::com::gamestudiohx::babylonhx::tools::SmartArray_obj::__new();		HX_STACK_VAR(_g7,"_g7");
	HX_STACK_LINE(189)
	this->_activeMeshes = _g7;
	HX_STACK_LINE(190)
	::com::gamestudiohx::babylonhx::tools::SmartArray _g8 = ::com::gamestudiohx::babylonhx::tools::SmartArray_obj::__new();		HX_STACK_VAR(_g8,"_g8");
	HX_STACK_LINE(190)
	this->_processedMaterials = _g8;
	HX_STACK_LINE(191)
	::com::gamestudiohx::babylonhx::tools::SmartArray _g9 = ::com::gamestudiohx::babylonhx::tools::SmartArray_obj::__new();		HX_STACK_VAR(_g9,"_g9");
	HX_STACK_LINE(191)
	this->_renderTargets = _g9;
	HX_STACK_LINE(192)
	::com::gamestudiohx::babylonhx::tools::SmartArray _g10 = ::com::gamestudiohx::babylonhx::tools::SmartArray_obj::__new();		HX_STACK_VAR(_g10,"_g10");
	HX_STACK_LINE(192)
	this->_activeParticleSystems = _g10;
	HX_STACK_LINE(193)
	::com::gamestudiohx::babylonhx::tools::SmartArray _g11 = ::com::gamestudiohx::babylonhx::tools::SmartArray_obj::__new();		HX_STACK_VAR(_g11,"_g11");
	HX_STACK_LINE(193)
	this->_activeSkeletons = _g11;
	HX_STACK_LINE(196)
	::com::gamestudiohx::babylonhx::rendering::RenderingManager _g12 = ::com::gamestudiohx::babylonhx::rendering::RenderingManager_obj::__new(hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(_g12,"_g12");
	HX_STACK_LINE(196)
	this->_renderingManager = _g12;
	HX_STACK_LINE(199)
	Array< ::Dynamic > _g13 = Array_obj< ::Dynamic >::__new();		HX_STACK_VAR(_g13,"_g13");
	HX_STACK_LINE(199)
	this->materials = _g13;
	HX_STACK_LINE(200)
	Array< ::Dynamic > _g14 = Array_obj< ::Dynamic >::__new();		HX_STACK_VAR(_g14,"_g14");
	HX_STACK_LINE(200)
	this->multiMaterials = _g14;
	HX_STACK_LINE(201)
	::com::gamestudiohx::babylonhx::materials::StandardMaterial _g15 = ::com::gamestudiohx::babylonhx::materials::StandardMaterial_obj::__new(HX_CSTRING("default material"),hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(_g15,"_g15");
	HX_STACK_LINE(201)
	this->defaultMaterial = _g15;
	HX_STACK_LINE(204)
	this->texturesEnabled = true;
	HX_STACK_LINE(205)
	Array< ::Dynamic > _g16 = Array_obj< ::Dynamic >::__new();		HX_STACK_VAR(_g16,"_g16");
	HX_STACK_LINE(205)
	this->textures = _g16;
	HX_STACK_LINE(208)
	this->particlesEnabled = true;
	HX_STACK_LINE(209)
	this->particleSystems = Array_obj< ::Dynamic >::__new();
	HX_STACK_LINE(212)
	this->spriteManagers = Array_obj< ::Dynamic >::__new();
	HX_STACK_LINE(215)
	this->layers = Array_obj< ::Dynamic >::__new();
	HX_STACK_LINE(218)
	this->skeletons = Array_obj< ::Dynamic >::__new();
	HX_STACK_LINE(221)
	this->lensFlareSystems = Array_obj< ::Dynamic >::__new();
	HX_STACK_LINE(224)
	this->collisionsEnabled = true;
	HX_STACK_LINE(225)
	::com::gamestudiohx::babylonhx::tools::math::Vector3 _g17 = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new((int)0,-9.0,(int)0);		HX_STACK_VAR(_g17,"_g17");
	HX_STACK_LINE(225)
	this->gravity = _g17;
	HX_STACK_LINE(228)
	this->_activeAnimatables = Array_obj< ::Dynamic >::__new();
	HX_STACK_LINE(231)
	::com::gamestudiohx::babylonhx::tools::math::Matrix _g18;		HX_STACK_VAR(_g18,"_g18");
	HX_STACK_LINE(231)
	{
		HX_STACK_LINE(231)
		::com::gamestudiohx::babylonhx::tools::math::Matrix result = ::com::gamestudiohx::babylonhx::tools::math::Matrix_obj::__new();		HX_STACK_VAR(result,"result");
		HX_STACK_LINE(231)
		result->m[(int)0] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)1] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)2] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)3] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)4] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)5] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)6] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)7] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)8] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)9] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)10] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)11] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)12] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)13] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)14] = (int)0;
		HX_STACK_LINE(231)
		result->m[(int)15] = (int)0;
		HX_STACK_LINE(231)
		_g18 = result;
	}
	HX_STACK_LINE(231)
	this->_transformMatrix = _g18;
	HX_STACK_LINE(234)
	::com::gamestudiohx::babylonhx::tools::math::Vector3 _g19 = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(_g19,"_g19");
	HX_STACK_LINE(234)
	this->_scaledPosition = _g19;
	HX_STACK_LINE(235)
	::com::gamestudiohx::babylonhx::tools::math::Vector3 _g20 = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(_g20,"_g20");
	HX_STACK_LINE(235)
	this->_scaledVelocity = _g20;
	HX_STACK_LINE(238)
	this->postProcessesEnabled = true;
	HX_STACK_LINE(239)
	::com::gamestudiohx::babylonhx::postprocess::PostProcessManager _g21 = ::com::gamestudiohx::babylonhx::postprocess::PostProcessManager_obj::__new(hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(_g21,"_g21");
	HX_STACK_LINE(239)
	this->postProcessManager = _g21;
	HX_STACK_LINE(242)
	this->renderTargetsEnabled = true;
	HX_STACK_LINE(243)
	this->customRenderTargets = Dynamic( Array_obj<Dynamic>::__new());
	HX_STACK_LINE(246)
	this->activeCameras = Array_obj< ::Dynamic >::__new();
}
;
	return null();
}

//Scene_obj::~Scene_obj() { }

Dynamic Scene_obj::__CreateEmpty() { return  new Scene_obj; }
hx::ObjectPtr< Scene_obj > Scene_obj::__new(::com::gamestudiohx::babylonhx::Engine engine)
{  hx::ObjectPtr< Scene_obj > result = new Scene_obj();
	result->__construct(engine);
	return result;}

Dynamic Scene_obj::__Create(hx::DynamicArray inArgs)
{  hx::ObjectPtr< Scene_obj > result = new Scene_obj();
	result->__construct(inArgs[0]);
	return result;}

::com::gamestudiohx::babylonhx::Engine Scene_obj::getEngine( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getEngine",0x11e61844,"com.gamestudiohx.babylonhx.Scene.getEngine","com/gamestudiohx/babylonhx/Scene.hx",250,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(250)
	return this->_engine;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getEngine,return )

int Scene_obj::getTotalVertices( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getTotalVertices",0x70ef579b,"com.gamestudiohx.babylonhx.Scene.getTotalVertices","com/gamestudiohx/babylonhx/Scene.hx",254,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(254)
	return this->_totalVertices;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getTotalVertices,return )

int Scene_obj::getActiveVertices( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getActiveVertices",0xa4b71661,"com.gamestudiohx.babylonhx.Scene.getActiveVertices","com/gamestudiohx/babylonhx/Scene.hx",258,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(258)
	return this->_activeVertices;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getActiveVertices,return )

int Scene_obj::getActiveParticles( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getActiveParticles",0xa50f8405,"com.gamestudiohx.babylonhx.Scene.getActiveParticles","com/gamestudiohx/babylonhx/Scene.hx",262,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(262)
	return this->_activeParticles;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getActiveParticles,return )

Float Scene_obj::getLastFrameDuration( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getLastFrameDuration",0x918f9b29,"com.gamestudiohx.babylonhx.Scene.getLastFrameDuration","com/gamestudiohx/babylonhx/Scene.hx",266,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(266)
	return this->_lastFrameDuration;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getLastFrameDuration,return )

Float Scene_obj::getEvaluateActiveMeshesDuration( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getEvaluateActiveMeshesDuration",0x723e6b70,"com.gamestudiohx.babylonhx.Scene.getEvaluateActiveMeshesDuration","com/gamestudiohx/babylonhx/Scene.hx",270,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(270)
	return this->_evaluateActiveMeshesDuration;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getEvaluateActiveMeshesDuration,return )

Float Scene_obj::getRenderTargetsDuration( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getRenderTargetsDuration",0x781c707e,"com.gamestudiohx.babylonhx.Scene.getRenderTargetsDuration","com/gamestudiohx/babylonhx/Scene.hx",274,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(274)
	return this->_renderTargetsDuration;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getRenderTargetsDuration,return )

Float Scene_obj::getRenderDuration( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getRenderDuration",0xaaae9f4c,"com.gamestudiohx.babylonhx.Scene.getRenderDuration","com/gamestudiohx/babylonhx/Scene.hx",278,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(278)
	return this->_renderDuration;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getRenderDuration,return )

Float Scene_obj::getParticlesDuration( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getParticlesDuration",0xc7eb9a9f,"com.gamestudiohx.babylonhx.Scene.getParticlesDuration","com/gamestudiohx/babylonhx/Scene.hx",282,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(282)
	return this->_particlesDuration;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getParticlesDuration,return )

Float Scene_obj::getSpritesDuration( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getSpritesDuration",0xf0aa0180,"com.gamestudiohx.babylonhx.Scene.getSpritesDuration","com/gamestudiohx/babylonhx/Scene.hx",286,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(286)
	return this->_spritesDuration;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getSpritesDuration,return )

Float Scene_obj::getAnimationRatio( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getAnimationRatio",0x1690e9e9,"com.gamestudiohx.babylonhx.Scene.getAnimationRatio","com/gamestudiohx/babylonhx/Scene.hx",290,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(290)
	return this->_animationRatio;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getAnimationRatio,return )

int Scene_obj::getRenderId( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getRenderId",0x40b421d3,"com.gamestudiohx.babylonhx.Scene.getRenderId","com/gamestudiohx/babylonhx/Scene.hx",294,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(294)
	return this->_renderId;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getRenderId,return )

bool Scene_obj::isReady( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","isReady",0xc532e065,"com.gamestudiohx.babylonhx.Scene.isReady","com/gamestudiohx/babylonhx/Scene.hx",297,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(298)
	if (((this->_pendingData->__Field(HX_CSTRING("length"),true) > (int)0))){
		HX_STACK_LINE(299)
		return false;
	}
	HX_STACK_LINE(302)
	{
		HX_STACK_LINE(302)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(302)
		int _g = this->meshes->length;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(302)
		while((true)){
			HX_STACK_LINE(302)
			if ((!(((_g1 < _g))))){
				HX_STACK_LINE(302)
				break;
			}
			HX_STACK_LINE(302)
			int index = (_g1)++;		HX_STACK_VAR(index,"index");
			HX_STACK_LINE(303)
			::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = this->meshes->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
			HX_STACK_LINE(304)
			Dynamic mat = mesh->material;		HX_STACK_VAR(mat,"mat");
			HX_STACK_LINE(310)
			if (((mat != null()))){
				HX_STACK_LINE(311)
				if ((!(mat->__Field(HX_CSTRING("isReady"),true)(mesh)))){
					HX_STACK_LINE(312)
					return false;
				}
			}
		}
	}
	HX_STACK_LINE(317)
	return true;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,isReady,return )

Void Scene_obj::registerBeforeRender( Dynamic func){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","registerBeforeRender",0xe0a13c6c,"com.gamestudiohx.babylonhx.Scene.registerBeforeRender","com/gamestudiohx/babylonhx/Scene.hx",321,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_ARG(func,"func")
		HX_STACK_LINE(321)
		this->_onBeforeRenderCallbacks->__Field(HX_CSTRING("push"),true)(func);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,registerBeforeRender,(void))

Void Scene_obj::unregisterBeforeRender( Dynamic func){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","unregisterBeforeRender",0x50a7ba45,"com.gamestudiohx.babylonhx.Scene.unregisterBeforeRender","com/gamestudiohx/babylonhx/Scene.hx",324,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_ARG(func,"func")
		HX_STACK_LINE(325)
		int index = ::Lambda_obj::indexOf(this->_onBeforeRenderCallbacks,func);		HX_STACK_VAR(index,"index");
		HX_STACK_LINE(327)
		if (((index > (int)-1))){
			HX_STACK_LINE(328)
			this->_onBeforeRenderCallbacks->__Field(HX_CSTRING("splice"),true)(index,(int)1);
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,unregisterBeforeRender,(void))

Void Scene_obj::_addPendingData( Dynamic data){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","_addPendingData",0xde02aa6b,"com.gamestudiohx.babylonhx.Scene._addPendingData","com/gamestudiohx/babylonhx/Scene.hx",333,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_ARG(data,"data")
		HX_STACK_LINE(333)
		this->_pendingData->__Field(HX_CSTRING("push"),true)(data);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,_addPendingData,(void))

Void Scene_obj::_removePendingData( Dynamic data){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","_removePendingData",0x77874032,"com.gamestudiohx.babylonhx.Scene._removePendingData","com/gamestudiohx/babylonhx/Scene.hx",336,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_ARG(data,"data")
		HX_STACK_LINE(337)
		int index = ::Lambda_obj::indexOf(this->_pendingData,data);		HX_STACK_VAR(index,"index");
		HX_STACK_LINE(339)
		if (((index != (int)-1))){
			HX_STACK_LINE(340)
			this->_pendingData->__Field(HX_CSTRING("splice"),true)(index,(int)1);
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,_removePendingData,(void))

int Scene_obj::getWaitingItemsCount( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getWaitingItemsCount",0x6951a35a,"com.gamestudiohx.babylonhx.Scene.getWaitingItemsCount","com/gamestudiohx/babylonhx/Scene.hx",345,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(345)
	return this->_pendingData->__Field(HX_CSTRING("length"),true);
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getWaitingItemsCount,return )

Void Scene_obj::executeWhenReady( Dynamic func){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","executeWhenReady",0xb30ca888,"com.gamestudiohx.babylonhx.Scene.executeWhenReady","com/gamestudiohx/babylonhx/Scene.hx",348,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_ARG(func,"func")
		HX_STACK_LINE(349)
		this->_onReadyCallbacks->__Field(HX_CSTRING("push"),true)(func);
		HX_STACK_LINE(351)
		if (((this->_executeWhenReadyTimeoutId != (int)-1))){
			HX_STACK_LINE(352)
			return null();
		}
		HX_STACK_LINE(355)
		this->_checkIsReady();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,executeWhenReady,(void))

Void Scene_obj::_checkIsReady( ){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","_checkIsReady",0x03646c5c,"com.gamestudiohx.babylonhx.Scene._checkIsReady","com/gamestudiohx/babylonhx/Scene.hx",363,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_LINE(363)
		if ((this->isReady())){
			HX_STACK_LINE(364)
			{
				HX_STACK_LINE(364)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(364)
				Dynamic _g1 = this->_onReadyCallbacks;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(364)
				while((true)){
					HX_STACK_LINE(364)
					if ((!(((_g < _g1->__Field(HX_CSTRING("length"),true)))))){
						HX_STACK_LINE(364)
						break;
					}
					HX_STACK_LINE(364)
					Dynamic func = _g1->__GetItem(_g);		HX_STACK_VAR(func,"func");
					HX_STACK_LINE(364)
					++(_g);
					HX_STACK_LINE(365)
					func();
				}
			}
			HX_STACK_LINE(368)
			this->_onReadyCallbacks = Dynamic( Array_obj<Dynamic>::__new());
			HX_STACK_LINE(369)
			this->_executeWhenReadyTimeoutId = (int)-1;
			HX_STACK_LINE(370)
			return null();
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,_checkIsReady,(void))

Void Scene_obj::beginAnimation( Dynamic target,Float from,Float to,bool loop,hx::Null< Float >  __o_speedRatio,Dynamic onAnimationEnd){
Float speedRatio = __o_speedRatio.Default(1.0);
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","beginAnimation",0x60649ccf,"com.gamestudiohx.babylonhx.Scene.beginAnimation","com/gamestudiohx/babylonhx/Scene.hx",378,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(target,"target")
	HX_STACK_ARG(from,"from")
	HX_STACK_ARG(to,"to")
	HX_STACK_ARG(loop,"loop")
	HX_STACK_ARG(speedRatio,"speedRatio")
	HX_STACK_ARG(onAnimationEnd,"onAnimationEnd")
{
		HX_STACK_LINE(380)
		if (((target->__Field(HX_CSTRING("animations"),true) != null()))){
			HX_STACK_LINE(381)
			this->stopAnimation(target);
			HX_STACK_LINE(383)
			::com::gamestudiohx::babylonhx::animations::_Animatable animatable = ::com::gamestudiohx::babylonhx::animations::_Animatable_obj::__new(target,from,to,loop,speedRatio,onAnimationEnd);		HX_STACK_VAR(animatable,"animatable");
			HX_STACK_LINE(385)
			this->_activeAnimatables->push(animatable);
		}
		HX_STACK_LINE(389)
		Dynamic _g;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(389)
		_g = (  (((target == null()))) ? Dynamic(null()) : Dynamic(target->__Field(HX_CSTRING("getAnimatables"),true)) );
		HX_STACK_LINE(389)
		if (((_g != null()))){
			HX_STACK_LINE(390)
			Dynamic animatables = target->__Field(HX_CSTRING("getAnimatables"),true)();		HX_STACK_VAR(animatables,"animatables");
			HX_STACK_LINE(391)
			{
				HX_STACK_LINE(391)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(391)
				while((true)){
					HX_STACK_LINE(391)
					if ((!(((_g1 < animatables->__Field(HX_CSTRING("length"),true)))))){
						HX_STACK_LINE(391)
						break;
					}
					HX_STACK_LINE(391)
					Dynamic animatable = animatables->__GetItem(_g1);		HX_STACK_VAR(animatable,"animatable");
					HX_STACK_LINE(391)
					++(_g1);
					HX_STACK_LINE(392)
					this->beginAnimation(animatable,from,to,loop,speedRatio,onAnimationEnd);
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC6(Scene_obj,beginAnimation,(void))

Void Scene_obj::stopAnimation( Dynamic target){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","stopAnimation",0xbe71abee,"com.gamestudiohx.babylonhx.Scene.stopAnimation","com/gamestudiohx/babylonhx/Scene.hx",398,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_ARG(target,"target")
		HX_STACK_LINE(398)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(398)
		int _g = this->_activeAnimatables->length;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(398)
		while((true)){
			HX_STACK_LINE(398)
			if ((!(((_g1 < _g))))){
				HX_STACK_LINE(398)
				break;
			}
			HX_STACK_LINE(398)
			int index = (_g1)++;		HX_STACK_VAR(index,"index");
			HX_STACK_LINE(399)
			if (((this->_activeAnimatables->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::animations::_Animatable >()->target == target))){
				HX_STACK_LINE(400)
				this->_activeAnimatables->splice(index,(int)1);
				HX_STACK_LINE(401)
				return null();
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,stopAnimation,(void))

Void Scene_obj::_animate( ){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","_animate",0x265b5a56,"com.gamestudiohx.babylonhx.Scene._animate","com/gamestudiohx/babylonhx/Scene.hx",406,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_LINE(407)
		if (((this->_animationStartDate == (int)-1))){
			HX_STACK_LINE(408)
			int _g = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(408)
			this->_animationStartDate = _g;
		}
		HX_STACK_LINE(411)
		int _g1 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(411)
		int delay = (_g1 - this->_animationStartDate);		HX_STACK_VAR(delay,"delay");
		HX_STACK_LINE(413)
		int index = (int)0;		HX_STACK_VAR(index,"index");
		HX_STACK_LINE(414)
		while((true)){
			HX_STACK_LINE(414)
			if ((!(((index < this->_activeAnimatables->length))))){
				HX_STACK_LINE(414)
				break;
			}
			struct _Function_2_1{
				inline static bool Block( hx::ObjectPtr< ::com::gamestudiohx::babylonhx::Scene_obj > __this,int &delay,int &index){
					HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",415,0x7c8236a5)
					{
						HX_STACK_LINE(415)
						::com::gamestudiohx::babylonhx::animations::_Animatable _this = __this->_activeAnimatables->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::animations::_Animatable >();		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(415)
						if (((_this->_localDelayOffset == (int)-1))){
							HX_STACK_LINE(415)
							_this->_localDelayOffset = delay;
						}
						HX_STACK_LINE(415)
						bool running = false;		HX_STACK_VAR(running,"running");
						HX_STACK_LINE(415)
						Array< ::Dynamic > animations = _this->target->__Field(HX_CSTRING("animations"),true);		HX_STACK_VAR(animations,"animations");
						HX_STACK_LINE(415)
						{
							HX_STACK_LINE(415)
							int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
							HX_STACK_LINE(415)
							int _g = animations->length;		HX_STACK_VAR(_g,"_g");
							HX_STACK_LINE(415)
							while((true)){
								HX_STACK_LINE(415)
								if ((!(((_g11 < _g))))){
									HX_STACK_LINE(415)
									break;
								}
								HX_STACK_LINE(415)
								int index1 = (_g11)++;		HX_STACK_VAR(index1,"index1");
								HX_STACK_LINE(415)
								bool isRunning = animations->__get(index1).StaticCast< ::com::gamestudiohx::babylonhx::animations::Animation >()->animate(_this->target,(delay - _this->_localDelayOffset),_this->fromFrame,_this->toFrame,_this->loopAnimation,_this->speedRatio);		HX_STACK_VAR(isRunning,"isRunning");
								HX_STACK_LINE(415)
								running = (bool(running) || bool(isRunning));
							}
						}
						HX_STACK_LINE(415)
						if (((bool(!(running)) && bool((_this->onAnimationEnd != null()))))){
							HX_STACK_LINE(415)
							_this->onAnimationEnd();
						}
						HX_STACK_LINE(415)
						return running;
					}
					return null();
				}
			};
			HX_STACK_LINE(415)
			if ((!(_Function_2_1::Block(this,delay,index)))){
				HX_STACK_LINE(416)
				this->_activeAnimatables->splice(index,(int)1);
				HX_STACK_LINE(417)
				(index)--;
			}
			HX_STACK_LINE(419)
			(index)++;
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,_animate,(void))

::com::gamestudiohx::babylonhx::tools::math::Matrix Scene_obj::getViewMatrix( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getViewMatrix",0x09b67008,"com.gamestudiohx.babylonhx.Scene.getViewMatrix","com/gamestudiohx/babylonhx/Scene.hx",424,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(424)
	return this->_viewMatrix;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getViewMatrix,return )

::com::gamestudiohx::babylonhx::tools::math::Matrix Scene_obj::getProjectionMatrix( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getProjectionMatrix",0xf173cf32,"com.gamestudiohx.babylonhx.Scene.getProjectionMatrix","com/gamestudiohx/babylonhx/Scene.hx",428,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(428)
	return this->_projectionMatrix;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getProjectionMatrix,return )

::com::gamestudiohx::babylonhx::tools::math::Matrix Scene_obj::getTransformMatrix( ){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getTransformMatrix",0xd4d2c00b,"com.gamestudiohx.babylonhx.Scene.getTransformMatrix","com/gamestudiohx/babylonhx/Scene.hx",432,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_LINE(432)
	return this->_transformMatrix;
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,getTransformMatrix,return )

Void Scene_obj::setTransformMatrix( ::com::gamestudiohx::babylonhx::tools::math::Matrix view,::com::gamestudiohx::babylonhx::tools::math::Matrix projection){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","setTransformMatrix",0xb181f27f,"com.gamestudiohx.babylonhx.Scene.setTransformMatrix","com/gamestudiohx/babylonhx/Scene.hx",435,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_ARG(view,"view")
		HX_STACK_ARG(projection,"projection")
		HX_STACK_LINE(436)
		this->_viewMatrix = view;
		HX_STACK_LINE(437)
		this->_projectionMatrix = projection;
		HX_STACK_LINE(439)
		{
			HX_STACK_LINE(439)
			::com::gamestudiohx::babylonhx::tools::math::Matrix _this = this->_viewMatrix;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(439)
			::com::gamestudiohx::babylonhx::tools::math::Matrix other = this->_projectionMatrix;		HX_STACK_VAR(other,"other");
			HX_STACK_LINE(439)
			{
				HX_STACK_LINE(439)
				Array< Float > result = this->_transformMatrix->m;		HX_STACK_VAR(result,"result");
				HX_STACK_LINE(439)
				Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
				HX_STACK_LINE(439)
				Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
				HX_STACK_LINE(439)
				Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
				HX_STACK_LINE(439)
				Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
				HX_STACK_LINE(439)
				Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
				HX_STACK_LINE(439)
				Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
				HX_STACK_LINE(439)
				Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
				HX_STACK_LINE(439)
				Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
				HX_STACK_LINE(439)
				Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
				HX_STACK_LINE(439)
				Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
				HX_STACK_LINE(439)
				Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
				HX_STACK_LINE(439)
				Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
				HX_STACK_LINE(439)
				Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
				HX_STACK_LINE(439)
				Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
				HX_STACK_LINE(439)
				Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
				HX_STACK_LINE(439)
				Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
				HX_STACK_LINE(439)
				Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
				HX_STACK_LINE(439)
				Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
				HX_STACK_LINE(439)
				Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
				HX_STACK_LINE(439)
				Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
				HX_STACK_LINE(439)
				Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
				HX_STACK_LINE(439)
				Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
				HX_STACK_LINE(439)
				Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
				HX_STACK_LINE(439)
				Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
				HX_STACK_LINE(439)
				Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
				HX_STACK_LINE(439)
				Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
				HX_STACK_LINE(439)
				Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
				HX_STACK_LINE(439)
				Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
				HX_STACK_LINE(439)
				Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
				HX_STACK_LINE(439)
				Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
				HX_STACK_LINE(439)
				Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
				HX_STACK_LINE(439)
				Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
				HX_STACK_LINE(439)
				result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
				HX_STACK_LINE(439)
				result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
				HX_STACK_LINE(439)
				result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
				HX_STACK_LINE(439)
				result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
				HX_STACK_LINE(439)
				result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
				HX_STACK_LINE(439)
				result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
				HX_STACK_LINE(439)
				result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
				HX_STACK_LINE(439)
				result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
				HX_STACK_LINE(439)
				result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
				HX_STACK_LINE(439)
				result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
				HX_STACK_LINE(439)
				result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
				HX_STACK_LINE(439)
				result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
				HX_STACK_LINE(439)
				result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
				HX_STACK_LINE(439)
				result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
				HX_STACK_LINE(439)
				result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
				HX_STACK_LINE(439)
				result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
				HX_STACK_LINE(439)
				result;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,setTransformMatrix,(void))

Void Scene_obj::activeCameraByID( ::String id){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","activeCameraByID",0x13f01651,"com.gamestudiohx.babylonhx.Scene.activeCameraByID","com/gamestudiohx/babylonhx/Scene.hx",443,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_ARG(id,"id")
		HX_STACK_LINE(443)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(443)
		int _g = this->cameras->length;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(443)
		while((true)){
			HX_STACK_LINE(443)
			if ((!(((_g1 < _g))))){
				HX_STACK_LINE(443)
				break;
			}
			HX_STACK_LINE(443)
			int index = (_g1)++;		HX_STACK_VAR(index,"index");
			HX_STACK_LINE(444)
			if (((this->cameras->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::cameras::Camera >()->id == id))){
				HX_STACK_LINE(445)
				this->activeCamera = this->cameras->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::cameras::Camera >();
				HX_STACK_LINE(446)
				return null();
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,activeCameraByID,(void))

::com::gamestudiohx::babylonhx::materials::Material Scene_obj::getMaterialByID( ::String id){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getMaterialByID",0x3aee7fbb,"com.gamestudiohx.babylonhx.Scene.getMaterialByID","com/gamestudiohx/babylonhx/Scene.hx",451,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(id,"id")
	HX_STACK_LINE(452)
	{
		HX_STACK_LINE(452)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(452)
		int _g = this->materials->length;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(452)
		while((true)){
			HX_STACK_LINE(452)
			if ((!(((_g1 < _g))))){
				HX_STACK_LINE(452)
				break;
			}
			HX_STACK_LINE(452)
			int index = (_g1)++;		HX_STACK_VAR(index,"index");
			HX_STACK_LINE(453)
			if (((this->materials->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::materials::Material >()->id == id))){
				HX_STACK_LINE(454)
				return this->materials->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::materials::Material >();
			}
		}
	}
	HX_STACK_LINE(458)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getMaterialByID,return )

::com::gamestudiohx::babylonhx::materials::Material Scene_obj::getMaterialByName( ::String name){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getMaterialByName",0xb6be964b,"com.gamestudiohx.babylonhx.Scene.getMaterialByName","com/gamestudiohx/babylonhx/Scene.hx",461,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(name,"name")
	HX_STACK_LINE(462)
	{
		HX_STACK_LINE(462)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(462)
		int _g = this->materials->length;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(462)
		while((true)){
			HX_STACK_LINE(462)
			if ((!(((_g1 < _g))))){
				HX_STACK_LINE(462)
				break;
			}
			HX_STACK_LINE(462)
			int index = (_g1)++;		HX_STACK_VAR(index,"index");
			HX_STACK_LINE(463)
			if (((this->materials->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::materials::Material >()->name == name))){
				HX_STACK_LINE(464)
				return this->materials->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::materials::Material >();
			}
		}
	}
	HX_STACK_LINE(468)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getMaterialByName,return )

::com::gamestudiohx::babylonhx::lights::Light Scene_obj::getLightByID( ::String id){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getLightByID",0x49cec626,"com.gamestudiohx.babylonhx.Scene.getLightByID","com/gamestudiohx/babylonhx/Scene.hx",471,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(id,"id")
	HX_STACK_LINE(472)
	{
		HX_STACK_LINE(472)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(472)
		int _g = this->lights->length;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(472)
		while((true)){
			HX_STACK_LINE(472)
			if ((!(((_g1 < _g))))){
				HX_STACK_LINE(472)
				break;
			}
			HX_STACK_LINE(472)
			int index = (_g1)++;		HX_STACK_VAR(index,"index");
			HX_STACK_LINE(473)
			if (((this->lights->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::lights::Light >()->id == id))){
				HX_STACK_LINE(474)
				return this->lights->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::lights::Light >();
			}
		}
	}
	HX_STACK_LINE(478)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getLightByID,return )

::com::gamestudiohx::babylonhx::mesh::AbstractMesh Scene_obj::getMeshByID( ::String id){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getMeshByID",0x58fddf01,"com.gamestudiohx.babylonhx.Scene.getMeshByID","com/gamestudiohx/babylonhx/Scene.hx",481,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(id,"id")
	HX_STACK_LINE(482)
	{
		HX_STACK_LINE(482)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(482)
		int _g = this->meshes->length;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(482)
		while((true)){
			HX_STACK_LINE(482)
			if ((!(((_g1 < _g))))){
				HX_STACK_LINE(482)
				break;
			}
			HX_STACK_LINE(482)
			int index = (_g1)++;		HX_STACK_VAR(index,"index");
			HX_STACK_LINE(483)
			if (((this->meshes->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >()->id == id))){
				HX_STACK_LINE(484)
				return this->meshes->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();
			}
		}
	}
	HX_STACK_LINE(488)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getMeshByID,return )

::com::gamestudiohx::babylonhx::mesh::AbstractMesh Scene_obj::getLastMeshByID( ::String id){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getLastMeshByID",0x8f3b9477,"com.gamestudiohx.babylonhx.Scene.getLastMeshByID","com/gamestudiohx/babylonhx/Scene.hx",491,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(id,"id")
	HX_STACK_LINE(492)
	int index = (this->meshes->length - (int)1);		HX_STACK_VAR(index,"index");
	HX_STACK_LINE(493)
	while((true)){
		HX_STACK_LINE(493)
		if ((!(((index >= (int)0))))){
			HX_STACK_LINE(493)
			break;
		}
		HX_STACK_LINE(494)
		if (((this->meshes->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >()->id == id))){
			HX_STACK_LINE(495)
			return this->meshes->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();
		}
		HX_STACK_LINE(497)
		(index)--;
	}
	HX_STACK_LINE(500)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getLastMeshByID,return )

Dynamic Scene_obj::getLastEntryByID( ::String id){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getLastEntryByID",0xe01bbd8c,"com.gamestudiohx.babylonhx.Scene.getLastEntryByID","com/gamestudiohx/babylonhx/Scene.hx",503,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(id,"id")
	HX_STACK_LINE(504)
	int index = (this->meshes->length - (int)1);		HX_STACK_VAR(index,"index");
	HX_STACK_LINE(505)
	while((true)){
		HX_STACK_LINE(505)
		if ((!(((index >= (int)0))))){
			HX_STACK_LINE(505)
			break;
		}
		HX_STACK_LINE(506)
		if (((this->meshes->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >()->id == id))){
			HX_STACK_LINE(507)
			return this->meshes->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();
		}
		HX_STACK_LINE(509)
		(index)--;
	}
	HX_STACK_LINE(512)
	index = (this->cameras->length - (int)1);
	HX_STACK_LINE(513)
	while((true)){
		HX_STACK_LINE(513)
		if ((!(((index >= (int)0))))){
			HX_STACK_LINE(513)
			break;
		}
		HX_STACK_LINE(514)
		if (((this->cameras->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::cameras::Camera >()->id == id))){
			HX_STACK_LINE(515)
			return this->cameras->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::cameras::Camera >();
		}
		HX_STACK_LINE(517)
		(index)--;
	}
	HX_STACK_LINE(520)
	index = (this->lights->length - (int)1);
	HX_STACK_LINE(521)
	while((true)){
		HX_STACK_LINE(521)
		if ((!(((index >= (int)0))))){
			HX_STACK_LINE(521)
			break;
		}
		HX_STACK_LINE(522)
		if (((this->lights->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::lights::Light >()->id == id))){
			HX_STACK_LINE(523)
			return this->lights->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::lights::Light >();
		}
		HX_STACK_LINE(525)
		(index)--;
	}
	HX_STACK_LINE(528)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getLastEntryByID,return )

::com::gamestudiohx::babylonhx::mesh::AbstractMesh Scene_obj::getMeshByName( ::String name){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getMeshByName",0xfed8d311,"com.gamestudiohx.babylonhx.Scene.getMeshByName","com/gamestudiohx/babylonhx/Scene.hx",531,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(name,"name")
	HX_STACK_LINE(532)
	{
		HX_STACK_LINE(532)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(532)
		int _g = this->meshes->length;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(532)
		while((true)){
			HX_STACK_LINE(532)
			if ((!(((_g1 < _g))))){
				HX_STACK_LINE(532)
				break;
			}
			HX_STACK_LINE(532)
			int index = (_g1)++;		HX_STACK_VAR(index,"index");
			HX_STACK_LINE(533)
			if (((this->meshes->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >()->name == name))){
				HX_STACK_LINE(534)
				return this->meshes->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();
			}
		}
	}
	HX_STACK_LINE(538)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getMeshByName,return )

bool Scene_obj::isActiveMesh( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","isActiveMesh",0x43da8b91,"com.gamestudiohx.babylonhx.Scene.isActiveMesh","com/gamestudiohx/babylonhx/Scene.hx",541,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(mesh,"mesh")
	HX_STACK_LINE(542)
	int _g = this->_activeMeshes->indexOf(mesh);		HX_STACK_VAR(_g,"_g");
	HX_STACK_LINE(542)
	return (_g != (int)-1);
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,isActiveMesh,return )

::com::gamestudiohx::babylonhx::bones::Skeleton Scene_obj::getLastSkeletonByID( ::String id){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getLastSkeletonByID",0x01054857,"com.gamestudiohx.babylonhx.Scene.getLastSkeletonByID","com/gamestudiohx/babylonhx/Scene.hx",545,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(id,"id")
	HX_STACK_LINE(546)
	int index = (this->skeletons->length - (int)1);		HX_STACK_VAR(index,"index");
	HX_STACK_LINE(547)
	while((true)){
		HX_STACK_LINE(547)
		if ((!(((index >= (int)0))))){
			HX_STACK_LINE(547)
			break;
		}
		HX_STACK_LINE(548)
		if (((this->skeletons->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::bones::Skeleton >()->id == id))){
			HX_STACK_LINE(549)
			return this->skeletons->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::bones::Skeleton >();
		}
		HX_STACK_LINE(551)
		(index)--;
	}
	HX_STACK_LINE(554)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getLastSkeletonByID,return )

::com::gamestudiohx::babylonhx::bones::Skeleton Scene_obj::getSkeletonByID( ::String id){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getSkeletonByID",0xf0009fe1,"com.gamestudiohx.babylonhx.Scene.getSkeletonByID","com/gamestudiohx/babylonhx/Scene.hx",557,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(id,"id")
	HX_STACK_LINE(558)
	{
		HX_STACK_LINE(558)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(558)
		int _g = this->skeletons->length;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(558)
		while((true)){
			HX_STACK_LINE(558)
			if ((!(((_g1 < _g))))){
				HX_STACK_LINE(558)
				break;
			}
			HX_STACK_LINE(558)
			int index = (_g1)++;		HX_STACK_VAR(index,"index");
			HX_STACK_LINE(559)
			if (((this->skeletons->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::bones::Skeleton >()->id == id))){
				HX_STACK_LINE(560)
				return this->skeletons->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::bones::Skeleton >();
			}
		}
	}
	HX_STACK_LINE(564)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getSkeletonByID,return )

::com::gamestudiohx::babylonhx::bones::Skeleton Scene_obj::getSkeletonByName( ::String name){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getSkeletonByName",0x6cb58bf1,"com.gamestudiohx.babylonhx.Scene.getSkeletonByName","com/gamestudiohx/babylonhx/Scene.hx",567,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(name,"name")
	HX_STACK_LINE(568)
	{
		HX_STACK_LINE(568)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(568)
		int _g = this->skeletons->length;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(568)
		while((true)){
			HX_STACK_LINE(568)
			if ((!(((_g1 < _g))))){
				HX_STACK_LINE(568)
				break;
			}
			HX_STACK_LINE(568)
			int index = (_g1)++;		HX_STACK_VAR(index,"index");
			HX_STACK_LINE(569)
			if (((this->skeletons->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::bones::Skeleton >()->name == name))){
				HX_STACK_LINE(570)
				return this->skeletons->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::bones::Skeleton >();
			}
		}
	}
	HX_STACK_LINE(574)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getSkeletonByName,return )

Void Scene_obj::_evaluateSubMesh( ::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh,::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","_evaluateSubMesh",0xcb8810e9,"com.gamestudiohx.babylonhx.Scene._evaluateSubMesh","com/gamestudiohx/babylonhx/Scene.hx",578,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_ARG(subMesh,"subMesh")
		HX_STACK_ARG(mesh,"mesh")
		HX_STACK_LINE(578)
		if (((  ((!(((mesh->subMeshes->length == (int)1))))) ? bool(subMesh->_boundingInfo->isInFrustrum(this->_frustumPlanes)) : bool(true) ))){
			HX_STACK_LINE(579)
			Dynamic material = subMesh->getMaterial();		HX_STACK_VAR(material,"material");
			HX_STACK_LINE(581)
			if (((material != null()))){
				HX_STACK_LINE(583)
				Dynamic _g = ::Reflect_obj::field(material,HX_CSTRING("getRenderTargetTextures"));		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(583)
				if (((_g != null()))){
					HX_STACK_LINE(584)
					int _g1 = this->_processedMaterials->indexOf(material);		HX_STACK_VAR(_g1,"_g1");
					HX_STACK_LINE(584)
					if (((_g1 == (int)-1))){
						HX_STACK_LINE(585)
						this->_processedMaterials->push(material);
						HX_STACK_LINE(587)
						Dynamic _g2 = material->__Field(HX_CSTRING("getRenderTargetTextures"),true)();		HX_STACK_VAR(_g2,"_g2");
						HX_STACK_LINE(587)
						this->_renderTargets->concat(_g2);
					}
				}
				HX_STACK_LINE(592)
				hx::AddEq(this->_activeVertices,subMesh->verticesCount);
				HX_STACK_LINE(593)
				{
					HX_STACK_LINE(593)
					::com::gamestudiohx::babylonhx::rendering::RenderingManager _this = this->_renderingManager;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(593)
					::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh1 = subMesh->getMesh();		HX_STACK_VAR(mesh1,"mesh1");
					HX_STACK_LINE(593)
					int renderingGroupId = mesh1->renderingGroupId;		HX_STACK_VAR(renderingGroupId,"renderingGroupId");
					HX_STACK_LINE(593)
					if (((_this->_renderingGroups->length <= renderingGroupId))){
						HX_STACK_LINE(593)
						_this->_renderingGroups[renderingGroupId] = ::com::gamestudiohx::babylonhx::rendering::RenderingGroup_obj::__new(renderingGroupId,_this->_scene);
					}
					HX_STACK_LINE(593)
					_this->_renderingGroups->__get(renderingGroupId).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingGroup >()->dispatch(subMesh);
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,_evaluateSubMesh,(void))

Void Scene_obj::_evaluateActiveMeshes( ){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","_evaluateActiveMeshes",0x5d456725,"com.gamestudiohx.babylonhx.Scene._evaluateActiveMeshes","com/gamestudiohx/babylonhx/Scene.hx",598,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_LINE(599)
		this->_activeMeshes->reset();
		HX_STACK_LINE(600)
		this->_renderingManager->reset();
		HX_STACK_LINE(601)
		this->_processedMaterials->reset();
		HX_STACK_LINE(602)
		this->_activeParticleSystems->reset();
		HX_STACK_LINE(603)
		this->_activeSkeletons->reset();
		HX_STACK_LINE(605)
		if (((this->_frustumPlanes == null()))){
			HX_STACK_LINE(606)
			Array< ::Dynamic > _g = ::com::gamestudiohx::babylonhx::tools::math::Frustum_obj::GetPlanes(this->_transformMatrix);		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(606)
			this->_frustumPlanes = _g;
		}
		else{
			HX_STACK_LINE(608)
			Array< ::Dynamic > _g1;		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(608)
			{
				HX_STACK_LINE(608)
				::com::gamestudiohx::babylonhx::tools::math::Matrix transform = this->_transformMatrix;		HX_STACK_VAR(transform,"transform");
				HX_STACK_LINE(608)
				Array< ::Dynamic > frustumPlanes = this->_frustumPlanes;		HX_STACK_VAR(frustumPlanes,"frustumPlanes");
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) + transform->m->__get((int)2));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) + transform->m->__get((int)6));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)10) + transform->m->__get((int)10));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) + transform->m->__get((int)14));
				HX_STACK_LINE(608)
				{
					HX_STACK_LINE(608)
					::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(608)
					Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
					HX_STACK_LINE(608)
					Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
					HX_STACK_LINE(608)
					if (((norm != (int)0))){
						HX_STACK_LINE(608)
						magnitude = (Float(1.0) / Float(norm));
					}
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->x,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->y,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->z,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->d,magnitude);
				}
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) - transform->m->__get((int)2));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) - transform->m->__get((int)6));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) - transform->m->__get((int)10));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) - transform->m->__get((int)14));
				HX_STACK_LINE(608)
				{
					HX_STACK_LINE(608)
					::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(608)
					Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
					HX_STACK_LINE(608)
					Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
					HX_STACK_LINE(608)
					if (((norm != (int)0))){
						HX_STACK_LINE(608)
						magnitude = (Float(1.0) / Float(norm));
					}
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->x,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->y,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->z,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->d,magnitude);
				}
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) + transform->m->__get((int)0));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) + transform->m->__get((int)4));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) + transform->m->__get((int)8));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) + transform->m->__get((int)12));
				HX_STACK_LINE(608)
				{
					HX_STACK_LINE(608)
					::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(608)
					Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
					HX_STACK_LINE(608)
					Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
					HX_STACK_LINE(608)
					if (((norm != (int)0))){
						HX_STACK_LINE(608)
						magnitude = (Float(1.0) / Float(norm));
					}
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->x,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->y,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->z,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->d,magnitude);
				}
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) - transform->m->__get((int)0));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) - transform->m->__get((int)4));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) - transform->m->__get((int)8));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) - transform->m->__get((int)12));
				HX_STACK_LINE(608)
				{
					HX_STACK_LINE(608)
					::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(608)
					Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
					HX_STACK_LINE(608)
					Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
					HX_STACK_LINE(608)
					if (((norm != (int)0))){
						HX_STACK_LINE(608)
						magnitude = (Float(1.0) / Float(norm));
					}
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->x,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->y,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->z,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->d,magnitude);
				}
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) - transform->m->__get((int)1));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) - transform->m->__get((int)5));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) - transform->m->__get((int)9));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) - transform->m->__get((int)13));
				HX_STACK_LINE(608)
				{
					HX_STACK_LINE(608)
					::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(608)
					Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
					HX_STACK_LINE(608)
					Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
					HX_STACK_LINE(608)
					if (((norm != (int)0))){
						HX_STACK_LINE(608)
						magnitude = (Float(1.0) / Float(norm));
					}
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->x,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->y,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->z,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->d,magnitude);
				}
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) + transform->m->__get((int)1));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) + transform->m->__get((int)5));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) + transform->m->__get((int)9));
				HX_STACK_LINE(608)
				frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) + transform->m->__get((int)13));
				HX_STACK_LINE(608)
				{
					HX_STACK_LINE(608)
					::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(608)
					Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
					HX_STACK_LINE(608)
					Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
					HX_STACK_LINE(608)
					if (((norm != (int)0))){
						HX_STACK_LINE(608)
						magnitude = (Float(1.0) / Float(norm));
					}
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->x,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->y,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->normal->z,magnitude);
					HX_STACK_LINE(608)
					hx::MultEq(_this->d,magnitude);
				}
				HX_STACK_LINE(608)
				_g1 = frustumPlanes;
			}
			HX_STACK_LINE(608)
			this->_frustumPlanes = _g1;
		}
		HX_STACK_LINE(612)
		if (((this->_selectionOctree != null()))){
			HX_STACK_LINE(613)
			Array< ::Dynamic > selection = this->_selectionOctree->select(this->_frustumPlanes);		HX_STACK_VAR(selection,"selection");
			HX_STACK_LINE(615)
			{
				HX_STACK_LINE(615)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(615)
				int _g = selection->length;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(615)
				while((true)){
					HX_STACK_LINE(615)
					if ((!(((_g1 < _g))))){
						HX_STACK_LINE(615)
						break;
					}
					HX_STACK_LINE(615)
					int blockIndex = (_g1)++;		HX_STACK_VAR(blockIndex,"blockIndex");
					HX_STACK_LINE(616)
					::com::gamestudiohx::babylonhx::culling::octrees::OctreeBlock block = selection->__get(blockIndex).StaticCast< ::com::gamestudiohx::babylonhx::culling::octrees::OctreeBlock >();		HX_STACK_VAR(block,"block");
					HX_STACK_LINE(618)
					{
						HX_STACK_LINE(618)
						int _g3 = (int)0;		HX_STACK_VAR(_g3,"_g3");
						HX_STACK_LINE(618)
						int _g2 = block->meshes->length;		HX_STACK_VAR(_g2,"_g2");
						HX_STACK_LINE(618)
						while((true)){
							HX_STACK_LINE(618)
							if ((!(((_g3 < _g2))))){
								HX_STACK_LINE(618)
								break;
							}
							HX_STACK_LINE(618)
							int meshIndex = (_g3)++;		HX_STACK_VAR(meshIndex,"meshIndex");
							HX_STACK_LINE(619)
							::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = block->meshes->__get(meshIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
							HX_STACK_LINE(621)
							if (((mesh->_renderId != this->_renderId))){
								HX_STACK_LINE(622)
								int _g21 = mesh->getTotalVertices();		HX_STACK_VAR(_g21,"_g21");
								HX_STACK_LINE(622)
								hx::AddEq(this->_totalVertices,_g21);
								HX_STACK_LINE(624)
								if ((!(mesh->isReady()))){
									HX_STACK_LINE(625)
									continue;
								}
								HX_STACK_LINE(628)
								{
									HX_STACK_LINE(628)
									bool force = false;		HX_STACK_VAR(force,"force");
									HX_STACK_LINE(628)
									::com::gamestudiohx::babylonhx::tools::math::Matrix ret = mesh->_worldMatrix;		HX_STACK_VAR(ret,"ret");
									struct _Function_8_1{
										inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
											HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",628,0x7c8236a5)
											{
												HX_STACK_LINE(628)
												int _g31 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g31,"_g31");
												HX_STACK_LINE(628)
												return (  ((!(((mesh->_currentRenderId == _g31))))) ? bool(mesh->isSynchronized(null())) : bool(true) );
											}
											return null();
										}
									};
									HX_STACK_LINE(628)
									if (((  ((!(force))) ? bool(_Function_8_1::Block(mesh)) : bool(false) ))){
										HX_STACK_LINE(628)
										mesh->_childrenFlag = (int)0;
									}
									else{
										HX_STACK_LINE(628)
										mesh->_childrenFlag = (int)1;
										HX_STACK_LINE(628)
										mesh->_cache->__Field(HX_CSTRING("position"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->position);
										HX_STACK_LINE(628)
										mesh->_cache->__Field(HX_CSTRING("scaling"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->scaling);
										HX_STACK_LINE(628)
										mesh->_cache->__FieldRef(HX_CSTRING("pivotMatrixUpdated")) = false;
										HX_STACK_LINE(628)
										int _g4 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g4,"_g4");
										HX_STACK_LINE(628)
										mesh->_currentRenderId = _g4;
										HX_STACK_LINE(628)
										{
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localScaling;		HX_STACK_VAR(result,"result");
											HX_STACK_LINE(628)
											result->m[(int)0] = mesh->scaling->x;
											HX_STACK_LINE(628)
											result->m[(int)1] = (int)0;
											HX_STACK_LINE(628)
											result->m[(int)2] = (int)0;
											HX_STACK_LINE(628)
											result->m[(int)3] = (int)0;
											HX_STACK_LINE(628)
											result->m[(int)4] = (int)0;
											HX_STACK_LINE(628)
											result->m[(int)5] = mesh->scaling->y;
											HX_STACK_LINE(628)
											result->m[(int)6] = (int)0;
											HX_STACK_LINE(628)
											result->m[(int)7] = (int)0;
											HX_STACK_LINE(628)
											result->m[(int)8] = (int)0;
											HX_STACK_LINE(628)
											result->m[(int)9] = (int)0;
											HX_STACK_LINE(628)
											result->m[(int)10] = mesh->scaling->z;
											HX_STACK_LINE(628)
											result->m[(int)11] = (int)0;
											HX_STACK_LINE(628)
											result->m[(int)12] = (int)0;
											HX_STACK_LINE(628)
											result->m[(int)13] = (int)0;
											HX_STACK_LINE(628)
											result->m[(int)14] = (int)0;
											HX_STACK_LINE(628)
											result->m[(int)15] = 1.0;
											HX_STACK_LINE(628)
											result;
										}
										HX_STACK_LINE(628)
										if (((mesh->rotationQuaternion != null()))){
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Quaternion _this = mesh->rotationQuaternion;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
												HX_STACK_LINE(628)
												Float xx = (_this->x * _this->x);		HX_STACK_VAR(xx,"xx");
												HX_STACK_LINE(628)
												Float yy = (_this->y * _this->y);		HX_STACK_VAR(yy,"yy");
												HX_STACK_LINE(628)
												Float zz = (_this->z * _this->z);		HX_STACK_VAR(zz,"zz");
												HX_STACK_LINE(628)
												Float xy = (_this->x * _this->y);		HX_STACK_VAR(xy,"xy");
												HX_STACK_LINE(628)
												Float zw = (_this->z * _this->w);		HX_STACK_VAR(zw,"zw");
												HX_STACK_LINE(628)
												Float zx = (_this->z * _this->x);		HX_STACK_VAR(zx,"zx");
												HX_STACK_LINE(628)
												Float yw = (_this->y * _this->w);		HX_STACK_VAR(yw,"yw");
												HX_STACK_LINE(628)
												Float yz = (_this->y * _this->z);		HX_STACK_VAR(yz,"yz");
												HX_STACK_LINE(628)
												Float xw = (_this->x * _this->w);		HX_STACK_VAR(xw,"xw");
												HX_STACK_LINE(628)
												result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
												HX_STACK_LINE(628)
												result->m[(int)1] = (2.0 * ((xy + zw)));
												HX_STACK_LINE(628)
												result->m[(int)2] = (2.0 * ((zx - yw)));
												HX_STACK_LINE(628)
												result->m[(int)3] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)4] = (2.0 * ((xy - zw)));
												HX_STACK_LINE(628)
												result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
												HX_STACK_LINE(628)
												result->m[(int)6] = (2.0 * ((yz + xw)));
												HX_STACK_LINE(628)
												result->m[(int)7] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)8] = (2.0 * ((zx + yw)));
												HX_STACK_LINE(628)
												result->m[(int)9] = (2.0 * ((yz - xw)));
												HX_STACK_LINE(628)
												result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
												HX_STACK_LINE(628)
												result->m[(int)11] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)12] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)13] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)14] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)15] = 1.0;
												HX_STACK_LINE(628)
												result;
											}
											HX_STACK_LINE(628)
											mesh->_cache->__Field(HX_CSTRING("rotationQuaternion"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotationQuaternion);
										}
										else{
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Quaternion tempQuaternion = ::com::gamestudiohx::babylonhx::tools::math::Quaternion_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tempQuaternion,"tempQuaternion");
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Quaternion _g5;		HX_STACK_VAR(_g5,"_g5");
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													Float halfRoll = (mesh->rotation->z * 0.5);		HX_STACK_VAR(halfRoll,"halfRoll");
													HX_STACK_LINE(628)
													Float halfPitch = (mesh->rotation->x * 0.5);		HX_STACK_VAR(halfPitch,"halfPitch");
													HX_STACK_LINE(628)
													Float halfYaw = (mesh->rotation->y * 0.5);		HX_STACK_VAR(halfYaw,"halfYaw");
													HX_STACK_LINE(628)
													Float sinRoll = ::Math_obj::sin(halfRoll);		HX_STACK_VAR(sinRoll,"sinRoll");
													HX_STACK_LINE(628)
													Float cosRoll = ::Math_obj::cos(halfRoll);		HX_STACK_VAR(cosRoll,"cosRoll");
													HX_STACK_LINE(628)
													Float sinPitch = ::Math_obj::sin(halfPitch);		HX_STACK_VAR(sinPitch,"sinPitch");
													HX_STACK_LINE(628)
													Float cosPitch = ::Math_obj::cos(halfPitch);		HX_STACK_VAR(cosPitch,"cosPitch");
													HX_STACK_LINE(628)
													Float sinYaw = ::Math_obj::sin(halfYaw);		HX_STACK_VAR(sinYaw,"sinYaw");
													HX_STACK_LINE(628)
													Float cosYaw = ::Math_obj::cos(halfYaw);		HX_STACK_VAR(cosYaw,"cosYaw");
													HX_STACK_LINE(628)
													tempQuaternion->x = (((cosYaw * sinPitch) * cosRoll) + ((sinYaw * cosPitch) * sinRoll));
													HX_STACK_LINE(628)
													tempQuaternion->y = (((sinYaw * cosPitch) * cosRoll) - ((cosYaw * sinPitch) * sinRoll));
													HX_STACK_LINE(628)
													tempQuaternion->z = (((cosYaw * cosPitch) * sinRoll) - ((sinYaw * sinPitch) * cosRoll));
													HX_STACK_LINE(628)
													tempQuaternion->w = (((cosYaw * cosPitch) * cosRoll) + ((sinYaw * sinPitch) * sinRoll));
													HX_STACK_LINE(628)
													_g5 = tempQuaternion;
												}
												HX_STACK_LINE(628)
												tempQuaternion = _g5;
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													Float xx = (tempQuaternion->x * tempQuaternion->x);		HX_STACK_VAR(xx,"xx");
													HX_STACK_LINE(628)
													Float yy = (tempQuaternion->y * tempQuaternion->y);		HX_STACK_VAR(yy,"yy");
													HX_STACK_LINE(628)
													Float zz = (tempQuaternion->z * tempQuaternion->z);		HX_STACK_VAR(zz,"zz");
													HX_STACK_LINE(628)
													Float xy = (tempQuaternion->x * tempQuaternion->y);		HX_STACK_VAR(xy,"xy");
													HX_STACK_LINE(628)
													Float zw = (tempQuaternion->z * tempQuaternion->w);		HX_STACK_VAR(zw,"zw");
													HX_STACK_LINE(628)
													Float zx = (tempQuaternion->z * tempQuaternion->x);		HX_STACK_VAR(zx,"zx");
													HX_STACK_LINE(628)
													Float yw = (tempQuaternion->y * tempQuaternion->w);		HX_STACK_VAR(yw,"yw");
													HX_STACK_LINE(628)
													Float yz = (tempQuaternion->y * tempQuaternion->z);		HX_STACK_VAR(yz,"yz");
													HX_STACK_LINE(628)
													Float xw = (tempQuaternion->x * tempQuaternion->w);		HX_STACK_VAR(xw,"xw");
													HX_STACK_LINE(628)
													result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
													HX_STACK_LINE(628)
													result->m[(int)1] = (2.0 * ((xy + zw)));
													HX_STACK_LINE(628)
													result->m[(int)2] = (2.0 * ((zx - yw)));
													HX_STACK_LINE(628)
													result->m[(int)3] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)4] = (2.0 * ((xy - zw)));
													HX_STACK_LINE(628)
													result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
													HX_STACK_LINE(628)
													result->m[(int)6] = (2.0 * ((yz + xw)));
													HX_STACK_LINE(628)
													result->m[(int)7] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)8] = (2.0 * ((zx + yw)));
													HX_STACK_LINE(628)
													result->m[(int)9] = (2.0 * ((yz - xw)));
													HX_STACK_LINE(628)
													result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
													HX_STACK_LINE(628)
													result->m[(int)11] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)12] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)13] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)14] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)15] = 1.0;
													HX_STACK_LINE(628)
													result;
												}
											}
											HX_STACK_LINE(628)
											mesh->_cache->__Field(HX_CSTRING("rotation"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotation);
										}
										HX_STACK_LINE(628)
										if ((mesh->infiniteDistance)){
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::cameras::Camera camera = mesh->_scene->activeCamera;		HX_STACK_VAR(camera,"camera");
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													result->m[(int)0] = 1.0;
													HX_STACK_LINE(628)
													result->m[(int)1] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)2] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)3] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)4] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)5] = 1.0;
													HX_STACK_LINE(628)
													result->m[(int)6] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)7] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)8] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)9] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)10] = 1.0;
													HX_STACK_LINE(628)
													result->m[(int)11] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)12] = (mesh->position->x + camera->position->x);
													HX_STACK_LINE(628)
													result->m[(int)13] = (mesh->position->y + camera->position->y);
													HX_STACK_LINE(628)
													result->m[(int)14] = (mesh->position->z + camera->position->z);
													HX_STACK_LINE(628)
													result->m[(int)15] = 1.0;
													HX_STACK_LINE(628)
													result;
												}
											}
										}
										else{
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												result->m[(int)0] = 1.0;
												HX_STACK_LINE(628)
												result->m[(int)1] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)2] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)3] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)4] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)5] = 1.0;
												HX_STACK_LINE(628)
												result->m[(int)6] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)7] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)8] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)9] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)10] = 1.0;
												HX_STACK_LINE(628)
												result->m[(int)11] = (int)0;
												HX_STACK_LINE(628)
												result->m[(int)12] = mesh->position->x;
												HX_STACK_LINE(628)
												result->m[(int)13] = mesh->position->y;
												HX_STACK_LINE(628)
												result->m[(int)14] = mesh->position->z;
												HX_STACK_LINE(628)
												result->m[(int)15] = 1.0;
												HX_STACK_LINE(628)
												result;
											}
										}
										HX_STACK_LINE(628)
										{
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_pivotMatrix;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localScaling;		HX_STACK_VAR(other,"other");
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												Array< Float > result = mesh->_localPivotScaling->m;		HX_STACK_VAR(result,"result");
												HX_STACK_LINE(628)
												Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
												HX_STACK_LINE(628)
												Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
												HX_STACK_LINE(628)
												Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
												HX_STACK_LINE(628)
												Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
												HX_STACK_LINE(628)
												Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
												HX_STACK_LINE(628)
												Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
												HX_STACK_LINE(628)
												Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
												HX_STACK_LINE(628)
												Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
												HX_STACK_LINE(628)
												Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
												HX_STACK_LINE(628)
												Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
												HX_STACK_LINE(628)
												Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
												HX_STACK_LINE(628)
												Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
												HX_STACK_LINE(628)
												Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
												HX_STACK_LINE(628)
												Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
												HX_STACK_LINE(628)
												Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
												HX_STACK_LINE(628)
												Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
												HX_STACK_LINE(628)
												Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
												HX_STACK_LINE(628)
												Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
												HX_STACK_LINE(628)
												Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
												HX_STACK_LINE(628)
												Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
												HX_STACK_LINE(628)
												Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
												HX_STACK_LINE(628)
												Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
												HX_STACK_LINE(628)
												Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
												HX_STACK_LINE(628)
												Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
												HX_STACK_LINE(628)
												Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
												HX_STACK_LINE(628)
												Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
												HX_STACK_LINE(628)
												Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
												HX_STACK_LINE(628)
												Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
												HX_STACK_LINE(628)
												Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
												HX_STACK_LINE(628)
												Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
												HX_STACK_LINE(628)
												Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
												HX_STACK_LINE(628)
												Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
												HX_STACK_LINE(628)
												result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
												HX_STACK_LINE(628)
												result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
												HX_STACK_LINE(628)
												result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
												HX_STACK_LINE(628)
												result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
												HX_STACK_LINE(628)
												result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
												HX_STACK_LINE(628)
												result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
												HX_STACK_LINE(628)
												result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
												HX_STACK_LINE(628)
												result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
												HX_STACK_LINE(628)
												result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
												HX_STACK_LINE(628)
												result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
												HX_STACK_LINE(628)
												result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
												HX_STACK_LINE(628)
												result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
												HX_STACK_LINE(628)
												result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
												HX_STACK_LINE(628)
												result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
												HX_STACK_LINE(628)
												result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
												HX_STACK_LINE(628)
												result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
												HX_STACK_LINE(628)
												result;
											}
										}
										HX_STACK_LINE(628)
										{
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScaling;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localRotation;		HX_STACK_VAR(other,"other");
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
												HX_STACK_LINE(628)
												Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
												HX_STACK_LINE(628)
												Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
												HX_STACK_LINE(628)
												Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
												HX_STACK_LINE(628)
												Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
												HX_STACK_LINE(628)
												Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
												HX_STACK_LINE(628)
												Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
												HX_STACK_LINE(628)
												Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
												HX_STACK_LINE(628)
												Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
												HX_STACK_LINE(628)
												Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
												HX_STACK_LINE(628)
												Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
												HX_STACK_LINE(628)
												Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
												HX_STACK_LINE(628)
												Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
												HX_STACK_LINE(628)
												Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
												HX_STACK_LINE(628)
												Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
												HX_STACK_LINE(628)
												Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
												HX_STACK_LINE(628)
												Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
												HX_STACK_LINE(628)
												Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
												HX_STACK_LINE(628)
												Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
												HX_STACK_LINE(628)
												Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
												HX_STACK_LINE(628)
												Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
												HX_STACK_LINE(628)
												Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
												HX_STACK_LINE(628)
												Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
												HX_STACK_LINE(628)
												Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
												HX_STACK_LINE(628)
												Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
												HX_STACK_LINE(628)
												Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
												HX_STACK_LINE(628)
												Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
												HX_STACK_LINE(628)
												Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
												HX_STACK_LINE(628)
												Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
												HX_STACK_LINE(628)
												Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
												HX_STACK_LINE(628)
												Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
												HX_STACK_LINE(628)
												Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
												HX_STACK_LINE(628)
												Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
												HX_STACK_LINE(628)
												result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
												HX_STACK_LINE(628)
												result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
												HX_STACK_LINE(628)
												result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
												HX_STACK_LINE(628)
												result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
												HX_STACK_LINE(628)
												result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
												HX_STACK_LINE(628)
												result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
												HX_STACK_LINE(628)
												result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
												HX_STACK_LINE(628)
												result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
												HX_STACK_LINE(628)
												result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
												HX_STACK_LINE(628)
												result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
												HX_STACK_LINE(628)
												result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
												HX_STACK_LINE(628)
												result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
												HX_STACK_LINE(628)
												result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
												HX_STACK_LINE(628)
												result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
												HX_STACK_LINE(628)
												result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
												HX_STACK_LINE(628)
												result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
												HX_STACK_LINE(628)
												result;
											}
										}
										HX_STACK_LINE(628)
										if (((mesh->billboardMode != ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE))){
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::tools::math::Vector3 localPosition;		HX_STACK_VAR(localPosition,"localPosition");
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->position;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(628)
												localPosition = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
											}
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::tools::math::Vector3 zero;		HX_STACK_VAR(zero,"zero");
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_scene->activeCamera->position;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(628)
												zero = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
											}
											HX_STACK_LINE(628)
											if (((bool((mesh->parent != null())) && bool((mesh->parent->position != null()))))){
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = mesh->parent->position;		HX_STACK_VAR(otherVector,"otherVector");
													HX_STACK_LINE(628)
													hx::AddEq(localPosition->x,otherVector->x);
													HX_STACK_LINE(628)
													hx::AddEq(localPosition->y,otherVector->y);
													HX_STACK_LINE(628)
													hx::AddEq(localPosition->z,otherVector->z);
												}
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(628)
													{
														HX_STACK_LINE(628)
														result->m[(int)0] = 1.0;
														HX_STACK_LINE(628)
														result->m[(int)1] = (int)0;
														HX_STACK_LINE(628)
														result->m[(int)2] = (int)0;
														HX_STACK_LINE(628)
														result->m[(int)3] = (int)0;
														HX_STACK_LINE(628)
														result->m[(int)4] = (int)0;
														HX_STACK_LINE(628)
														result->m[(int)5] = 1.0;
														HX_STACK_LINE(628)
														result->m[(int)6] = (int)0;
														HX_STACK_LINE(628)
														result->m[(int)7] = (int)0;
														HX_STACK_LINE(628)
														result->m[(int)8] = (int)0;
														HX_STACK_LINE(628)
														result->m[(int)9] = (int)0;
														HX_STACK_LINE(628)
														result->m[(int)10] = 1.0;
														HX_STACK_LINE(628)
														result->m[(int)11] = (int)0;
														HX_STACK_LINE(628)
														result->m[(int)12] = localPosition->x;
														HX_STACK_LINE(628)
														result->m[(int)13] = localPosition->y;
														HX_STACK_LINE(628)
														result->m[(int)14] = localPosition->z;
														HX_STACK_LINE(628)
														result->m[(int)15] = 1.0;
														HX_STACK_LINE(628)
														result;
													}
												}
											}
											HX_STACK_LINE(628)
											if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))) == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))){
												HX_STACK_LINE(628)
												zero = mesh->_scene->activeCamera->position;
											}
											else{
												HX_STACK_LINE(628)
												if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_X))) != (int)0))){
													HX_STACK_LINE(628)
													zero->x = (localPosition->x + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
												}
												HX_STACK_LINE(628)
												if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Y))) != (int)0))){
													HX_STACK_LINE(628)
													zero->y = (localPosition->y + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
												}
												HX_STACK_LINE(628)
												if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Z))) != (int)0))){
													HX_STACK_LINE(628)
													zero->z = (localPosition->z + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
												}
											}
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Vector3 up = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Up();		HX_STACK_VAR(up,"up");
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localBillboard;		HX_STACK_VAR(result,"result");
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Vector3 xAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(xAxis,"xAxis");
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Vector3 yAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(yAxis,"yAxis");
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Vector3 zAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(zAxis,"zAxis");
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													zAxis->x = (zero->x - localPosition->x);
													HX_STACK_LINE(628)
													zAxis->y = (zero->y - localPosition->y);
													HX_STACK_LINE(628)
													zAxis->z = (zero->z - localPosition->z);
												}
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													Float len = ::Math_obj::sqrt((((zAxis->x * zAxis->x) + (zAxis->y * zAxis->y)) + (zAxis->z * zAxis->z)));		HX_STACK_VAR(len,"len");
													HX_STACK_LINE(628)
													if (((len != (int)0))){
														HX_STACK_LINE(628)
														Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
														HX_STACK_LINE(628)
														hx::MultEq(zAxis->x,num);
														HX_STACK_LINE(628)
														hx::MultEq(zAxis->y,num);
														HX_STACK_LINE(628)
														hx::MultEq(zAxis->z,num);
													}
												}
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													xAxis->x = ((up->y * zAxis->z) - (up->z * zAxis->y));
													HX_STACK_LINE(628)
													xAxis->y = ((up->z * zAxis->x) - (up->x * zAxis->z));
													HX_STACK_LINE(628)
													xAxis->z = ((up->x * zAxis->y) - (up->y * zAxis->x));
												}
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													Float len = ::Math_obj::sqrt((((xAxis->x * xAxis->x) + (xAxis->y * xAxis->y)) + (xAxis->z * xAxis->z)));		HX_STACK_VAR(len,"len");
													HX_STACK_LINE(628)
													if (((len != (int)0))){
														HX_STACK_LINE(628)
														Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
														HX_STACK_LINE(628)
														hx::MultEq(xAxis->x,num);
														HX_STACK_LINE(628)
														hx::MultEq(xAxis->y,num);
														HX_STACK_LINE(628)
														hx::MultEq(xAxis->z,num);
													}
												}
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													yAxis->x = ((zAxis->y * xAxis->z) - (zAxis->z * xAxis->y));
													HX_STACK_LINE(628)
													yAxis->y = ((zAxis->z * xAxis->x) - (zAxis->x * xAxis->z));
													HX_STACK_LINE(628)
													yAxis->z = ((zAxis->x * xAxis->y) - (zAxis->y * xAxis->x));
												}
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													Float len = ::Math_obj::sqrt((((yAxis->x * yAxis->x) + (yAxis->y * yAxis->y)) + (yAxis->z * yAxis->z)));		HX_STACK_VAR(len,"len");
													HX_STACK_LINE(628)
													if (((len != (int)0))){
														HX_STACK_LINE(628)
														Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
														HX_STACK_LINE(628)
														hx::MultEq(yAxis->x,num);
														HX_STACK_LINE(628)
														hx::MultEq(yAxis->y,num);
														HX_STACK_LINE(628)
														hx::MultEq(yAxis->z,num);
													}
												}
												HX_STACK_LINE(628)
												Float ex = -(((((xAxis->x * localPosition->x) + (xAxis->y * localPosition->y)) + (xAxis->z * localPosition->z))));		HX_STACK_VAR(ex,"ex");
												HX_STACK_LINE(628)
												Float ey = -(((((yAxis->x * localPosition->x) + (yAxis->y * localPosition->y)) + (yAxis->z * localPosition->z))));		HX_STACK_VAR(ey,"ey");
												HX_STACK_LINE(628)
												Float ez = -(((((zAxis->x * localPosition->x) + (zAxis->y * localPosition->y)) + (zAxis->z * localPosition->z))));		HX_STACK_VAR(ez,"ez");
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													result->m[(int)0] = xAxis->x;
													HX_STACK_LINE(628)
													result->m[(int)1] = yAxis->x;
													HX_STACK_LINE(628)
													result->m[(int)2] = zAxis->x;
													HX_STACK_LINE(628)
													result->m[(int)3] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)4] = xAxis->y;
													HX_STACK_LINE(628)
													result->m[(int)5] = yAxis->y;
													HX_STACK_LINE(628)
													result->m[(int)6] = zAxis->y;
													HX_STACK_LINE(628)
													result->m[(int)7] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)8] = xAxis->z;
													HX_STACK_LINE(628)
													result->m[(int)9] = yAxis->z;
													HX_STACK_LINE(628)
													result->m[(int)10] = zAxis->z;
													HX_STACK_LINE(628)
													result->m[(int)11] = (int)0;
													HX_STACK_LINE(628)
													result->m[(int)12] = ex;
													HX_STACK_LINE(628)
													result->m[(int)13] = ey;
													HX_STACK_LINE(628)
													result->m[(int)14] = ez;
													HX_STACK_LINE(628)
													result->m[(int)15] = (int)1;
													HX_STACK_LINE(628)
													result;
												}
											}
											HX_STACK_LINE(628)
											mesh->_localBillboard->m[(int)12] = mesh->_localBillboard->m[(int)13] = mesh->_localBillboard->m[(int)14] = (int)0;
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localBillboard;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
													HX_STACK_LINE(628)
													Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
													HX_STACK_LINE(628)
													Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
													HX_STACK_LINE(628)
													Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
													HX_STACK_LINE(628)
													Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
													HX_STACK_LINE(628)
													Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
													HX_STACK_LINE(628)
													Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
													HX_STACK_LINE(628)
													Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
													HX_STACK_LINE(628)
													Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
													HX_STACK_LINE(628)
													Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
													HX_STACK_LINE(628)
													Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
													HX_STACK_LINE(628)
													Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
													HX_STACK_LINE(628)
													Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
													HX_STACK_LINE(628)
													Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
													HX_STACK_LINE(628)
													Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
													HX_STACK_LINE(628)
													Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
													HX_STACK_LINE(628)
													Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
													HX_STACK_LINE(628)
													Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
													HX_STACK_LINE(628)
													Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
													HX_STACK_LINE(628)
													Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
													HX_STACK_LINE(628)
													Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
													HX_STACK_LINE(628)
													Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
													HX_STACK_LINE(628)
													Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
													HX_STACK_LINE(628)
													Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
													HX_STACK_LINE(628)
													Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
													HX_STACK_LINE(628)
													Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
													HX_STACK_LINE(628)
													Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
													HX_STACK_LINE(628)
													Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
													HX_STACK_LINE(628)
													Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
													HX_STACK_LINE(628)
													Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
													HX_STACK_LINE(628)
													Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
													HX_STACK_LINE(628)
													Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
													HX_STACK_LINE(628)
													Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
													HX_STACK_LINE(628)
													Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
													HX_STACK_LINE(628)
													Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
													HX_STACK_LINE(628)
													Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
													HX_STACK_LINE(628)
													Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
													HX_STACK_LINE(628)
													Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
													HX_STACK_LINE(628)
													Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
													HX_STACK_LINE(628)
													_this->m[(int)0] = (l23 * l27);
													HX_STACK_LINE(628)
													_this->m[(int)4] = (l24 * l27);
													HX_STACK_LINE(628)
													_this->m[(int)8] = (l25 * l27);
													HX_STACK_LINE(628)
													_this->m[(int)12] = (l26 * l27);
													HX_STACK_LINE(628)
													_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
													HX_STACK_LINE(628)
													_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
													HX_STACK_LINE(628)
													_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
													HX_STACK_LINE(628)
													_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
													HX_STACK_LINE(628)
													_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
													HX_STACK_LINE(628)
													_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
													HX_STACK_LINE(628)
													_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
													HX_STACK_LINE(628)
													_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
													HX_STACK_LINE(628)
													_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
													HX_STACK_LINE(628)
													_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
													HX_STACK_LINE(628)
													_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
													HX_STACK_LINE(628)
													_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
												}
											}
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localBillboard;		HX_STACK_VAR(other,"other");
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(628)
													Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
													HX_STACK_LINE(628)
													Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
													HX_STACK_LINE(628)
													Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
													HX_STACK_LINE(628)
													Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
													HX_STACK_LINE(628)
													Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
													HX_STACK_LINE(628)
													Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
													HX_STACK_LINE(628)
													Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
													HX_STACK_LINE(628)
													Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
													HX_STACK_LINE(628)
													Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
													HX_STACK_LINE(628)
													Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
													HX_STACK_LINE(628)
													Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
													HX_STACK_LINE(628)
													Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
													HX_STACK_LINE(628)
													Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
													HX_STACK_LINE(628)
													Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
													HX_STACK_LINE(628)
													Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
													HX_STACK_LINE(628)
													Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
													HX_STACK_LINE(628)
													Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
													HX_STACK_LINE(628)
													Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
													HX_STACK_LINE(628)
													Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
													HX_STACK_LINE(628)
													Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
													HX_STACK_LINE(628)
													Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
													HX_STACK_LINE(628)
													Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
													HX_STACK_LINE(628)
													Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
													HX_STACK_LINE(628)
													Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
													HX_STACK_LINE(628)
													Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
													HX_STACK_LINE(628)
													Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
													HX_STACK_LINE(628)
													Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
													HX_STACK_LINE(628)
													Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
													HX_STACK_LINE(628)
													Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
													HX_STACK_LINE(628)
													Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
													HX_STACK_LINE(628)
													Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
													HX_STACK_LINE(628)
													Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
													HX_STACK_LINE(628)
													result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
													HX_STACK_LINE(628)
													result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
													HX_STACK_LINE(628)
													result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
													HX_STACK_LINE(628)
													result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
													HX_STACK_LINE(628)
													result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
													HX_STACK_LINE(628)
													result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
													HX_STACK_LINE(628)
													result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
													HX_STACK_LINE(628)
													result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
													HX_STACK_LINE(628)
													result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
													HX_STACK_LINE(628)
													result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
													HX_STACK_LINE(628)
													result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
													HX_STACK_LINE(628)
													result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
													HX_STACK_LINE(628)
													result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
													HX_STACK_LINE(628)
													result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
													HX_STACK_LINE(628)
													result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
													HX_STACK_LINE(628)
													result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
													HX_STACK_LINE(628)
													result;
												}
											}
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_rotateYByPI;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localWorld;		HX_STACK_VAR(other,"other");
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(628)
													Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
													HX_STACK_LINE(628)
													Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
													HX_STACK_LINE(628)
													Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
													HX_STACK_LINE(628)
													Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
													HX_STACK_LINE(628)
													Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
													HX_STACK_LINE(628)
													Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
													HX_STACK_LINE(628)
													Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
													HX_STACK_LINE(628)
													Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
													HX_STACK_LINE(628)
													Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
													HX_STACK_LINE(628)
													Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
													HX_STACK_LINE(628)
													Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
													HX_STACK_LINE(628)
													Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
													HX_STACK_LINE(628)
													Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
													HX_STACK_LINE(628)
													Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
													HX_STACK_LINE(628)
													Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
													HX_STACK_LINE(628)
													Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
													HX_STACK_LINE(628)
													Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
													HX_STACK_LINE(628)
													Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
													HX_STACK_LINE(628)
													Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
													HX_STACK_LINE(628)
													Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
													HX_STACK_LINE(628)
													Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
													HX_STACK_LINE(628)
													Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
													HX_STACK_LINE(628)
													Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
													HX_STACK_LINE(628)
													Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
													HX_STACK_LINE(628)
													Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
													HX_STACK_LINE(628)
													Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
													HX_STACK_LINE(628)
													Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
													HX_STACK_LINE(628)
													Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
													HX_STACK_LINE(628)
													Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
													HX_STACK_LINE(628)
													Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
													HX_STACK_LINE(628)
													Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
													HX_STACK_LINE(628)
													Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
													HX_STACK_LINE(628)
													result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
													HX_STACK_LINE(628)
													result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
													HX_STACK_LINE(628)
													result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
													HX_STACK_LINE(628)
													result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
													HX_STACK_LINE(628)
													result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
													HX_STACK_LINE(628)
													result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
													HX_STACK_LINE(628)
													result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
													HX_STACK_LINE(628)
													result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
													HX_STACK_LINE(628)
													result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
													HX_STACK_LINE(628)
													result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
													HX_STACK_LINE(628)
													result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
													HX_STACK_LINE(628)
													result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
													HX_STACK_LINE(628)
													result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
													HX_STACK_LINE(628)
													result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
													HX_STACK_LINE(628)
													result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
													HX_STACK_LINE(628)
													result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
													HX_STACK_LINE(628)
													result;
												}
											}
										}
										struct _Function_9_1{
											inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
												HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",628,0x7c8236a5)
												{
													HX_STACK_LINE(628)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _g6 = mesh->parent->getWorldMatrix();		HX_STACK_VAR(_g6,"_g6");
													HX_STACK_LINE(628)
													return (_g6 != null());
												}
												return null();
											}
										};
										HX_STACK_LINE(628)
										if (((  (((  (((mesh->parent != null()))) ? bool(_Function_9_1::Block(mesh)) : bool(false) ))) ? bool((mesh->billboardMode == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE)) : bool(false) ))){
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(628)
													Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
													HX_STACK_LINE(628)
													Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
													HX_STACK_LINE(628)
													Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
													HX_STACK_LINE(628)
													Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
													HX_STACK_LINE(628)
													Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
													HX_STACK_LINE(628)
													Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
													HX_STACK_LINE(628)
													Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
													HX_STACK_LINE(628)
													Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
													HX_STACK_LINE(628)
													Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
													HX_STACK_LINE(628)
													Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
													HX_STACK_LINE(628)
													Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
													HX_STACK_LINE(628)
													Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
													HX_STACK_LINE(628)
													Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
													HX_STACK_LINE(628)
													Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
													HX_STACK_LINE(628)
													Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
													HX_STACK_LINE(628)
													Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
													HX_STACK_LINE(628)
													Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
													HX_STACK_LINE(628)
													Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
													HX_STACK_LINE(628)
													Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
													HX_STACK_LINE(628)
													Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
													HX_STACK_LINE(628)
													Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
													HX_STACK_LINE(628)
													Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
													HX_STACK_LINE(628)
													Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
													HX_STACK_LINE(628)
													Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
													HX_STACK_LINE(628)
													Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
													HX_STACK_LINE(628)
													Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
													HX_STACK_LINE(628)
													Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
													HX_STACK_LINE(628)
													Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
													HX_STACK_LINE(628)
													Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
													HX_STACK_LINE(628)
													Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
													HX_STACK_LINE(628)
													Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
													HX_STACK_LINE(628)
													Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
													HX_STACK_LINE(628)
													result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
													HX_STACK_LINE(628)
													result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
													HX_STACK_LINE(628)
													result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
													HX_STACK_LINE(628)
													result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
													HX_STACK_LINE(628)
													result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
													HX_STACK_LINE(628)
													result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
													HX_STACK_LINE(628)
													result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
													HX_STACK_LINE(628)
													result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
													HX_STACK_LINE(628)
													result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
													HX_STACK_LINE(628)
													result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
													HX_STACK_LINE(628)
													result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
													HX_STACK_LINE(628)
													result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
													HX_STACK_LINE(628)
													result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
													HX_STACK_LINE(628)
													result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
													HX_STACK_LINE(628)
													result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
													HX_STACK_LINE(628)
													result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
													HX_STACK_LINE(628)
													result;
												}
											}
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::tools::math::Matrix parentWorld = mesh->parent->getWorldMatrix();		HX_STACK_VAR(parentWorld,"parentWorld");
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localWorld;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(628)
												{
													HX_STACK_LINE(628)
													Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(628)
													Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
													HX_STACK_LINE(628)
													Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
													HX_STACK_LINE(628)
													Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
													HX_STACK_LINE(628)
													Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
													HX_STACK_LINE(628)
													Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
													HX_STACK_LINE(628)
													Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
													HX_STACK_LINE(628)
													Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
													HX_STACK_LINE(628)
													Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
													HX_STACK_LINE(628)
													Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
													HX_STACK_LINE(628)
													Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
													HX_STACK_LINE(628)
													Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
													HX_STACK_LINE(628)
													Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
													HX_STACK_LINE(628)
													Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
													HX_STACK_LINE(628)
													Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
													HX_STACK_LINE(628)
													Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
													HX_STACK_LINE(628)
													Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
													HX_STACK_LINE(628)
													Float om0 = parentWorld->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
													HX_STACK_LINE(628)
													Float om1 = parentWorld->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
													HX_STACK_LINE(628)
													Float om2 = parentWorld->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
													HX_STACK_LINE(628)
													Float om3 = parentWorld->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
													HX_STACK_LINE(628)
													Float om4 = parentWorld->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
													HX_STACK_LINE(628)
													Float om5 = parentWorld->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
													HX_STACK_LINE(628)
													Float om6 = parentWorld->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
													HX_STACK_LINE(628)
													Float om7 = parentWorld->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
													HX_STACK_LINE(628)
													Float om8 = parentWorld->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
													HX_STACK_LINE(628)
													Float om9 = parentWorld->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
													HX_STACK_LINE(628)
													Float om10 = parentWorld->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
													HX_STACK_LINE(628)
													Float om11 = parentWorld->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
													HX_STACK_LINE(628)
													Float om12 = parentWorld->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
													HX_STACK_LINE(628)
													Float om13 = parentWorld->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
													HX_STACK_LINE(628)
													Float om14 = parentWorld->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
													HX_STACK_LINE(628)
													Float om15 = parentWorld->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
													HX_STACK_LINE(628)
													result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
													HX_STACK_LINE(628)
													result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
													HX_STACK_LINE(628)
													result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
													HX_STACK_LINE(628)
													result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
													HX_STACK_LINE(628)
													result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
													HX_STACK_LINE(628)
													result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
													HX_STACK_LINE(628)
													result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
													HX_STACK_LINE(628)
													result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
													HX_STACK_LINE(628)
													result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
													HX_STACK_LINE(628)
													result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
													HX_STACK_LINE(628)
													result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
													HX_STACK_LINE(628)
													result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
													HX_STACK_LINE(628)
													result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
													HX_STACK_LINE(628)
													result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
													HX_STACK_LINE(628)
													result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
													HX_STACK_LINE(628)
													result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
													HX_STACK_LINE(628)
													result;
												}
											}
										}
										else{
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
												HX_STACK_LINE(628)
												Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
												HX_STACK_LINE(628)
												Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
												HX_STACK_LINE(628)
												Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
												HX_STACK_LINE(628)
												Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
												HX_STACK_LINE(628)
												Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
												HX_STACK_LINE(628)
												Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
												HX_STACK_LINE(628)
												Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
												HX_STACK_LINE(628)
												Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
												HX_STACK_LINE(628)
												Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
												HX_STACK_LINE(628)
												Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
												HX_STACK_LINE(628)
												Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
												HX_STACK_LINE(628)
												Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
												HX_STACK_LINE(628)
												Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
												HX_STACK_LINE(628)
												Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
												HX_STACK_LINE(628)
												Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
												HX_STACK_LINE(628)
												Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
												HX_STACK_LINE(628)
												Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
												HX_STACK_LINE(628)
												Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
												HX_STACK_LINE(628)
												Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
												HX_STACK_LINE(628)
												Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
												HX_STACK_LINE(628)
												Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
												HX_STACK_LINE(628)
												Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
												HX_STACK_LINE(628)
												Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
												HX_STACK_LINE(628)
												Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
												HX_STACK_LINE(628)
												Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
												HX_STACK_LINE(628)
												Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
												HX_STACK_LINE(628)
												Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
												HX_STACK_LINE(628)
												Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
												HX_STACK_LINE(628)
												Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
												HX_STACK_LINE(628)
												Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
												HX_STACK_LINE(628)
												Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
												HX_STACK_LINE(628)
												Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
												HX_STACK_LINE(628)
												result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
												HX_STACK_LINE(628)
												result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
												HX_STACK_LINE(628)
												result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
												HX_STACK_LINE(628)
												result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
												HX_STACK_LINE(628)
												result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
												HX_STACK_LINE(628)
												result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
												HX_STACK_LINE(628)
												result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
												HX_STACK_LINE(628)
												result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
												HX_STACK_LINE(628)
												result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
												HX_STACK_LINE(628)
												result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
												HX_STACK_LINE(628)
												result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
												HX_STACK_LINE(628)
												result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
												HX_STACK_LINE(628)
												result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
												HX_STACK_LINE(628)
												result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
												HX_STACK_LINE(628)
												result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
												HX_STACK_LINE(628)
												result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
												HX_STACK_LINE(628)
												result;
											}
										}
										HX_STACK_LINE(628)
										if (((mesh->_boundingInfo != null()))){
											HX_STACK_LINE(628)
											Float _g7 = ::Math_obj::max(mesh->scaling->x,mesh->scaling->y);		HX_STACK_VAR(_g7,"_g7");
											HX_STACK_LINE(628)
											mesh->_scaleFactor = _g7;
											HX_STACK_LINE(628)
											Float _g8 = ::Math_obj::max(mesh->_scaleFactor,mesh->scaling->z);		HX_STACK_VAR(_g8,"_g8");
											HX_STACK_LINE(628)
											mesh->_scaleFactor = _g8;
											struct _Function_10_1{
												inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
													HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",628,0x7c8236a5)
													{
														HX_STACK_LINE(628)
														Dynamic _g9 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g9,"_g9");
														HX_STACK_LINE(628)
														return (_g9 != null());
													}
													return null();
												}
											};
											HX_STACK_LINE(628)
											if (((  (((mesh->parent != null()))) ? bool(_Function_10_1::Block(mesh)) : bool(false) ))){
												HX_STACK_LINE(628)
												Dynamic _g10 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g10,"_g10");
												HX_STACK_LINE(628)
												Float _g11 = (mesh->_scaleFactor * _g10);		HX_STACK_VAR(_g11,"_g11");
												HX_STACK_LINE(628)
												mesh->_scaleFactor = _g11;
											}
											HX_STACK_LINE(628)
											mesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
											HX_STACK_LINE(628)
											{
												HX_STACK_LINE(628)
												int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
												HX_STACK_LINE(628)
												int _g5 = mesh->subMeshes->length;		HX_STACK_VAR(_g5,"_g5");
												HX_STACK_LINE(628)
												while((true)){
													HX_STACK_LINE(628)
													if ((!(((_g11 < _g5))))){
														HX_STACK_LINE(628)
														break;
													}
													HX_STACK_LINE(628)
													int subIndex = (_g11)++;		HX_STACK_VAR(subIndex,"subIndex");
													HX_STACK_LINE(628)
													::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
													HX_STACK_LINE(628)
													subMesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
												}
											}
										}
										HX_STACK_LINE(628)
										{
											HX_STACK_LINE(628)
											::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_absolutePosition;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(628)
											_this->x = mesh->_worldMatrix->m->__get((int)12);
											HX_STACK_LINE(628)
											_this->y = mesh->_worldMatrix->m->__get((int)13);
											HX_STACK_LINE(628)
											_this->z = mesh->_worldMatrix->m->__get((int)14);
										}
										HX_STACK_LINE(628)
										ret = mesh->_worldMatrix;
									}
									HX_STACK_LINE(628)
									ret;
								}
								HX_STACK_LINE(629)
								mesh->_renderId = (int)0;
							}
							struct _Function_6_1{
								inline static bool Block( hx::ObjectPtr< ::com::gamestudiohx::babylonhx::Scene_obj > __this,::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
									HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",632,0x7c8236a5)
									{
										HX_STACK_LINE(632)
										return (  (((  (((  (((  (((mesh->_renderId == (int)0))) ? bool(mesh->isEnabled()) : bool(false) ))) ? bool(mesh->isVisible) : bool(false) ))) ? bool((mesh->visibility > (int)0)) : bool(false) ))) ? bool(mesh->isInFrustum(__this->_frustumPlanes)) : bool(false) );
									}
									return null();
								}
							};
							HX_STACK_LINE(632)
							if (((  ((!(((mesh->_renderId == this->_renderId))))) ? bool(_Function_6_1::Block(this,mesh)) : bool(true) ))){
								HX_STACK_LINE(633)
								if (((mesh->_renderId == (int)0))){
									HX_STACK_LINE(634)
									this->_activeMeshes->push(mesh);
								}
								HX_STACK_LINE(636)
								mesh->_renderId = this->_renderId;
								HX_STACK_LINE(638)
								if (((mesh->skeleton != null()))){
									HX_STACK_LINE(639)
									int _g12 = this->_activeSkeletons->indexOf(mesh->skeleton);		HX_STACK_VAR(_g12,"_g12");
									HX_STACK_LINE(639)
									if (((_g12 != (int)-1))){
										HX_STACK_LINE(640)
										this->_activeSkeletons->pushNoDuplicate(mesh->skeleton);
									}
								}
								HX_STACK_LINE(644)
								Array< ::Dynamic > subMeshes = block->subMeshes->__get(meshIndex).StaticCast< Array< ::Dynamic > >();		HX_STACK_VAR(subMeshes,"subMeshes");
								HX_STACK_LINE(645)
								{
									HX_STACK_LINE(645)
									int _g5 = (int)0;		HX_STACK_VAR(_g5,"_g5");
									HX_STACK_LINE(645)
									int _g4 = subMeshes->length;		HX_STACK_VAR(_g4,"_g4");
									HX_STACK_LINE(645)
									while((true)){
										HX_STACK_LINE(645)
										if ((!(((_g5 < _g4))))){
											HX_STACK_LINE(645)
											break;
										}
										HX_STACK_LINE(645)
										int subIndex = (_g5)++;		HX_STACK_VAR(subIndex,"subIndex");
										HX_STACK_LINE(646)
										::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
										HX_STACK_LINE(648)
										if (((subMesh->_renderId == this->_renderId))){
											HX_STACK_LINE(649)
											continue;
										}
										HX_STACK_LINE(651)
										subMesh->_renderId = this->_renderId;
										HX_STACK_LINE(653)
										if (((  ((!(((mesh->subMeshes->length == (int)1))))) ? bool(subMesh->_boundingInfo->isInFrustrum(this->_frustumPlanes)) : bool(true) ))){
											HX_STACK_LINE(653)
											Dynamic material = subMesh->getMaterial();		HX_STACK_VAR(material,"material");
											HX_STACK_LINE(653)
											if (((material != null()))){
												HX_STACK_LINE(653)
												Dynamic _g13 = ::Reflect_obj::field(material,HX_CSTRING("getRenderTargetTextures"));		HX_STACK_VAR(_g13,"_g13");
												HX_STACK_LINE(653)
												if (((_g13 != null()))){
													HX_STACK_LINE(653)
													int _g14 = this->_processedMaterials->indexOf(material);		HX_STACK_VAR(_g14,"_g14");
													HX_STACK_LINE(653)
													if (((_g14 == (int)-1))){
														HX_STACK_LINE(653)
														this->_processedMaterials->push(material);
														HX_STACK_LINE(653)
														Dynamic _g15 = material->__Field(HX_CSTRING("getRenderTargetTextures"),true)();		HX_STACK_VAR(_g15,"_g15");
														HX_STACK_LINE(653)
														this->_renderTargets->concat(_g15);
													}
												}
												HX_STACK_LINE(653)
												hx::AddEq(this->_activeVertices,subMesh->verticesCount);
												HX_STACK_LINE(653)
												{
													HX_STACK_LINE(653)
													::com::gamestudiohx::babylonhx::rendering::RenderingManager _this = this->_renderingManager;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(653)
													::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh1 = subMesh->getMesh();		HX_STACK_VAR(mesh1,"mesh1");
													HX_STACK_LINE(653)
													int renderingGroupId = mesh1->renderingGroupId;		HX_STACK_VAR(renderingGroupId,"renderingGroupId");
													HX_STACK_LINE(653)
													if (((_this->_renderingGroups->length <= renderingGroupId))){
														HX_STACK_LINE(653)
														_this->_renderingGroups[renderingGroupId] = ::com::gamestudiohx::babylonhx::rendering::RenderingGroup_obj::__new(renderingGroupId,_this->_scene);
													}
													HX_STACK_LINE(653)
													_this->_renderingGroups->__get(renderingGroupId).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingGroup >()->dispatch(subMesh);
												}
											}
										}
									}
								}
							}
							else{
								HX_STACK_LINE(656)
								mesh->_renderId = -(this->_renderId);
							}
						}
					}
				}
			}
		}
		else{
			HX_STACK_LINE(661)
			int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(661)
			int _g = this->meshes->length;		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(661)
			while((true)){
				HX_STACK_LINE(661)
				if ((!(((_g1 < _g))))){
					HX_STACK_LINE(661)
					break;
				}
				HX_STACK_LINE(661)
				int meshIndex = (_g1)++;		HX_STACK_VAR(meshIndex,"meshIndex");
				HX_STACK_LINE(662)
				::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = this->meshes->__get(meshIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
				HX_STACK_LINE(664)
				int _g16 = mesh->getTotalVertices();		HX_STACK_VAR(_g16,"_g16");
				HX_STACK_LINE(664)
				hx::AddEq(this->_totalVertices,_g16);
				HX_STACK_LINE(666)
				if ((!(mesh->isReady()))){
					HX_STACK_LINE(667)
					continue;
				}
				HX_STACK_LINE(670)
				{
					HX_STACK_LINE(670)
					bool force = false;		HX_STACK_VAR(force,"force");
					HX_STACK_LINE(670)
					::com::gamestudiohx::babylonhx::tools::math::Matrix ret = mesh->_worldMatrix;		HX_STACK_VAR(ret,"ret");
					struct _Function_4_1{
						inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",670,0x7c8236a5)
							{
								HX_STACK_LINE(670)
								int _g17 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g17,"_g17");
								HX_STACK_LINE(670)
								return (  ((!(((mesh->_currentRenderId == _g17))))) ? bool(mesh->isSynchronized(null())) : bool(true) );
							}
							return null();
						}
					};
					HX_STACK_LINE(670)
					if (((  ((!(force))) ? bool(_Function_4_1::Block(mesh)) : bool(false) ))){
						HX_STACK_LINE(670)
						mesh->_childrenFlag = (int)0;
					}
					else{
						HX_STACK_LINE(670)
						mesh->_childrenFlag = (int)1;
						HX_STACK_LINE(670)
						mesh->_cache->__Field(HX_CSTRING("position"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->position);
						HX_STACK_LINE(670)
						mesh->_cache->__Field(HX_CSTRING("scaling"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->scaling);
						HX_STACK_LINE(670)
						mesh->_cache->__FieldRef(HX_CSTRING("pivotMatrixUpdated")) = false;
						HX_STACK_LINE(670)
						int _g18 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g18,"_g18");
						HX_STACK_LINE(670)
						mesh->_currentRenderId = _g18;
						HX_STACK_LINE(670)
						{
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localScaling;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(670)
							result->m[(int)0] = mesh->scaling->x;
							HX_STACK_LINE(670)
							result->m[(int)1] = (int)0;
							HX_STACK_LINE(670)
							result->m[(int)2] = (int)0;
							HX_STACK_LINE(670)
							result->m[(int)3] = (int)0;
							HX_STACK_LINE(670)
							result->m[(int)4] = (int)0;
							HX_STACK_LINE(670)
							result->m[(int)5] = mesh->scaling->y;
							HX_STACK_LINE(670)
							result->m[(int)6] = (int)0;
							HX_STACK_LINE(670)
							result->m[(int)7] = (int)0;
							HX_STACK_LINE(670)
							result->m[(int)8] = (int)0;
							HX_STACK_LINE(670)
							result->m[(int)9] = (int)0;
							HX_STACK_LINE(670)
							result->m[(int)10] = mesh->scaling->z;
							HX_STACK_LINE(670)
							result->m[(int)11] = (int)0;
							HX_STACK_LINE(670)
							result->m[(int)12] = (int)0;
							HX_STACK_LINE(670)
							result->m[(int)13] = (int)0;
							HX_STACK_LINE(670)
							result->m[(int)14] = (int)0;
							HX_STACK_LINE(670)
							result->m[(int)15] = 1.0;
							HX_STACK_LINE(670)
							result;
						}
						HX_STACK_LINE(670)
						if (((mesh->rotationQuaternion != null()))){
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion _this = mesh->rotationQuaternion;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(670)
								Float xx = (_this->x * _this->x);		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(670)
								Float yy = (_this->y * _this->y);		HX_STACK_VAR(yy,"yy");
								HX_STACK_LINE(670)
								Float zz = (_this->z * _this->z);		HX_STACK_VAR(zz,"zz");
								HX_STACK_LINE(670)
								Float xy = (_this->x * _this->y);		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(670)
								Float zw = (_this->z * _this->w);		HX_STACK_VAR(zw,"zw");
								HX_STACK_LINE(670)
								Float zx = (_this->z * _this->x);		HX_STACK_VAR(zx,"zx");
								HX_STACK_LINE(670)
								Float yw = (_this->y * _this->w);		HX_STACK_VAR(yw,"yw");
								HX_STACK_LINE(670)
								Float yz = (_this->y * _this->z);		HX_STACK_VAR(yz,"yz");
								HX_STACK_LINE(670)
								Float xw = (_this->x * _this->w);		HX_STACK_VAR(xw,"xw");
								HX_STACK_LINE(670)
								result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
								HX_STACK_LINE(670)
								result->m[(int)1] = (2.0 * ((xy + zw)));
								HX_STACK_LINE(670)
								result->m[(int)2] = (2.0 * ((zx - yw)));
								HX_STACK_LINE(670)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)4] = (2.0 * ((xy - zw)));
								HX_STACK_LINE(670)
								result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
								HX_STACK_LINE(670)
								result->m[(int)6] = (2.0 * ((yz + xw)));
								HX_STACK_LINE(670)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)8] = (2.0 * ((zx + yw)));
								HX_STACK_LINE(670)
								result->m[(int)9] = (2.0 * ((yz - xw)));
								HX_STACK_LINE(670)
								result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
								HX_STACK_LINE(670)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)12] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)13] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)14] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(670)
								result;
							}
							HX_STACK_LINE(670)
							mesh->_cache->__Field(HX_CSTRING("rotationQuaternion"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotationQuaternion);
						}
						else{
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion tempQuaternion = ::com::gamestudiohx::babylonhx::tools::math::Quaternion_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tempQuaternion,"tempQuaternion");
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion _g19;		HX_STACK_VAR(_g19,"_g19");
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									Float halfRoll = (mesh->rotation->z * 0.5);		HX_STACK_VAR(halfRoll,"halfRoll");
									HX_STACK_LINE(670)
									Float halfPitch = (mesh->rotation->x * 0.5);		HX_STACK_VAR(halfPitch,"halfPitch");
									HX_STACK_LINE(670)
									Float halfYaw = (mesh->rotation->y * 0.5);		HX_STACK_VAR(halfYaw,"halfYaw");
									HX_STACK_LINE(670)
									Float sinRoll = ::Math_obj::sin(halfRoll);		HX_STACK_VAR(sinRoll,"sinRoll");
									HX_STACK_LINE(670)
									Float cosRoll = ::Math_obj::cos(halfRoll);		HX_STACK_VAR(cosRoll,"cosRoll");
									HX_STACK_LINE(670)
									Float sinPitch = ::Math_obj::sin(halfPitch);		HX_STACK_VAR(sinPitch,"sinPitch");
									HX_STACK_LINE(670)
									Float cosPitch = ::Math_obj::cos(halfPitch);		HX_STACK_VAR(cosPitch,"cosPitch");
									HX_STACK_LINE(670)
									Float sinYaw = ::Math_obj::sin(halfYaw);		HX_STACK_VAR(sinYaw,"sinYaw");
									HX_STACK_LINE(670)
									Float cosYaw = ::Math_obj::cos(halfYaw);		HX_STACK_VAR(cosYaw,"cosYaw");
									HX_STACK_LINE(670)
									tempQuaternion->x = (((cosYaw * sinPitch) * cosRoll) + ((sinYaw * cosPitch) * sinRoll));
									HX_STACK_LINE(670)
									tempQuaternion->y = (((sinYaw * cosPitch) * cosRoll) - ((cosYaw * sinPitch) * sinRoll));
									HX_STACK_LINE(670)
									tempQuaternion->z = (((cosYaw * cosPitch) * sinRoll) - ((sinYaw * sinPitch) * cosRoll));
									HX_STACK_LINE(670)
									tempQuaternion->w = (((cosYaw * cosPitch) * cosRoll) + ((sinYaw * sinPitch) * sinRoll));
									HX_STACK_LINE(670)
									_g19 = tempQuaternion;
								}
								HX_STACK_LINE(670)
								tempQuaternion = _g19;
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									Float xx = (tempQuaternion->x * tempQuaternion->x);		HX_STACK_VAR(xx,"xx");
									HX_STACK_LINE(670)
									Float yy = (tempQuaternion->y * tempQuaternion->y);		HX_STACK_VAR(yy,"yy");
									HX_STACK_LINE(670)
									Float zz = (tempQuaternion->z * tempQuaternion->z);		HX_STACK_VAR(zz,"zz");
									HX_STACK_LINE(670)
									Float xy = (tempQuaternion->x * tempQuaternion->y);		HX_STACK_VAR(xy,"xy");
									HX_STACK_LINE(670)
									Float zw = (tempQuaternion->z * tempQuaternion->w);		HX_STACK_VAR(zw,"zw");
									HX_STACK_LINE(670)
									Float zx = (tempQuaternion->z * tempQuaternion->x);		HX_STACK_VAR(zx,"zx");
									HX_STACK_LINE(670)
									Float yw = (tempQuaternion->y * tempQuaternion->w);		HX_STACK_VAR(yw,"yw");
									HX_STACK_LINE(670)
									Float yz = (tempQuaternion->y * tempQuaternion->z);		HX_STACK_VAR(yz,"yz");
									HX_STACK_LINE(670)
									Float xw = (tempQuaternion->x * tempQuaternion->w);		HX_STACK_VAR(xw,"xw");
									HX_STACK_LINE(670)
									result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
									HX_STACK_LINE(670)
									result->m[(int)1] = (2.0 * ((xy + zw)));
									HX_STACK_LINE(670)
									result->m[(int)2] = (2.0 * ((zx - yw)));
									HX_STACK_LINE(670)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)4] = (2.0 * ((xy - zw)));
									HX_STACK_LINE(670)
									result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
									HX_STACK_LINE(670)
									result->m[(int)6] = (2.0 * ((yz + xw)));
									HX_STACK_LINE(670)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)8] = (2.0 * ((zx + yw)));
									HX_STACK_LINE(670)
									result->m[(int)9] = (2.0 * ((yz - xw)));
									HX_STACK_LINE(670)
									result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
									HX_STACK_LINE(670)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)12] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)13] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)14] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(670)
									result;
								}
							}
							HX_STACK_LINE(670)
							mesh->_cache->__Field(HX_CSTRING("rotation"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotation);
						}
						HX_STACK_LINE(670)
						if ((mesh->infiniteDistance)){
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::cameras::Camera camera = mesh->_scene->activeCamera;		HX_STACK_VAR(camera,"camera");
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									result->m[(int)0] = 1.0;
									HX_STACK_LINE(670)
									result->m[(int)1] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)2] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)4] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)5] = 1.0;
									HX_STACK_LINE(670)
									result->m[(int)6] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)8] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)9] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)10] = 1.0;
									HX_STACK_LINE(670)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)12] = (mesh->position->x + camera->position->x);
									HX_STACK_LINE(670)
									result->m[(int)13] = (mesh->position->y + camera->position->y);
									HX_STACK_LINE(670)
									result->m[(int)14] = (mesh->position->z + camera->position->z);
									HX_STACK_LINE(670)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(670)
									result;
								}
							}
						}
						else{
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								result->m[(int)0] = 1.0;
								HX_STACK_LINE(670)
								result->m[(int)1] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)2] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)4] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)5] = 1.0;
								HX_STACK_LINE(670)
								result->m[(int)6] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)8] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)9] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)10] = 1.0;
								HX_STACK_LINE(670)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(670)
								result->m[(int)12] = mesh->position->x;
								HX_STACK_LINE(670)
								result->m[(int)13] = mesh->position->y;
								HX_STACK_LINE(670)
								result->m[(int)14] = mesh->position->z;
								HX_STACK_LINE(670)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(670)
								result;
							}
						}
						HX_STACK_LINE(670)
						{
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_pivotMatrix;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localScaling;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								Array< Float > result = mesh->_localPivotScaling->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(670)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(670)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(670)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(670)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(670)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(670)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(670)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(670)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(670)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(670)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(670)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(670)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(670)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(670)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(670)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(670)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(670)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(670)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(670)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(670)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(670)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(670)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(670)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(670)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(670)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(670)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(670)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(670)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(670)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(670)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(670)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(670)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(670)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(670)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(670)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(670)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(670)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(670)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(670)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(670)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(670)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(670)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(670)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(670)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(670)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(670)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(670)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(670)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(670)
								result;
							}
						}
						HX_STACK_LINE(670)
						{
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScaling;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localRotation;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(670)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(670)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(670)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(670)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(670)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(670)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(670)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(670)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(670)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(670)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(670)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(670)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(670)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(670)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(670)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(670)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(670)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(670)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(670)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(670)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(670)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(670)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(670)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(670)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(670)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(670)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(670)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(670)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(670)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(670)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(670)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(670)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(670)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(670)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(670)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(670)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(670)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(670)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(670)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(670)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(670)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(670)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(670)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(670)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(670)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(670)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(670)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(670)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(670)
								result;
							}
						}
						HX_STACK_LINE(670)
						if (((mesh->billboardMode != ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE))){
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 localPosition;		HX_STACK_VAR(localPosition,"localPosition");
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->position;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(670)
								localPosition = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
							}
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 zero;		HX_STACK_VAR(zero,"zero");
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_scene->activeCamera->position;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(670)
								zero = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
							}
							HX_STACK_LINE(670)
							if (((bool((mesh->parent != null())) && bool((mesh->parent->position != null()))))){
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = mesh->parent->position;		HX_STACK_VAR(otherVector,"otherVector");
									HX_STACK_LINE(670)
									hx::AddEq(localPosition->x,otherVector->x);
									HX_STACK_LINE(670)
									hx::AddEq(localPosition->y,otherVector->y);
									HX_STACK_LINE(670)
									hx::AddEq(localPosition->z,otherVector->z);
								}
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(670)
									{
										HX_STACK_LINE(670)
										result->m[(int)0] = 1.0;
										HX_STACK_LINE(670)
										result->m[(int)1] = (int)0;
										HX_STACK_LINE(670)
										result->m[(int)2] = (int)0;
										HX_STACK_LINE(670)
										result->m[(int)3] = (int)0;
										HX_STACK_LINE(670)
										result->m[(int)4] = (int)0;
										HX_STACK_LINE(670)
										result->m[(int)5] = 1.0;
										HX_STACK_LINE(670)
										result->m[(int)6] = (int)0;
										HX_STACK_LINE(670)
										result->m[(int)7] = (int)0;
										HX_STACK_LINE(670)
										result->m[(int)8] = (int)0;
										HX_STACK_LINE(670)
										result->m[(int)9] = (int)0;
										HX_STACK_LINE(670)
										result->m[(int)10] = 1.0;
										HX_STACK_LINE(670)
										result->m[(int)11] = (int)0;
										HX_STACK_LINE(670)
										result->m[(int)12] = localPosition->x;
										HX_STACK_LINE(670)
										result->m[(int)13] = localPosition->y;
										HX_STACK_LINE(670)
										result->m[(int)14] = localPosition->z;
										HX_STACK_LINE(670)
										result->m[(int)15] = 1.0;
										HX_STACK_LINE(670)
										result;
									}
								}
							}
							HX_STACK_LINE(670)
							if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))) == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))){
								HX_STACK_LINE(670)
								zero = mesh->_scene->activeCamera->position;
							}
							else{
								HX_STACK_LINE(670)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_X))) != (int)0))){
									HX_STACK_LINE(670)
									zero->x = (localPosition->x + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
								HX_STACK_LINE(670)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Y))) != (int)0))){
									HX_STACK_LINE(670)
									zero->y = (localPosition->y + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
								HX_STACK_LINE(670)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Z))) != (int)0))){
									HX_STACK_LINE(670)
									zero->z = (localPosition->z + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
							}
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 up = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Up();		HX_STACK_VAR(up,"up");
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localBillboard;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 xAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(xAxis,"xAxis");
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 yAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(yAxis,"yAxis");
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 zAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(zAxis,"zAxis");
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									zAxis->x = (zero->x - localPosition->x);
									HX_STACK_LINE(670)
									zAxis->y = (zero->y - localPosition->y);
									HX_STACK_LINE(670)
									zAxis->z = (zero->z - localPosition->z);
								}
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									Float len = ::Math_obj::sqrt((((zAxis->x * zAxis->x) + (zAxis->y * zAxis->y)) + (zAxis->z * zAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(670)
									if (((len != (int)0))){
										HX_STACK_LINE(670)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(670)
										hx::MultEq(zAxis->x,num);
										HX_STACK_LINE(670)
										hx::MultEq(zAxis->y,num);
										HX_STACK_LINE(670)
										hx::MultEq(zAxis->z,num);
									}
								}
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									xAxis->x = ((up->y * zAxis->z) - (up->z * zAxis->y));
									HX_STACK_LINE(670)
									xAxis->y = ((up->z * zAxis->x) - (up->x * zAxis->z));
									HX_STACK_LINE(670)
									xAxis->z = ((up->x * zAxis->y) - (up->y * zAxis->x));
								}
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									Float len = ::Math_obj::sqrt((((xAxis->x * xAxis->x) + (xAxis->y * xAxis->y)) + (xAxis->z * xAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(670)
									if (((len != (int)0))){
										HX_STACK_LINE(670)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(670)
										hx::MultEq(xAxis->x,num);
										HX_STACK_LINE(670)
										hx::MultEq(xAxis->y,num);
										HX_STACK_LINE(670)
										hx::MultEq(xAxis->z,num);
									}
								}
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									yAxis->x = ((zAxis->y * xAxis->z) - (zAxis->z * xAxis->y));
									HX_STACK_LINE(670)
									yAxis->y = ((zAxis->z * xAxis->x) - (zAxis->x * xAxis->z));
									HX_STACK_LINE(670)
									yAxis->z = ((zAxis->x * xAxis->y) - (zAxis->y * xAxis->x));
								}
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									Float len = ::Math_obj::sqrt((((yAxis->x * yAxis->x) + (yAxis->y * yAxis->y)) + (yAxis->z * yAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(670)
									if (((len != (int)0))){
										HX_STACK_LINE(670)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(670)
										hx::MultEq(yAxis->x,num);
										HX_STACK_LINE(670)
										hx::MultEq(yAxis->y,num);
										HX_STACK_LINE(670)
										hx::MultEq(yAxis->z,num);
									}
								}
								HX_STACK_LINE(670)
								Float ex = -(((((xAxis->x * localPosition->x) + (xAxis->y * localPosition->y)) + (xAxis->z * localPosition->z))));		HX_STACK_VAR(ex,"ex");
								HX_STACK_LINE(670)
								Float ey = -(((((yAxis->x * localPosition->x) + (yAxis->y * localPosition->y)) + (yAxis->z * localPosition->z))));		HX_STACK_VAR(ey,"ey");
								HX_STACK_LINE(670)
								Float ez = -(((((zAxis->x * localPosition->x) + (zAxis->y * localPosition->y)) + (zAxis->z * localPosition->z))));		HX_STACK_VAR(ez,"ez");
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									result->m[(int)0] = xAxis->x;
									HX_STACK_LINE(670)
									result->m[(int)1] = yAxis->x;
									HX_STACK_LINE(670)
									result->m[(int)2] = zAxis->x;
									HX_STACK_LINE(670)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)4] = xAxis->y;
									HX_STACK_LINE(670)
									result->m[(int)5] = yAxis->y;
									HX_STACK_LINE(670)
									result->m[(int)6] = zAxis->y;
									HX_STACK_LINE(670)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)8] = xAxis->z;
									HX_STACK_LINE(670)
									result->m[(int)9] = yAxis->z;
									HX_STACK_LINE(670)
									result->m[(int)10] = zAxis->z;
									HX_STACK_LINE(670)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(670)
									result->m[(int)12] = ex;
									HX_STACK_LINE(670)
									result->m[(int)13] = ey;
									HX_STACK_LINE(670)
									result->m[(int)14] = ez;
									HX_STACK_LINE(670)
									result->m[(int)15] = (int)1;
									HX_STACK_LINE(670)
									result;
								}
							}
							HX_STACK_LINE(670)
							mesh->_localBillboard->m[(int)12] = mesh->_localBillboard->m[(int)13] = mesh->_localBillboard->m[(int)14] = (int)0;
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localBillboard;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
									HX_STACK_LINE(670)
									Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
									HX_STACK_LINE(670)
									Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
									HX_STACK_LINE(670)
									Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
									HX_STACK_LINE(670)
									Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
									HX_STACK_LINE(670)
									Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
									HX_STACK_LINE(670)
									Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
									HX_STACK_LINE(670)
									Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
									HX_STACK_LINE(670)
									Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
									HX_STACK_LINE(670)
									Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
									HX_STACK_LINE(670)
									Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
									HX_STACK_LINE(670)
									Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
									HX_STACK_LINE(670)
									Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
									HX_STACK_LINE(670)
									Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
									HX_STACK_LINE(670)
									Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
									HX_STACK_LINE(670)
									Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
									HX_STACK_LINE(670)
									Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
									HX_STACK_LINE(670)
									Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
									HX_STACK_LINE(670)
									Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
									HX_STACK_LINE(670)
									Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
									HX_STACK_LINE(670)
									Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
									HX_STACK_LINE(670)
									Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
									HX_STACK_LINE(670)
									Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
									HX_STACK_LINE(670)
									Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
									HX_STACK_LINE(670)
									Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
									HX_STACK_LINE(670)
									Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
									HX_STACK_LINE(670)
									Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
									HX_STACK_LINE(670)
									Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
									HX_STACK_LINE(670)
									Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
									HX_STACK_LINE(670)
									Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
									HX_STACK_LINE(670)
									Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
									HX_STACK_LINE(670)
									Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
									HX_STACK_LINE(670)
									Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
									HX_STACK_LINE(670)
									Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
									HX_STACK_LINE(670)
									Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
									HX_STACK_LINE(670)
									Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
									HX_STACK_LINE(670)
									Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
									HX_STACK_LINE(670)
									Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
									HX_STACK_LINE(670)
									Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
									HX_STACK_LINE(670)
									_this->m[(int)0] = (l23 * l27);
									HX_STACK_LINE(670)
									_this->m[(int)4] = (l24 * l27);
									HX_STACK_LINE(670)
									_this->m[(int)8] = (l25 * l27);
									HX_STACK_LINE(670)
									_this->m[(int)12] = (l26 * l27);
									HX_STACK_LINE(670)
									_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
									HX_STACK_LINE(670)
									_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
									HX_STACK_LINE(670)
									_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
									HX_STACK_LINE(670)
									_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
									HX_STACK_LINE(670)
									_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
									HX_STACK_LINE(670)
									_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
									HX_STACK_LINE(670)
									_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
									HX_STACK_LINE(670)
									_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
									HX_STACK_LINE(670)
									_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
									HX_STACK_LINE(670)
									_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
									HX_STACK_LINE(670)
									_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
									HX_STACK_LINE(670)
									_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
								}
							}
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localBillboard;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(670)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(670)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(670)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(670)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(670)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(670)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(670)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(670)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(670)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(670)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(670)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(670)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(670)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(670)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(670)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(670)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(670)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(670)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(670)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(670)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(670)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(670)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(670)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(670)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(670)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(670)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(670)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(670)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(670)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(670)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(670)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(670)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(670)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(670)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(670)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(670)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(670)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(670)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(670)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(670)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(670)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(670)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(670)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(670)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(670)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(670)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(670)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(670)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(670)
									result;
								}
							}
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_rotateYByPI;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localWorld;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(670)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(670)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(670)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(670)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(670)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(670)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(670)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(670)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(670)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(670)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(670)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(670)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(670)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(670)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(670)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(670)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(670)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(670)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(670)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(670)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(670)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(670)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(670)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(670)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(670)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(670)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(670)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(670)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(670)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(670)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(670)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(670)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(670)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(670)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(670)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(670)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(670)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(670)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(670)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(670)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(670)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(670)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(670)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(670)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(670)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(670)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(670)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(670)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(670)
									result;
								}
							}
						}
						struct _Function_5_1{
							inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
								HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",670,0x7c8236a5)
								{
									HX_STACK_LINE(670)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _g20 = mesh->parent->getWorldMatrix();		HX_STACK_VAR(_g20,"_g20");
									HX_STACK_LINE(670)
									return (_g20 != null());
								}
								return null();
							}
						};
						HX_STACK_LINE(670)
						if (((  (((  (((mesh->parent != null()))) ? bool(_Function_5_1::Block(mesh)) : bool(false) ))) ? bool((mesh->billboardMode == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE)) : bool(false) ))){
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(670)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(670)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(670)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(670)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(670)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(670)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(670)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(670)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(670)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(670)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(670)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(670)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(670)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(670)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(670)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(670)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(670)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(670)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(670)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(670)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(670)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(670)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(670)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(670)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(670)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(670)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(670)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(670)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(670)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(670)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(670)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(670)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(670)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(670)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(670)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(670)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(670)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(670)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(670)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(670)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(670)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(670)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(670)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(670)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(670)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(670)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(670)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(670)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(670)
									result;
								}
							}
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::tools::math::Matrix parentWorld = mesh->parent->getWorldMatrix();		HX_STACK_VAR(parentWorld,"parentWorld");
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localWorld;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(670)
								{
									HX_STACK_LINE(670)
									Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(670)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(670)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(670)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(670)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(670)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(670)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(670)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(670)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(670)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(670)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(670)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(670)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(670)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(670)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(670)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(670)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(670)
									Float om0 = parentWorld->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(670)
									Float om1 = parentWorld->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(670)
									Float om2 = parentWorld->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(670)
									Float om3 = parentWorld->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(670)
									Float om4 = parentWorld->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(670)
									Float om5 = parentWorld->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(670)
									Float om6 = parentWorld->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(670)
									Float om7 = parentWorld->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(670)
									Float om8 = parentWorld->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(670)
									Float om9 = parentWorld->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(670)
									Float om10 = parentWorld->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(670)
									Float om11 = parentWorld->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(670)
									Float om12 = parentWorld->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(670)
									Float om13 = parentWorld->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(670)
									Float om14 = parentWorld->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(670)
									Float om15 = parentWorld->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(670)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(670)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(670)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(670)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(670)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(670)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(670)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(670)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(670)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(670)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(670)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(670)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(670)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(670)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(670)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(670)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(670)
									result;
								}
							}
						}
						else{
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(670)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(670)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(670)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(670)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(670)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(670)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(670)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(670)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(670)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(670)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(670)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(670)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(670)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(670)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(670)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(670)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(670)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(670)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(670)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(670)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(670)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(670)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(670)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(670)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(670)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(670)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(670)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(670)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(670)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(670)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(670)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(670)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(670)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(670)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(670)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(670)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(670)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(670)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(670)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(670)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(670)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(670)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(670)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(670)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(670)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(670)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(670)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(670)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(670)
								result;
							}
						}
						HX_STACK_LINE(670)
						if (((mesh->_boundingInfo != null()))){
							HX_STACK_LINE(670)
							Float _g21 = ::Math_obj::max(mesh->scaling->x,mesh->scaling->y);		HX_STACK_VAR(_g21,"_g21");
							HX_STACK_LINE(670)
							mesh->_scaleFactor = _g21;
							HX_STACK_LINE(670)
							Float _g22 = ::Math_obj::max(mesh->_scaleFactor,mesh->scaling->z);		HX_STACK_VAR(_g22,"_g22");
							HX_STACK_LINE(670)
							mesh->_scaleFactor = _g22;
							struct _Function_6_1{
								inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
									HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",670,0x7c8236a5)
									{
										HX_STACK_LINE(670)
										Dynamic _g23 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g23,"_g23");
										HX_STACK_LINE(670)
										return (_g23 != null());
									}
									return null();
								}
							};
							HX_STACK_LINE(670)
							if (((  (((mesh->parent != null()))) ? bool(_Function_6_1::Block(mesh)) : bool(false) ))){
								HX_STACK_LINE(670)
								Dynamic _g24 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g24,"_g24");
								HX_STACK_LINE(670)
								Float _g25 = (mesh->_scaleFactor * _g24);		HX_STACK_VAR(_g25,"_g25");
								HX_STACK_LINE(670)
								mesh->_scaleFactor = _g25;
							}
							HX_STACK_LINE(670)
							mesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
							HX_STACK_LINE(670)
							{
								HX_STACK_LINE(670)
								int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(670)
								int _g2 = mesh->subMeshes->length;		HX_STACK_VAR(_g2,"_g2");
								HX_STACK_LINE(670)
								while((true)){
									HX_STACK_LINE(670)
									if ((!(((_g11 < _g2))))){
										HX_STACK_LINE(670)
										break;
									}
									HX_STACK_LINE(670)
									int subIndex = (_g11)++;		HX_STACK_VAR(subIndex,"subIndex");
									HX_STACK_LINE(670)
									::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
									HX_STACK_LINE(670)
									subMesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
								}
							}
						}
						HX_STACK_LINE(670)
						{
							HX_STACK_LINE(670)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_absolutePosition;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(670)
							_this->x = mesh->_worldMatrix->m->__get((int)12);
							HX_STACK_LINE(670)
							_this->y = mesh->_worldMatrix->m->__get((int)13);
							HX_STACK_LINE(670)
							_this->z = mesh->_worldMatrix->m->__get((int)14);
						}
						HX_STACK_LINE(670)
						ret = mesh->_worldMatrix;
					}
					HX_STACK_LINE(670)
					ret;
				}
				HX_STACK_LINE(672)
				if (((  (((  (((  ((mesh->isEnabled())) ? bool(mesh->isVisible) : bool(false) ))) ? bool((mesh->visibility > (int)0)) : bool(false) ))) ? bool(mesh->isInFrustum(this->_frustumPlanes)) : bool(false) ))){
					HX_STACK_LINE(673)
					this->_activeMeshes->push(mesh);
					HX_STACK_LINE(675)
					if (((mesh->skeleton != null()))){
						HX_STACK_LINE(676)
						this->_activeSkeletons->pushNoDuplicate(mesh->skeleton);
					}
					HX_STACK_LINE(679)
					{
						HX_STACK_LINE(679)
						int _g3 = (int)0;		HX_STACK_VAR(_g3,"_g3");
						HX_STACK_LINE(679)
						int _g2 = mesh->subMeshes->length;		HX_STACK_VAR(_g2,"_g2");
						HX_STACK_LINE(679)
						while((true)){
							HX_STACK_LINE(679)
							if ((!(((_g3 < _g2))))){
								HX_STACK_LINE(679)
								break;
							}
							HX_STACK_LINE(679)
							int subIndex = (_g3)++;		HX_STACK_VAR(subIndex,"subIndex");
							HX_STACK_LINE(680)
							::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
							HX_STACK_LINE(682)
							if (((  ((!(((mesh->subMeshes->length == (int)1))))) ? bool(subMesh->_boundingInfo->isInFrustrum(this->_frustumPlanes)) : bool(true) ))){
								HX_STACK_LINE(682)
								Dynamic material = subMesh->getMaterial();		HX_STACK_VAR(material,"material");
								HX_STACK_LINE(682)
								if (((material != null()))){
									HX_STACK_LINE(682)
									Dynamic _g26 = ::Reflect_obj::field(material,HX_CSTRING("getRenderTargetTextures"));		HX_STACK_VAR(_g26,"_g26");
									HX_STACK_LINE(682)
									if (((_g26 != null()))){
										HX_STACK_LINE(682)
										int _g27 = this->_processedMaterials->indexOf(material);		HX_STACK_VAR(_g27,"_g27");
										HX_STACK_LINE(682)
										if (((_g27 == (int)-1))){
											HX_STACK_LINE(682)
											this->_processedMaterials->push(material);
											HX_STACK_LINE(682)
											Dynamic _g28 = material->__Field(HX_CSTRING("getRenderTargetTextures"),true)();		HX_STACK_VAR(_g28,"_g28");
											HX_STACK_LINE(682)
											this->_renderTargets->concat(_g28);
										}
									}
									HX_STACK_LINE(682)
									hx::AddEq(this->_activeVertices,subMesh->verticesCount);
									HX_STACK_LINE(682)
									{
										HX_STACK_LINE(682)
										::com::gamestudiohx::babylonhx::rendering::RenderingManager _this = this->_renderingManager;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(682)
										::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh1 = subMesh->getMesh();		HX_STACK_VAR(mesh1,"mesh1");
										HX_STACK_LINE(682)
										int renderingGroupId = mesh1->renderingGroupId;		HX_STACK_VAR(renderingGroupId,"renderingGroupId");
										HX_STACK_LINE(682)
										if (((_this->_renderingGroups->length <= renderingGroupId))){
											HX_STACK_LINE(682)
											_this->_renderingGroups[renderingGroupId] = ::com::gamestudiohx::babylonhx::rendering::RenderingGroup_obj::__new(renderingGroupId,_this->_scene);
										}
										HX_STACK_LINE(682)
										_this->_renderingGroups->__get(renderingGroupId).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingGroup >()->dispatch(subMesh);
									}
								}
							}
						}
					}
				}
			}
		}
		HX_STACK_LINE(689)
		int beforeParticlesDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeParticlesDate,"beforeParticlesDate");
		HX_STACK_LINE(690)
		if ((this->particlesEnabled)){
			HX_STACK_LINE(691)
			int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(691)
			int _g = this->particleSystems->length;		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(691)
			while((true)){
				HX_STACK_LINE(691)
				if ((!(((_g1 < _g))))){
					HX_STACK_LINE(691)
					break;
				}
				HX_STACK_LINE(691)
				int particleIndex = (_g1)++;		HX_STACK_VAR(particleIndex,"particleIndex");
				HX_STACK_LINE(692)
				::com::gamestudiohx::babylonhx::particles::ParticleSystem particleSystem = this->particleSystems->__get(particleIndex).StaticCast< ::com::gamestudiohx::babylonhx::particles::ParticleSystem >();		HX_STACK_VAR(particleSystem,"particleSystem");
				struct _Function_3_1{
					inline static bool Block( ::com::gamestudiohx::babylonhx::particles::ParticleSystem &particleSystem){
						HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",694,0x7c8236a5)
						{
							HX_STACK_LINE(694)
							return (  ((particleSystem->emitter)) ? bool(particleSystem->emitter->__Field(HX_CSTRING("isEnabled"),true)()) : bool(false) );
						}
						return null();
					}
				};
				HX_STACK_LINE(694)
				if (((  ((!((!(particleSystem->emitter->__Field(HX_CSTRING("position"),true)))))) ? bool(_Function_3_1::Block(particleSystem)) : bool(true) ))){
					HX_STACK_LINE(695)
					this->_activeParticleSystems->push(particleSystem);
					HX_STACK_LINE(696)
					particleSystem->animate();
				}
			}
		}
		HX_STACK_LINE(700)
		int _g29 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g29,"_g29");
		HX_STACK_LINE(700)
		int _g30 = (_g29 - beforeParticlesDate);		HX_STACK_VAR(_g30,"_g30");
		HX_STACK_LINE(700)
		hx::AddEq(this->_particlesDuration,_g30);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,_evaluateActiveMeshes,(void))

Void Scene_obj::_renderForCamera( ::com::gamestudiohx::babylonhx::cameras::Camera camera,hx::Null< bool >  __o_mustClearDepth){
bool mustClearDepth = __o_mustClearDepth.Default(false);
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","_renderForCamera",0x843c050d,"com.gamestudiohx.babylonhx.Scene._renderForCamera","com/gamestudiohx/babylonhx/Scene.hx",703,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(camera,"camera")
	HX_STACK_ARG(mustClearDepth,"mustClearDepth")
{
		HX_STACK_LINE(704)
		::com::gamestudiohx::babylonhx::Engine engine = this->_engine;		HX_STACK_VAR(engine,"engine");
		HX_STACK_LINE(706)
		this->activeCamera = camera;
		HX_STACK_LINE(708)
		if (((this->activeCamera == null()))){
			HX_STACK_LINE(709)
			HX_STACK_DO_THROW(HX_CSTRING("Active camera not set"));
		}
		HX_STACK_LINE(712)
		engine->setViewport(this->activeCamera->viewport,null(),null());
		HX_STACK_LINE(715)
		if ((mustClearDepth)){
			HX_STACK_LINE(716)
			this->_engine->clear(this->clearColor,false,true);
		}
		HX_STACK_LINE(720)
		(this->_renderId)++;
		HX_STACK_LINE(721)
		{
			HX_STACK_LINE(721)
			::com::gamestudiohx::babylonhx::tools::math::Matrix view;		HX_STACK_VAR(view,"view");
			HX_STACK_LINE(721)
			{
				HX_STACK_LINE(721)
				::com::gamestudiohx::babylonhx::cameras::Camera _this = this->activeCamera;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(721)
				::com::gamestudiohx::babylonhx::tools::math::Matrix _g1;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(721)
				{
					HX_STACK_LINE(721)
					bool force = false;		HX_STACK_VAR(force,"force");
					HX_STACK_LINE(721)
					if ((!(((  ((!(force))) ? bool(_this->_isSynchronizedViewMatrix()) : bool(false) ))))){
						HX_STACK_LINE(721)
						_this->_syncChildFlag();
						HX_STACK_LINE(721)
						::com::gamestudiohx::babylonhx::tools::math::Matrix _g = _this->_getViewMatrix();		HX_STACK_VAR(_g,"_g");
						HX_STACK_LINE(721)
						_this->_computedViewMatrix = _g;
					}
					HX_STACK_LINE(721)
					_g1 = _this->_computedViewMatrix;
				}
				HX_STACK_LINE(721)
				_this->_computedViewMatrix = _g1;
				struct _Function_3_1{
					inline static bool Block( ::com::gamestudiohx::babylonhx::cameras::Camera _this){
						HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",721,0x7c8236a5)
						{
							HX_STACK_LINE(721)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _g2 = _this->parent->getWorldMatrix();		HX_STACK_VAR(_g2,"_g2");
							HX_STACK_LINE(721)
							return (_g2 == null());
						}
						return null();
					}
				};
				struct _Function_3_2{
					inline static bool Block( ::com::gamestudiohx::babylonhx::cameras::Camera _this){
						HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",721,0x7c8236a5)
						{
							HX_STACK_LINE(721)
							return (  ((!(_this->hasNewParent(null())))) ? bool(_this->parent->isSynchronized(null())) : bool(false) );
						}
						return null();
					}
				};
				HX_STACK_LINE(721)
				if ((!(((  ((!(((  ((!(((_this->parent == null()))))) ? bool(_Function_3_1::Block(_this)) : bool(true) ))))) ? bool(_Function_3_2::Block(_this)) : bool(true) ))))){
					HX_STACK_LINE(721)
					if (((_this->_worldMatrix == null()))){
						HX_STACK_LINE(721)
						::com::gamestudiohx::babylonhx::tools::math::Matrix _g3;		HX_STACK_VAR(_g3,"_g3");
						HX_STACK_LINE(721)
						{
							HX_STACK_LINE(721)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = ::com::gamestudiohx::babylonhx::tools::math::Matrix_obj::__new();		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(721)
							result->m[(int)0] = 1.0;
							HX_STACK_LINE(721)
							result->m[(int)1] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)2] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)3] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)4] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)5] = 1.0;
							HX_STACK_LINE(721)
							result->m[(int)6] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)7] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)8] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)9] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)10] = 1.0;
							HX_STACK_LINE(721)
							result->m[(int)11] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)12] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)13] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)14] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)15] = 1.0;
							HX_STACK_LINE(721)
							_g3 = result;
						}
						HX_STACK_LINE(721)
						_this->_worldMatrix = _g3;
					}
					HX_STACK_LINE(721)
					{
						HX_STACK_LINE(721)
						::com::gamestudiohx::babylonhx::tools::math::Matrix _this1 = _this->_computedViewMatrix;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(721)
						::com::gamestudiohx::babylonhx::tools::math::Matrix other = _this->_worldMatrix;		HX_STACK_VAR(other,"other");
						HX_STACK_LINE(721)
						Float l1 = _this1->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
						HX_STACK_LINE(721)
						Float l2 = _this1->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
						HX_STACK_LINE(721)
						Float l3 = _this1->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
						HX_STACK_LINE(721)
						Float l4 = _this1->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
						HX_STACK_LINE(721)
						Float l5 = _this1->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
						HX_STACK_LINE(721)
						Float l6 = _this1->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
						HX_STACK_LINE(721)
						Float l7 = _this1->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
						HX_STACK_LINE(721)
						Float l8 = _this1->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
						HX_STACK_LINE(721)
						Float l9 = _this1->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
						HX_STACK_LINE(721)
						Float l10 = _this1->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
						HX_STACK_LINE(721)
						Float l11 = _this1->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
						HX_STACK_LINE(721)
						Float l12 = _this1->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
						HX_STACK_LINE(721)
						Float l13 = _this1->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
						HX_STACK_LINE(721)
						Float l14 = _this1->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
						HX_STACK_LINE(721)
						Float l15 = _this1->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
						HX_STACK_LINE(721)
						Float l16 = _this1->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
						HX_STACK_LINE(721)
						Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
						HX_STACK_LINE(721)
						Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
						HX_STACK_LINE(721)
						Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
						HX_STACK_LINE(721)
						Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
						HX_STACK_LINE(721)
						Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
						HX_STACK_LINE(721)
						Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
						HX_STACK_LINE(721)
						Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
						HX_STACK_LINE(721)
						Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
						HX_STACK_LINE(721)
						Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
						HX_STACK_LINE(721)
						Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
						HX_STACK_LINE(721)
						Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
						HX_STACK_LINE(721)
						Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
						HX_STACK_LINE(721)
						Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
						HX_STACK_LINE(721)
						Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
						HX_STACK_LINE(721)
						Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
						HX_STACK_LINE(721)
						Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
						HX_STACK_LINE(721)
						Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
						HX_STACK_LINE(721)
						Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
						HX_STACK_LINE(721)
						Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
						HX_STACK_LINE(721)
						Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
						HX_STACK_LINE(721)
						Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
						HX_STACK_LINE(721)
						Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
						HX_STACK_LINE(721)
						Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
						HX_STACK_LINE(721)
						other->m[(int)0] = (l23 * l27);
						HX_STACK_LINE(721)
						other->m[(int)4] = (l24 * l27);
						HX_STACK_LINE(721)
						other->m[(int)8] = (l25 * l27);
						HX_STACK_LINE(721)
						other->m[(int)12] = (l26 * l27);
						HX_STACK_LINE(721)
						other->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
						HX_STACK_LINE(721)
						other->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
						HX_STACK_LINE(721)
						other->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
						HX_STACK_LINE(721)
						other->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
						HX_STACK_LINE(721)
						other->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
						HX_STACK_LINE(721)
						other->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
						HX_STACK_LINE(721)
						other->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
						HX_STACK_LINE(721)
						other->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
						HX_STACK_LINE(721)
						other->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
						HX_STACK_LINE(721)
						other->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
						HX_STACK_LINE(721)
						other->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
						HX_STACK_LINE(721)
						other->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
					}
					HX_STACK_LINE(721)
					{
						HX_STACK_LINE(721)
						::com::gamestudiohx::babylonhx::tools::math::Matrix _this1 = _this->_worldMatrix;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(721)
						::com::gamestudiohx::babylonhx::tools::math::Matrix other = _this->parent->getWorldMatrix();		HX_STACK_VAR(other,"other");
						HX_STACK_LINE(721)
						{
							HX_STACK_LINE(721)
							Array< Float > result = _this->_computedViewMatrix->m;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(721)
							Float tm0 = _this1->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
							HX_STACK_LINE(721)
							Float tm1 = _this1->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
							HX_STACK_LINE(721)
							Float tm2 = _this1->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
							HX_STACK_LINE(721)
							Float tm3 = _this1->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
							HX_STACK_LINE(721)
							Float tm4 = _this1->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
							HX_STACK_LINE(721)
							Float tm5 = _this1->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
							HX_STACK_LINE(721)
							Float tm6 = _this1->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
							HX_STACK_LINE(721)
							Float tm7 = _this1->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
							HX_STACK_LINE(721)
							Float tm8 = _this1->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
							HX_STACK_LINE(721)
							Float tm9 = _this1->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
							HX_STACK_LINE(721)
							Float tm10 = _this1->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
							HX_STACK_LINE(721)
							Float tm11 = _this1->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
							HX_STACK_LINE(721)
							Float tm12 = _this1->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
							HX_STACK_LINE(721)
							Float tm13 = _this1->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
							HX_STACK_LINE(721)
							Float tm14 = _this1->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
							HX_STACK_LINE(721)
							Float tm15 = _this1->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
							HX_STACK_LINE(721)
							Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
							HX_STACK_LINE(721)
							Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
							HX_STACK_LINE(721)
							Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
							HX_STACK_LINE(721)
							Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
							HX_STACK_LINE(721)
							Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
							HX_STACK_LINE(721)
							Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
							HX_STACK_LINE(721)
							Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
							HX_STACK_LINE(721)
							Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
							HX_STACK_LINE(721)
							Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
							HX_STACK_LINE(721)
							Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
							HX_STACK_LINE(721)
							Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
							HX_STACK_LINE(721)
							Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
							HX_STACK_LINE(721)
							Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
							HX_STACK_LINE(721)
							Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
							HX_STACK_LINE(721)
							Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
							HX_STACK_LINE(721)
							Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
							HX_STACK_LINE(721)
							result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
							HX_STACK_LINE(721)
							result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
							HX_STACK_LINE(721)
							result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
							HX_STACK_LINE(721)
							result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
							HX_STACK_LINE(721)
							result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
							HX_STACK_LINE(721)
							result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
							HX_STACK_LINE(721)
							result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
							HX_STACK_LINE(721)
							result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
							HX_STACK_LINE(721)
							result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
							HX_STACK_LINE(721)
							result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
							HX_STACK_LINE(721)
							result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
							HX_STACK_LINE(721)
							result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
							HX_STACK_LINE(721)
							result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
							HX_STACK_LINE(721)
							result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
							HX_STACK_LINE(721)
							result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
							HX_STACK_LINE(721)
							result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
							HX_STACK_LINE(721)
							result;
						}
					}
					HX_STACK_LINE(721)
					{
						HX_STACK_LINE(721)
						::com::gamestudiohx::babylonhx::tools::math::Matrix _this1 = _this->_computedViewMatrix;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(721)
						{
							HX_STACK_LINE(721)
							Float l1 = _this1->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
							HX_STACK_LINE(721)
							Float l2 = _this1->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
							HX_STACK_LINE(721)
							Float l3 = _this1->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
							HX_STACK_LINE(721)
							Float l4 = _this1->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
							HX_STACK_LINE(721)
							Float l5 = _this1->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
							HX_STACK_LINE(721)
							Float l6 = _this1->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
							HX_STACK_LINE(721)
							Float l7 = _this1->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
							HX_STACK_LINE(721)
							Float l8 = _this1->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
							HX_STACK_LINE(721)
							Float l9 = _this1->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
							HX_STACK_LINE(721)
							Float l10 = _this1->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
							HX_STACK_LINE(721)
							Float l11 = _this1->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
							HX_STACK_LINE(721)
							Float l12 = _this1->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
							HX_STACK_LINE(721)
							Float l13 = _this1->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
							HX_STACK_LINE(721)
							Float l14 = _this1->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
							HX_STACK_LINE(721)
							Float l15 = _this1->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
							HX_STACK_LINE(721)
							Float l16 = _this1->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
							HX_STACK_LINE(721)
							Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
							HX_STACK_LINE(721)
							Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
							HX_STACK_LINE(721)
							Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
							HX_STACK_LINE(721)
							Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
							HX_STACK_LINE(721)
							Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
							HX_STACK_LINE(721)
							Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
							HX_STACK_LINE(721)
							Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
							HX_STACK_LINE(721)
							Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
							HX_STACK_LINE(721)
							Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
							HX_STACK_LINE(721)
							Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
							HX_STACK_LINE(721)
							Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
							HX_STACK_LINE(721)
							Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
							HX_STACK_LINE(721)
							Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
							HX_STACK_LINE(721)
							Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
							HX_STACK_LINE(721)
							Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
							HX_STACK_LINE(721)
							Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
							HX_STACK_LINE(721)
							Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
							HX_STACK_LINE(721)
							Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
							HX_STACK_LINE(721)
							Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
							HX_STACK_LINE(721)
							Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
							HX_STACK_LINE(721)
							Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
							HX_STACK_LINE(721)
							Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
							HX_STACK_LINE(721)
							Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
							HX_STACK_LINE(721)
							_this1->m[(int)0] = (l23 * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)4] = (l24 * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)8] = (l25 * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)12] = (l26 * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
							HX_STACK_LINE(721)
							_this1->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
						}
					}
				}
				HX_STACK_LINE(721)
				view = _this->_computedViewMatrix;
			}
			HX_STACK_LINE(721)
			::com::gamestudiohx::babylonhx::tools::math::Matrix projection;		HX_STACK_VAR(projection,"projection");
			HX_STACK_LINE(721)
			{
				HX_STACK_LINE(721)
				::com::gamestudiohx::babylonhx::cameras::Camera _this = this->activeCamera;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(721)
				bool force = false;		HX_STACK_VAR(force,"force");
				HX_STACK_LINE(721)
				if ((!(((  ((!(force))) ? bool(_this->_isSynchronizedProjectionMatrix()) : bool(false) ))))){
					HX_STACK_LINE(721)
					::com::gamestudiohx::babylonhx::Engine engine1 = _this->_scene->getEngine();		HX_STACK_VAR(engine1,"engine1");
					HX_STACK_LINE(721)
					if (((_this->mode == ::com::gamestudiohx::babylonhx::cameras::Camera_obj::PERSPECTIVE_CAMERA))){
						HX_STACK_LINE(721)
						Float aspect = engine1->getAspectRatio(_this);		HX_STACK_VAR(aspect,"aspect");
						HX_STACK_LINE(721)
						Float znear = _this->minZ;		HX_STACK_VAR(znear,"znear");
						HX_STACK_LINE(721)
						Float zfar = _this->maxZ;		HX_STACK_VAR(zfar,"zfar");
						HX_STACK_LINE(721)
						::com::gamestudiohx::babylonhx::tools::math::Matrix result = _this->_projectionMatrix;		HX_STACK_VAR(result,"result");
						HX_STACK_LINE(721)
						Float _g4 = ::Math_obj::tan((_this->fov * 0.5));		HX_STACK_VAR(_g4,"_g4");
						HX_STACK_LINE(721)
						Float tan = (Float(1.0) / Float(_g4));		HX_STACK_VAR(tan,"tan");
						HX_STACK_LINE(721)
						result->m[(int)0] = (Float(tan) / Float(aspect));
						HX_STACK_LINE(721)
						result->m[(int)1] = result->m[(int)2] = result->m[(int)3] = 0.0;
						HX_STACK_LINE(721)
						result->m[(int)5] = tan;
						HX_STACK_LINE(721)
						result->m[(int)4] = result->m[(int)6] = result->m[(int)7] = 0.0;
						HX_STACK_LINE(721)
						result->m[(int)8] = result->m[(int)9] = 0.0;
						HX_STACK_LINE(721)
						result->m[(int)10] = (Float(-(zfar)) / Float(((znear - zfar))));
						HX_STACK_LINE(721)
						result->m[(int)11] = 1.0;
						HX_STACK_LINE(721)
						result->m[(int)12] = result->m[(int)13] = result->m[(int)15] = 0.0;
						HX_STACK_LINE(721)
						result->m[(int)14] = (Float((znear * zfar)) / Float(((znear - zfar))));
						HX_STACK_LINE(721)
						result;
					}
					else{
						HX_STACK_LINE(721)
						int _g5 = engine1->getRenderWidth();		HX_STACK_VAR(_g5,"_g5");
						HX_STACK_LINE(721)
						Float halfWidth = (Float(_g5) / Float(2.0));		HX_STACK_VAR(halfWidth,"halfWidth");
						HX_STACK_LINE(721)
						int _g6 = engine1->getRenderHeight();		HX_STACK_VAR(_g6,"_g6");
						HX_STACK_LINE(721)
						Float halfHeight = (Float(_g6) / Float(2.0));		HX_STACK_VAR(halfHeight,"halfHeight");
						HX_STACK_LINE(721)
						{
							HX_STACK_LINE(721)
							Float left;		HX_STACK_VAR(left,"left");
							HX_STACK_LINE(721)
							if (((_this->orthoLeft == null()))){
								HX_STACK_LINE(721)
								left = -(halfWidth);
							}
							else{
								HX_STACK_LINE(721)
								left = _this->orthoLeft;
							}
							HX_STACK_LINE(721)
							Float right;		HX_STACK_VAR(right,"right");
							HX_STACK_LINE(721)
							if (((_this->orthoRight == null()))){
								HX_STACK_LINE(721)
								right = halfWidth;
							}
							else{
								HX_STACK_LINE(721)
								right = _this->orthoRight;
							}
							HX_STACK_LINE(721)
							Float bottom;		HX_STACK_VAR(bottom,"bottom");
							HX_STACK_LINE(721)
							if (((_this->orthoBottom == null()))){
								HX_STACK_LINE(721)
								bottom = -(halfHeight);
							}
							else{
								HX_STACK_LINE(721)
								bottom = _this->orthoBottom;
							}
							HX_STACK_LINE(721)
							Float top;		HX_STACK_VAR(top,"top");
							HX_STACK_LINE(721)
							if (((_this->orthoTop == null()))){
								HX_STACK_LINE(721)
								top = halfHeight;
							}
							else{
								HX_STACK_LINE(721)
								top = _this->orthoTop;
							}
							HX_STACK_LINE(721)
							Float znear = _this->minZ;		HX_STACK_VAR(znear,"znear");
							HX_STACK_LINE(721)
							Float zfar = _this->maxZ;		HX_STACK_VAR(zfar,"zfar");
							HX_STACK_LINE(721)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = _this->_projectionMatrix;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(721)
							result->m[(int)0] = (Float(2.0) / Float(((right - left))));
							HX_STACK_LINE(721)
							result->m[(int)1] = result->m[(int)2] = result->m[(int)3] = result->m[(int)4] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)5] = (Float(2.0) / Float(((top - bottom))));
							HX_STACK_LINE(721)
							result->m[(int)6] = result->m[(int)7] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)8] = result->m[(int)9] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)10] = (Float((int)-1) / Float(((znear - zfar))));
							HX_STACK_LINE(721)
							result->m[(int)11] = (int)0;
							HX_STACK_LINE(721)
							result->m[(int)12] = (Float(((left + right))) / Float(((left - right))));
							HX_STACK_LINE(721)
							result->m[(int)13] = (Float(((top + bottom))) / Float(((bottom - top))));
							HX_STACK_LINE(721)
							result->m[(int)14] = (Float(znear) / Float(((znear - zfar))));
							HX_STACK_LINE(721)
							result->m[(int)15] = 1.0;
							HX_STACK_LINE(721)
							result;
						}
					}
				}
				HX_STACK_LINE(721)
				projection = _this->_projectionMatrix;
			}
			HX_STACK_LINE(721)
			this->_viewMatrix = view;
			HX_STACK_LINE(721)
			this->_projectionMatrix = projection;
			HX_STACK_LINE(721)
			{
				HX_STACK_LINE(721)
				::com::gamestudiohx::babylonhx::tools::math::Matrix _this = this->_viewMatrix;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(721)
				::com::gamestudiohx::babylonhx::tools::math::Matrix other = this->_projectionMatrix;		HX_STACK_VAR(other,"other");
				HX_STACK_LINE(721)
				{
					HX_STACK_LINE(721)
					Array< Float > result = this->_transformMatrix->m;		HX_STACK_VAR(result,"result");
					HX_STACK_LINE(721)
					Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
					HX_STACK_LINE(721)
					Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
					HX_STACK_LINE(721)
					Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
					HX_STACK_LINE(721)
					Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
					HX_STACK_LINE(721)
					Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
					HX_STACK_LINE(721)
					Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
					HX_STACK_LINE(721)
					Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
					HX_STACK_LINE(721)
					Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
					HX_STACK_LINE(721)
					Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
					HX_STACK_LINE(721)
					Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
					HX_STACK_LINE(721)
					Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
					HX_STACK_LINE(721)
					Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
					HX_STACK_LINE(721)
					Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
					HX_STACK_LINE(721)
					Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
					HX_STACK_LINE(721)
					Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
					HX_STACK_LINE(721)
					Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
					HX_STACK_LINE(721)
					Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
					HX_STACK_LINE(721)
					Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
					HX_STACK_LINE(721)
					Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
					HX_STACK_LINE(721)
					Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
					HX_STACK_LINE(721)
					Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
					HX_STACK_LINE(721)
					Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
					HX_STACK_LINE(721)
					Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
					HX_STACK_LINE(721)
					Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
					HX_STACK_LINE(721)
					Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
					HX_STACK_LINE(721)
					Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
					HX_STACK_LINE(721)
					Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
					HX_STACK_LINE(721)
					Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
					HX_STACK_LINE(721)
					Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
					HX_STACK_LINE(721)
					Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
					HX_STACK_LINE(721)
					Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
					HX_STACK_LINE(721)
					Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
					HX_STACK_LINE(721)
					result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
					HX_STACK_LINE(721)
					result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
					HX_STACK_LINE(721)
					result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
					HX_STACK_LINE(721)
					result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
					HX_STACK_LINE(721)
					result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
					HX_STACK_LINE(721)
					result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
					HX_STACK_LINE(721)
					result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
					HX_STACK_LINE(721)
					result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
					HX_STACK_LINE(721)
					result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
					HX_STACK_LINE(721)
					result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
					HX_STACK_LINE(721)
					result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
					HX_STACK_LINE(721)
					result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
					HX_STACK_LINE(721)
					result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
					HX_STACK_LINE(721)
					result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
					HX_STACK_LINE(721)
					result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
					HX_STACK_LINE(721)
					result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
					HX_STACK_LINE(721)
					result;
				}
			}
		}
		HX_STACK_LINE(724)
		int beforeEvaluateActiveMeshesDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeEvaluateActiveMeshesDate,"beforeEvaluateActiveMeshesDate");
		HX_STACK_LINE(725)
		{
			HX_STACK_LINE(725)
			this->_activeMeshes->reset();
			HX_STACK_LINE(725)
			this->_renderingManager->reset();
			HX_STACK_LINE(725)
			this->_processedMaterials->reset();
			HX_STACK_LINE(725)
			this->_activeParticleSystems->reset();
			HX_STACK_LINE(725)
			this->_activeSkeletons->reset();
			HX_STACK_LINE(725)
			if (((this->_frustumPlanes == null()))){
				HX_STACK_LINE(725)
				Array< ::Dynamic > _g7 = ::com::gamestudiohx::babylonhx::tools::math::Frustum_obj::GetPlanes(this->_transformMatrix);		HX_STACK_VAR(_g7,"_g7");
				HX_STACK_LINE(725)
				this->_frustumPlanes = _g7;
			}
			else{
				HX_STACK_LINE(725)
				Array< ::Dynamic > _g8;		HX_STACK_VAR(_g8,"_g8");
				HX_STACK_LINE(725)
				{
					HX_STACK_LINE(725)
					::com::gamestudiohx::babylonhx::tools::math::Matrix transform = this->_transformMatrix;		HX_STACK_VAR(transform,"transform");
					HX_STACK_LINE(725)
					Array< ::Dynamic > frustumPlanes = this->_frustumPlanes;		HX_STACK_VAR(frustumPlanes,"frustumPlanes");
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) + transform->m->__get((int)2));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) + transform->m->__get((int)6));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)10) + transform->m->__get((int)10));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) + transform->m->__get((int)14));
					HX_STACK_LINE(725)
					{
						HX_STACK_LINE(725)
						::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(725)
						Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
						HX_STACK_LINE(725)
						Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
						HX_STACK_LINE(725)
						if (((norm != (int)0))){
							HX_STACK_LINE(725)
							magnitude = (Float(1.0) / Float(norm));
						}
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->x,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->y,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->z,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->d,magnitude);
					}
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) - transform->m->__get((int)2));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) - transform->m->__get((int)6));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) - transform->m->__get((int)10));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) - transform->m->__get((int)14));
					HX_STACK_LINE(725)
					{
						HX_STACK_LINE(725)
						::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(725)
						Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
						HX_STACK_LINE(725)
						Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
						HX_STACK_LINE(725)
						if (((norm != (int)0))){
							HX_STACK_LINE(725)
							magnitude = (Float(1.0) / Float(norm));
						}
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->x,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->y,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->z,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->d,magnitude);
					}
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) + transform->m->__get((int)0));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) + transform->m->__get((int)4));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) + transform->m->__get((int)8));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) + transform->m->__get((int)12));
					HX_STACK_LINE(725)
					{
						HX_STACK_LINE(725)
						::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(725)
						Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
						HX_STACK_LINE(725)
						Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
						HX_STACK_LINE(725)
						if (((norm != (int)0))){
							HX_STACK_LINE(725)
							magnitude = (Float(1.0) / Float(norm));
						}
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->x,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->y,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->z,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->d,magnitude);
					}
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) - transform->m->__get((int)0));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) - transform->m->__get((int)4));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) - transform->m->__get((int)8));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) - transform->m->__get((int)12));
					HX_STACK_LINE(725)
					{
						HX_STACK_LINE(725)
						::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(725)
						Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
						HX_STACK_LINE(725)
						Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
						HX_STACK_LINE(725)
						if (((norm != (int)0))){
							HX_STACK_LINE(725)
							magnitude = (Float(1.0) / Float(norm));
						}
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->x,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->y,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->z,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->d,magnitude);
					}
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) - transform->m->__get((int)1));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) - transform->m->__get((int)5));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) - transform->m->__get((int)9));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) - transform->m->__get((int)13));
					HX_STACK_LINE(725)
					{
						HX_STACK_LINE(725)
						::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(725)
						Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
						HX_STACK_LINE(725)
						Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
						HX_STACK_LINE(725)
						if (((norm != (int)0))){
							HX_STACK_LINE(725)
							magnitude = (Float(1.0) / Float(norm));
						}
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->x,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->y,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->z,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->d,magnitude);
					}
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) + transform->m->__get((int)1));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) + transform->m->__get((int)5));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) + transform->m->__get((int)9));
					HX_STACK_LINE(725)
					frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) + transform->m->__get((int)13));
					HX_STACK_LINE(725)
					{
						HX_STACK_LINE(725)
						::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(725)
						Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
						HX_STACK_LINE(725)
						Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
						HX_STACK_LINE(725)
						if (((norm != (int)0))){
							HX_STACK_LINE(725)
							magnitude = (Float(1.0) / Float(norm));
						}
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->x,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->y,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->normal->z,magnitude);
						HX_STACK_LINE(725)
						hx::MultEq(_this->d,magnitude);
					}
					HX_STACK_LINE(725)
					_g8 = frustumPlanes;
				}
				HX_STACK_LINE(725)
				this->_frustumPlanes = _g8;
			}
			HX_STACK_LINE(725)
			if (((this->_selectionOctree != null()))){
				HX_STACK_LINE(725)
				Array< ::Dynamic > selection = this->_selectionOctree->select(this->_frustumPlanes);		HX_STACK_VAR(selection,"selection");
				HX_STACK_LINE(725)
				{
					HX_STACK_LINE(725)
					int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
					HX_STACK_LINE(725)
					int _g = selection->length;		HX_STACK_VAR(_g,"_g");
					HX_STACK_LINE(725)
					while((true)){
						HX_STACK_LINE(725)
						if ((!(((_g1 < _g))))){
							HX_STACK_LINE(725)
							break;
						}
						HX_STACK_LINE(725)
						int blockIndex = (_g1)++;		HX_STACK_VAR(blockIndex,"blockIndex");
						HX_STACK_LINE(725)
						::com::gamestudiohx::babylonhx::culling::octrees::OctreeBlock block = selection->__get(blockIndex).StaticCast< ::com::gamestudiohx::babylonhx::culling::octrees::OctreeBlock >();		HX_STACK_VAR(block,"block");
						HX_STACK_LINE(725)
						{
							HX_STACK_LINE(725)
							int _g3 = (int)0;		HX_STACK_VAR(_g3,"_g3");
							HX_STACK_LINE(725)
							int _g2 = block->meshes->length;		HX_STACK_VAR(_g2,"_g2");
							HX_STACK_LINE(725)
							while((true)){
								HX_STACK_LINE(725)
								if ((!(((_g3 < _g2))))){
									HX_STACK_LINE(725)
									break;
								}
								HX_STACK_LINE(725)
								int meshIndex = (_g3)++;		HX_STACK_VAR(meshIndex,"meshIndex");
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = block->meshes->__get(meshIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
								HX_STACK_LINE(725)
								if (((mesh->_renderId != this->_renderId))){
									HX_STACK_LINE(725)
									int _g9 = mesh->getTotalVertices();		HX_STACK_VAR(_g9,"_g9");
									HX_STACK_LINE(725)
									hx::AddEq(this->_totalVertices,_g9);
									HX_STACK_LINE(725)
									if ((!(mesh->isReady()))){
										HX_STACK_LINE(725)
										continue;
									}
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										bool force = false;		HX_STACK_VAR(force,"force");
										HX_STACK_LINE(725)
										::com::gamestudiohx::babylonhx::tools::math::Matrix ret = mesh->_worldMatrix;		HX_STACK_VAR(ret,"ret");
										struct _Function_9_1{
											inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
												HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",725,0x7c8236a5)
												{
													HX_STACK_LINE(725)
													int _g10 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g10,"_g10");
													HX_STACK_LINE(725)
													return (  ((!(((mesh->_currentRenderId == _g10))))) ? bool(mesh->isSynchronized(null())) : bool(true) );
												}
												return null();
											}
										};
										HX_STACK_LINE(725)
										if (((  ((!(force))) ? bool(_Function_9_1::Block(mesh)) : bool(false) ))){
											HX_STACK_LINE(725)
											mesh->_childrenFlag = (int)0;
										}
										else{
											HX_STACK_LINE(725)
											mesh->_childrenFlag = (int)1;
											HX_STACK_LINE(725)
											mesh->_cache->__Field(HX_CSTRING("position"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->position);
											HX_STACK_LINE(725)
											mesh->_cache->__Field(HX_CSTRING("scaling"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->scaling);
											HX_STACK_LINE(725)
											mesh->_cache->__FieldRef(HX_CSTRING("pivotMatrixUpdated")) = false;
											HX_STACK_LINE(725)
											int _g11 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g11,"_g11");
											HX_STACK_LINE(725)
											mesh->_currentRenderId = _g11;
											HX_STACK_LINE(725)
											{
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localScaling;		HX_STACK_VAR(result,"result");
												HX_STACK_LINE(725)
												result->m[(int)0] = mesh->scaling->x;
												HX_STACK_LINE(725)
												result->m[(int)1] = (int)0;
												HX_STACK_LINE(725)
												result->m[(int)2] = (int)0;
												HX_STACK_LINE(725)
												result->m[(int)3] = (int)0;
												HX_STACK_LINE(725)
												result->m[(int)4] = (int)0;
												HX_STACK_LINE(725)
												result->m[(int)5] = mesh->scaling->y;
												HX_STACK_LINE(725)
												result->m[(int)6] = (int)0;
												HX_STACK_LINE(725)
												result->m[(int)7] = (int)0;
												HX_STACK_LINE(725)
												result->m[(int)8] = (int)0;
												HX_STACK_LINE(725)
												result->m[(int)9] = (int)0;
												HX_STACK_LINE(725)
												result->m[(int)10] = mesh->scaling->z;
												HX_STACK_LINE(725)
												result->m[(int)11] = (int)0;
												HX_STACK_LINE(725)
												result->m[(int)12] = (int)0;
												HX_STACK_LINE(725)
												result->m[(int)13] = (int)0;
												HX_STACK_LINE(725)
												result->m[(int)14] = (int)0;
												HX_STACK_LINE(725)
												result->m[(int)15] = 1.0;
												HX_STACK_LINE(725)
												result;
											}
											HX_STACK_LINE(725)
											if (((mesh->rotationQuaternion != null()))){
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Quaternion _this = mesh->rotationQuaternion;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(725)
													Float xx = (_this->x * _this->x);		HX_STACK_VAR(xx,"xx");
													HX_STACK_LINE(725)
													Float yy = (_this->y * _this->y);		HX_STACK_VAR(yy,"yy");
													HX_STACK_LINE(725)
													Float zz = (_this->z * _this->z);		HX_STACK_VAR(zz,"zz");
													HX_STACK_LINE(725)
													Float xy = (_this->x * _this->y);		HX_STACK_VAR(xy,"xy");
													HX_STACK_LINE(725)
													Float zw = (_this->z * _this->w);		HX_STACK_VAR(zw,"zw");
													HX_STACK_LINE(725)
													Float zx = (_this->z * _this->x);		HX_STACK_VAR(zx,"zx");
													HX_STACK_LINE(725)
													Float yw = (_this->y * _this->w);		HX_STACK_VAR(yw,"yw");
													HX_STACK_LINE(725)
													Float yz = (_this->y * _this->z);		HX_STACK_VAR(yz,"yz");
													HX_STACK_LINE(725)
													Float xw = (_this->x * _this->w);		HX_STACK_VAR(xw,"xw");
													HX_STACK_LINE(725)
													result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
													HX_STACK_LINE(725)
													result->m[(int)1] = (2.0 * ((xy + zw)));
													HX_STACK_LINE(725)
													result->m[(int)2] = (2.0 * ((zx - yw)));
													HX_STACK_LINE(725)
													result->m[(int)3] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)4] = (2.0 * ((xy - zw)));
													HX_STACK_LINE(725)
													result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
													HX_STACK_LINE(725)
													result->m[(int)6] = (2.0 * ((yz + xw)));
													HX_STACK_LINE(725)
													result->m[(int)7] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)8] = (2.0 * ((zx + yw)));
													HX_STACK_LINE(725)
													result->m[(int)9] = (2.0 * ((yz - xw)));
													HX_STACK_LINE(725)
													result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
													HX_STACK_LINE(725)
													result->m[(int)11] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)12] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)13] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)14] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)15] = 1.0;
													HX_STACK_LINE(725)
													result;
												}
												HX_STACK_LINE(725)
												mesh->_cache->__Field(HX_CSTRING("rotationQuaternion"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotationQuaternion);
											}
											else{
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Quaternion tempQuaternion = ::com::gamestudiohx::babylonhx::tools::math::Quaternion_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tempQuaternion,"tempQuaternion");
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Quaternion _g12;		HX_STACK_VAR(_g12,"_g12");
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														Float halfRoll = (mesh->rotation->z * 0.5);		HX_STACK_VAR(halfRoll,"halfRoll");
														HX_STACK_LINE(725)
														Float halfPitch = (mesh->rotation->x * 0.5);		HX_STACK_VAR(halfPitch,"halfPitch");
														HX_STACK_LINE(725)
														Float halfYaw = (mesh->rotation->y * 0.5);		HX_STACK_VAR(halfYaw,"halfYaw");
														HX_STACK_LINE(725)
														Float sinRoll = ::Math_obj::sin(halfRoll);		HX_STACK_VAR(sinRoll,"sinRoll");
														HX_STACK_LINE(725)
														Float cosRoll = ::Math_obj::cos(halfRoll);		HX_STACK_VAR(cosRoll,"cosRoll");
														HX_STACK_LINE(725)
														Float sinPitch = ::Math_obj::sin(halfPitch);		HX_STACK_VAR(sinPitch,"sinPitch");
														HX_STACK_LINE(725)
														Float cosPitch = ::Math_obj::cos(halfPitch);		HX_STACK_VAR(cosPitch,"cosPitch");
														HX_STACK_LINE(725)
														Float sinYaw = ::Math_obj::sin(halfYaw);		HX_STACK_VAR(sinYaw,"sinYaw");
														HX_STACK_LINE(725)
														Float cosYaw = ::Math_obj::cos(halfYaw);		HX_STACK_VAR(cosYaw,"cosYaw");
														HX_STACK_LINE(725)
														tempQuaternion->x = (((cosYaw * sinPitch) * cosRoll) + ((sinYaw * cosPitch) * sinRoll));
														HX_STACK_LINE(725)
														tempQuaternion->y = (((sinYaw * cosPitch) * cosRoll) - ((cosYaw * sinPitch) * sinRoll));
														HX_STACK_LINE(725)
														tempQuaternion->z = (((cosYaw * cosPitch) * sinRoll) - ((sinYaw * sinPitch) * cosRoll));
														HX_STACK_LINE(725)
														tempQuaternion->w = (((cosYaw * cosPitch) * cosRoll) + ((sinYaw * sinPitch) * sinRoll));
														HX_STACK_LINE(725)
														_g12 = tempQuaternion;
													}
													HX_STACK_LINE(725)
													tempQuaternion = _g12;
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														Float xx = (tempQuaternion->x * tempQuaternion->x);		HX_STACK_VAR(xx,"xx");
														HX_STACK_LINE(725)
														Float yy = (tempQuaternion->y * tempQuaternion->y);		HX_STACK_VAR(yy,"yy");
														HX_STACK_LINE(725)
														Float zz = (tempQuaternion->z * tempQuaternion->z);		HX_STACK_VAR(zz,"zz");
														HX_STACK_LINE(725)
														Float xy = (tempQuaternion->x * tempQuaternion->y);		HX_STACK_VAR(xy,"xy");
														HX_STACK_LINE(725)
														Float zw = (tempQuaternion->z * tempQuaternion->w);		HX_STACK_VAR(zw,"zw");
														HX_STACK_LINE(725)
														Float zx = (tempQuaternion->z * tempQuaternion->x);		HX_STACK_VAR(zx,"zx");
														HX_STACK_LINE(725)
														Float yw = (tempQuaternion->y * tempQuaternion->w);		HX_STACK_VAR(yw,"yw");
														HX_STACK_LINE(725)
														Float yz = (tempQuaternion->y * tempQuaternion->z);		HX_STACK_VAR(yz,"yz");
														HX_STACK_LINE(725)
														Float xw = (tempQuaternion->x * tempQuaternion->w);		HX_STACK_VAR(xw,"xw");
														HX_STACK_LINE(725)
														result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
														HX_STACK_LINE(725)
														result->m[(int)1] = (2.0 * ((xy + zw)));
														HX_STACK_LINE(725)
														result->m[(int)2] = (2.0 * ((zx - yw)));
														HX_STACK_LINE(725)
														result->m[(int)3] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)4] = (2.0 * ((xy - zw)));
														HX_STACK_LINE(725)
														result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
														HX_STACK_LINE(725)
														result->m[(int)6] = (2.0 * ((yz + xw)));
														HX_STACK_LINE(725)
														result->m[(int)7] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)8] = (2.0 * ((zx + yw)));
														HX_STACK_LINE(725)
														result->m[(int)9] = (2.0 * ((yz - xw)));
														HX_STACK_LINE(725)
														result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
														HX_STACK_LINE(725)
														result->m[(int)11] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)12] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)13] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)14] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)15] = 1.0;
														HX_STACK_LINE(725)
														result;
													}
												}
												HX_STACK_LINE(725)
												mesh->_cache->__Field(HX_CSTRING("rotation"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotation);
											}
											HX_STACK_LINE(725)
											if ((mesh->infiniteDistance)){
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::cameras::Camera camera1 = mesh->_scene->activeCamera;		HX_STACK_VAR(camera1,"camera1");
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														result->m[(int)0] = 1.0;
														HX_STACK_LINE(725)
														result->m[(int)1] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)2] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)3] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)4] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)5] = 1.0;
														HX_STACK_LINE(725)
														result->m[(int)6] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)7] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)8] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)9] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)10] = 1.0;
														HX_STACK_LINE(725)
														result->m[(int)11] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)12] = (mesh->position->x + camera1->position->x);
														HX_STACK_LINE(725)
														result->m[(int)13] = (mesh->position->y + camera1->position->y);
														HX_STACK_LINE(725)
														result->m[(int)14] = (mesh->position->z + camera1->position->z);
														HX_STACK_LINE(725)
														result->m[(int)15] = 1.0;
														HX_STACK_LINE(725)
														result;
													}
												}
											}
											else{
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													result->m[(int)0] = 1.0;
													HX_STACK_LINE(725)
													result->m[(int)1] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)2] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)3] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)4] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)5] = 1.0;
													HX_STACK_LINE(725)
													result->m[(int)6] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)7] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)8] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)9] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)10] = 1.0;
													HX_STACK_LINE(725)
													result->m[(int)11] = (int)0;
													HX_STACK_LINE(725)
													result->m[(int)12] = mesh->position->x;
													HX_STACK_LINE(725)
													result->m[(int)13] = mesh->position->y;
													HX_STACK_LINE(725)
													result->m[(int)14] = mesh->position->z;
													HX_STACK_LINE(725)
													result->m[(int)15] = 1.0;
													HX_STACK_LINE(725)
													result;
												}
											}
											HX_STACK_LINE(725)
											{
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_pivotMatrix;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localScaling;		HX_STACK_VAR(other,"other");
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													Array< Float > result = mesh->_localPivotScaling->m;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(725)
													Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
													HX_STACK_LINE(725)
													Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
													HX_STACK_LINE(725)
													Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
													HX_STACK_LINE(725)
													Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
													HX_STACK_LINE(725)
													Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
													HX_STACK_LINE(725)
													Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
													HX_STACK_LINE(725)
													Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
													HX_STACK_LINE(725)
													Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
													HX_STACK_LINE(725)
													Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
													HX_STACK_LINE(725)
													Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
													HX_STACK_LINE(725)
													Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
													HX_STACK_LINE(725)
													Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
													HX_STACK_LINE(725)
													Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
													HX_STACK_LINE(725)
													Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
													HX_STACK_LINE(725)
													Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
													HX_STACK_LINE(725)
													Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
													HX_STACK_LINE(725)
													Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
													HX_STACK_LINE(725)
													Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
													HX_STACK_LINE(725)
													Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
													HX_STACK_LINE(725)
													Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
													HX_STACK_LINE(725)
													Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
													HX_STACK_LINE(725)
													Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
													HX_STACK_LINE(725)
													Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
													HX_STACK_LINE(725)
													Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
													HX_STACK_LINE(725)
													Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
													HX_STACK_LINE(725)
													Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
													HX_STACK_LINE(725)
													Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
													HX_STACK_LINE(725)
													Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
													HX_STACK_LINE(725)
													Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
													HX_STACK_LINE(725)
													Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
													HX_STACK_LINE(725)
													Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
													HX_STACK_LINE(725)
													Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
													HX_STACK_LINE(725)
													result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
													HX_STACK_LINE(725)
													result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
													HX_STACK_LINE(725)
													result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
													HX_STACK_LINE(725)
													result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
													HX_STACK_LINE(725)
													result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
													HX_STACK_LINE(725)
													result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
													HX_STACK_LINE(725)
													result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
													HX_STACK_LINE(725)
													result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
													HX_STACK_LINE(725)
													result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
													HX_STACK_LINE(725)
													result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
													HX_STACK_LINE(725)
													result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
													HX_STACK_LINE(725)
													result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
													HX_STACK_LINE(725)
													result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
													HX_STACK_LINE(725)
													result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
													HX_STACK_LINE(725)
													result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
													HX_STACK_LINE(725)
													result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
													HX_STACK_LINE(725)
													result;
												}
											}
											HX_STACK_LINE(725)
											{
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScaling;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localRotation;		HX_STACK_VAR(other,"other");
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(725)
													Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
													HX_STACK_LINE(725)
													Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
													HX_STACK_LINE(725)
													Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
													HX_STACK_LINE(725)
													Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
													HX_STACK_LINE(725)
													Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
													HX_STACK_LINE(725)
													Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
													HX_STACK_LINE(725)
													Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
													HX_STACK_LINE(725)
													Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
													HX_STACK_LINE(725)
													Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
													HX_STACK_LINE(725)
													Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
													HX_STACK_LINE(725)
													Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
													HX_STACK_LINE(725)
													Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
													HX_STACK_LINE(725)
													Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
													HX_STACK_LINE(725)
													Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
													HX_STACK_LINE(725)
													Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
													HX_STACK_LINE(725)
													Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
													HX_STACK_LINE(725)
													Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
													HX_STACK_LINE(725)
													Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
													HX_STACK_LINE(725)
													Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
													HX_STACK_LINE(725)
													Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
													HX_STACK_LINE(725)
													Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
													HX_STACK_LINE(725)
													Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
													HX_STACK_LINE(725)
													Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
													HX_STACK_LINE(725)
													Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
													HX_STACK_LINE(725)
													Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
													HX_STACK_LINE(725)
													Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
													HX_STACK_LINE(725)
													Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
													HX_STACK_LINE(725)
													Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
													HX_STACK_LINE(725)
													Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
													HX_STACK_LINE(725)
													Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
													HX_STACK_LINE(725)
													Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
													HX_STACK_LINE(725)
													Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
													HX_STACK_LINE(725)
													result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
													HX_STACK_LINE(725)
													result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
													HX_STACK_LINE(725)
													result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
													HX_STACK_LINE(725)
													result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
													HX_STACK_LINE(725)
													result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
													HX_STACK_LINE(725)
													result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
													HX_STACK_LINE(725)
													result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
													HX_STACK_LINE(725)
													result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
													HX_STACK_LINE(725)
													result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
													HX_STACK_LINE(725)
													result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
													HX_STACK_LINE(725)
													result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
													HX_STACK_LINE(725)
													result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
													HX_STACK_LINE(725)
													result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
													HX_STACK_LINE(725)
													result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
													HX_STACK_LINE(725)
													result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
													HX_STACK_LINE(725)
													result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
													HX_STACK_LINE(725)
													result;
												}
											}
											HX_STACK_LINE(725)
											if (((mesh->billboardMode != ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE))){
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::tools::math::Vector3 localPosition;		HX_STACK_VAR(localPosition,"localPosition");
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->position;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(725)
													localPosition = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
												}
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::tools::math::Vector3 zero;		HX_STACK_VAR(zero,"zero");
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_scene->activeCamera->position;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(725)
													zero = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
												}
												HX_STACK_LINE(725)
												if (((bool((mesh->parent != null())) && bool((mesh->parent->position != null()))))){
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = mesh->parent->position;		HX_STACK_VAR(otherVector,"otherVector");
														HX_STACK_LINE(725)
														hx::AddEq(localPosition->x,otherVector->x);
														HX_STACK_LINE(725)
														hx::AddEq(localPosition->y,otherVector->y);
														HX_STACK_LINE(725)
														hx::AddEq(localPosition->z,otherVector->z);
													}
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(725)
														{
															HX_STACK_LINE(725)
															result->m[(int)0] = 1.0;
															HX_STACK_LINE(725)
															result->m[(int)1] = (int)0;
															HX_STACK_LINE(725)
															result->m[(int)2] = (int)0;
															HX_STACK_LINE(725)
															result->m[(int)3] = (int)0;
															HX_STACK_LINE(725)
															result->m[(int)4] = (int)0;
															HX_STACK_LINE(725)
															result->m[(int)5] = 1.0;
															HX_STACK_LINE(725)
															result->m[(int)6] = (int)0;
															HX_STACK_LINE(725)
															result->m[(int)7] = (int)0;
															HX_STACK_LINE(725)
															result->m[(int)8] = (int)0;
															HX_STACK_LINE(725)
															result->m[(int)9] = (int)0;
															HX_STACK_LINE(725)
															result->m[(int)10] = 1.0;
															HX_STACK_LINE(725)
															result->m[(int)11] = (int)0;
															HX_STACK_LINE(725)
															result->m[(int)12] = localPosition->x;
															HX_STACK_LINE(725)
															result->m[(int)13] = localPosition->y;
															HX_STACK_LINE(725)
															result->m[(int)14] = localPosition->z;
															HX_STACK_LINE(725)
															result->m[(int)15] = 1.0;
															HX_STACK_LINE(725)
															result;
														}
													}
												}
												HX_STACK_LINE(725)
												if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))) == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))){
													HX_STACK_LINE(725)
													zero = mesh->_scene->activeCamera->position;
												}
												else{
													HX_STACK_LINE(725)
													if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_X))) != (int)0))){
														HX_STACK_LINE(725)
														zero->x = (localPosition->x + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
													}
													HX_STACK_LINE(725)
													if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Y))) != (int)0))){
														HX_STACK_LINE(725)
														zero->y = (localPosition->y + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
													}
													HX_STACK_LINE(725)
													if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Z))) != (int)0))){
														HX_STACK_LINE(725)
														zero->z = (localPosition->z + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
													}
												}
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 up = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Up();		HX_STACK_VAR(up,"up");
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localBillboard;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 xAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(xAxis,"xAxis");
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 yAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(yAxis,"yAxis");
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 zAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(zAxis,"zAxis");
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														zAxis->x = (zero->x - localPosition->x);
														HX_STACK_LINE(725)
														zAxis->y = (zero->y - localPosition->y);
														HX_STACK_LINE(725)
														zAxis->z = (zero->z - localPosition->z);
													}
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														Float len = ::Math_obj::sqrt((((zAxis->x * zAxis->x) + (zAxis->y * zAxis->y)) + (zAxis->z * zAxis->z)));		HX_STACK_VAR(len,"len");
														HX_STACK_LINE(725)
														if (((len != (int)0))){
															HX_STACK_LINE(725)
															Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
															HX_STACK_LINE(725)
															hx::MultEq(zAxis->x,num);
															HX_STACK_LINE(725)
															hx::MultEq(zAxis->y,num);
															HX_STACK_LINE(725)
															hx::MultEq(zAxis->z,num);
														}
													}
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														xAxis->x = ((up->y * zAxis->z) - (up->z * zAxis->y));
														HX_STACK_LINE(725)
														xAxis->y = ((up->z * zAxis->x) - (up->x * zAxis->z));
														HX_STACK_LINE(725)
														xAxis->z = ((up->x * zAxis->y) - (up->y * zAxis->x));
													}
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														Float len = ::Math_obj::sqrt((((xAxis->x * xAxis->x) + (xAxis->y * xAxis->y)) + (xAxis->z * xAxis->z)));		HX_STACK_VAR(len,"len");
														HX_STACK_LINE(725)
														if (((len != (int)0))){
															HX_STACK_LINE(725)
															Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
															HX_STACK_LINE(725)
															hx::MultEq(xAxis->x,num);
															HX_STACK_LINE(725)
															hx::MultEq(xAxis->y,num);
															HX_STACK_LINE(725)
															hx::MultEq(xAxis->z,num);
														}
													}
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														yAxis->x = ((zAxis->y * xAxis->z) - (zAxis->z * xAxis->y));
														HX_STACK_LINE(725)
														yAxis->y = ((zAxis->z * xAxis->x) - (zAxis->x * xAxis->z));
														HX_STACK_LINE(725)
														yAxis->z = ((zAxis->x * xAxis->y) - (zAxis->y * xAxis->x));
													}
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														Float len = ::Math_obj::sqrt((((yAxis->x * yAxis->x) + (yAxis->y * yAxis->y)) + (yAxis->z * yAxis->z)));		HX_STACK_VAR(len,"len");
														HX_STACK_LINE(725)
														if (((len != (int)0))){
															HX_STACK_LINE(725)
															Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
															HX_STACK_LINE(725)
															hx::MultEq(yAxis->x,num);
															HX_STACK_LINE(725)
															hx::MultEq(yAxis->y,num);
															HX_STACK_LINE(725)
															hx::MultEq(yAxis->z,num);
														}
													}
													HX_STACK_LINE(725)
													Float ex = -(((((xAxis->x * localPosition->x) + (xAxis->y * localPosition->y)) + (xAxis->z * localPosition->z))));		HX_STACK_VAR(ex,"ex");
													HX_STACK_LINE(725)
													Float ey = -(((((yAxis->x * localPosition->x) + (yAxis->y * localPosition->y)) + (yAxis->z * localPosition->z))));		HX_STACK_VAR(ey,"ey");
													HX_STACK_LINE(725)
													Float ez = -(((((zAxis->x * localPosition->x) + (zAxis->y * localPosition->y)) + (zAxis->z * localPosition->z))));		HX_STACK_VAR(ez,"ez");
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														result->m[(int)0] = xAxis->x;
														HX_STACK_LINE(725)
														result->m[(int)1] = yAxis->x;
														HX_STACK_LINE(725)
														result->m[(int)2] = zAxis->x;
														HX_STACK_LINE(725)
														result->m[(int)3] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)4] = xAxis->y;
														HX_STACK_LINE(725)
														result->m[(int)5] = yAxis->y;
														HX_STACK_LINE(725)
														result->m[(int)6] = zAxis->y;
														HX_STACK_LINE(725)
														result->m[(int)7] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)8] = xAxis->z;
														HX_STACK_LINE(725)
														result->m[(int)9] = yAxis->z;
														HX_STACK_LINE(725)
														result->m[(int)10] = zAxis->z;
														HX_STACK_LINE(725)
														result->m[(int)11] = (int)0;
														HX_STACK_LINE(725)
														result->m[(int)12] = ex;
														HX_STACK_LINE(725)
														result->m[(int)13] = ey;
														HX_STACK_LINE(725)
														result->m[(int)14] = ez;
														HX_STACK_LINE(725)
														result->m[(int)15] = (int)1;
														HX_STACK_LINE(725)
														result;
													}
												}
												HX_STACK_LINE(725)
												mesh->_localBillboard->m[(int)12] = mesh->_localBillboard->m[(int)13] = mesh->_localBillboard->m[(int)14] = (int)0;
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localBillboard;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
														HX_STACK_LINE(725)
														Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
														HX_STACK_LINE(725)
														Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
														HX_STACK_LINE(725)
														Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
														HX_STACK_LINE(725)
														Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
														HX_STACK_LINE(725)
														Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
														HX_STACK_LINE(725)
														Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
														HX_STACK_LINE(725)
														Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
														HX_STACK_LINE(725)
														Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
														HX_STACK_LINE(725)
														Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
														HX_STACK_LINE(725)
														Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
														HX_STACK_LINE(725)
														Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
														HX_STACK_LINE(725)
														Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
														HX_STACK_LINE(725)
														Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
														HX_STACK_LINE(725)
														Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
														HX_STACK_LINE(725)
														Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
														HX_STACK_LINE(725)
														Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
														HX_STACK_LINE(725)
														Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
														HX_STACK_LINE(725)
														Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
														HX_STACK_LINE(725)
														Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
														HX_STACK_LINE(725)
														Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
														HX_STACK_LINE(725)
														Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
														HX_STACK_LINE(725)
														Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
														HX_STACK_LINE(725)
														Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
														HX_STACK_LINE(725)
														Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
														HX_STACK_LINE(725)
														Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
														HX_STACK_LINE(725)
														Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
														HX_STACK_LINE(725)
														Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
														HX_STACK_LINE(725)
														Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
														HX_STACK_LINE(725)
														Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
														HX_STACK_LINE(725)
														Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
														HX_STACK_LINE(725)
														Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
														HX_STACK_LINE(725)
														Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
														HX_STACK_LINE(725)
														Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
														HX_STACK_LINE(725)
														Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
														HX_STACK_LINE(725)
														Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
														HX_STACK_LINE(725)
														Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
														HX_STACK_LINE(725)
														Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
														HX_STACK_LINE(725)
														Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
														HX_STACK_LINE(725)
														_this->m[(int)0] = (l23 * l27);
														HX_STACK_LINE(725)
														_this->m[(int)4] = (l24 * l27);
														HX_STACK_LINE(725)
														_this->m[(int)8] = (l25 * l27);
														HX_STACK_LINE(725)
														_this->m[(int)12] = (l26 * l27);
														HX_STACK_LINE(725)
														_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
														HX_STACK_LINE(725)
														_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
														HX_STACK_LINE(725)
														_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
														HX_STACK_LINE(725)
														_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
														HX_STACK_LINE(725)
														_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
														HX_STACK_LINE(725)
														_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
														HX_STACK_LINE(725)
														_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
														HX_STACK_LINE(725)
														_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
														HX_STACK_LINE(725)
														_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
														HX_STACK_LINE(725)
														_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
														HX_STACK_LINE(725)
														_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
														HX_STACK_LINE(725)
														_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
													}
												}
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localBillboard;		HX_STACK_VAR(other,"other");
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(725)
														Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
														HX_STACK_LINE(725)
														Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
														HX_STACK_LINE(725)
														Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
														HX_STACK_LINE(725)
														Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
														HX_STACK_LINE(725)
														Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
														HX_STACK_LINE(725)
														Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
														HX_STACK_LINE(725)
														Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
														HX_STACK_LINE(725)
														Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
														HX_STACK_LINE(725)
														Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
														HX_STACK_LINE(725)
														Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
														HX_STACK_LINE(725)
														Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
														HX_STACK_LINE(725)
														Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
														HX_STACK_LINE(725)
														Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
														HX_STACK_LINE(725)
														Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
														HX_STACK_LINE(725)
														Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
														HX_STACK_LINE(725)
														Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
														HX_STACK_LINE(725)
														Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
														HX_STACK_LINE(725)
														Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
														HX_STACK_LINE(725)
														Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
														HX_STACK_LINE(725)
														Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
														HX_STACK_LINE(725)
														Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
														HX_STACK_LINE(725)
														Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
														HX_STACK_LINE(725)
														Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
														HX_STACK_LINE(725)
														Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
														HX_STACK_LINE(725)
														Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
														HX_STACK_LINE(725)
														Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
														HX_STACK_LINE(725)
														Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
														HX_STACK_LINE(725)
														Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
														HX_STACK_LINE(725)
														Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
														HX_STACK_LINE(725)
														Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
														HX_STACK_LINE(725)
														Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
														HX_STACK_LINE(725)
														Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
														HX_STACK_LINE(725)
														result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
														HX_STACK_LINE(725)
														result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
														HX_STACK_LINE(725)
														result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
														HX_STACK_LINE(725)
														result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
														HX_STACK_LINE(725)
														result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
														HX_STACK_LINE(725)
														result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
														HX_STACK_LINE(725)
														result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
														HX_STACK_LINE(725)
														result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
														HX_STACK_LINE(725)
														result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
														HX_STACK_LINE(725)
														result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
														HX_STACK_LINE(725)
														result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
														HX_STACK_LINE(725)
														result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
														HX_STACK_LINE(725)
														result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
														HX_STACK_LINE(725)
														result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
														HX_STACK_LINE(725)
														result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
														HX_STACK_LINE(725)
														result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
														HX_STACK_LINE(725)
														result;
													}
												}
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_rotateYByPI;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localWorld;		HX_STACK_VAR(other,"other");
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(725)
														Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
														HX_STACK_LINE(725)
														Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
														HX_STACK_LINE(725)
														Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
														HX_STACK_LINE(725)
														Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
														HX_STACK_LINE(725)
														Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
														HX_STACK_LINE(725)
														Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
														HX_STACK_LINE(725)
														Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
														HX_STACK_LINE(725)
														Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
														HX_STACK_LINE(725)
														Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
														HX_STACK_LINE(725)
														Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
														HX_STACK_LINE(725)
														Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
														HX_STACK_LINE(725)
														Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
														HX_STACK_LINE(725)
														Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
														HX_STACK_LINE(725)
														Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
														HX_STACK_LINE(725)
														Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
														HX_STACK_LINE(725)
														Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
														HX_STACK_LINE(725)
														Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
														HX_STACK_LINE(725)
														Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
														HX_STACK_LINE(725)
														Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
														HX_STACK_LINE(725)
														Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
														HX_STACK_LINE(725)
														Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
														HX_STACK_LINE(725)
														Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
														HX_STACK_LINE(725)
														Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
														HX_STACK_LINE(725)
														Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
														HX_STACK_LINE(725)
														Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
														HX_STACK_LINE(725)
														Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
														HX_STACK_LINE(725)
														Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
														HX_STACK_LINE(725)
														Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
														HX_STACK_LINE(725)
														Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
														HX_STACK_LINE(725)
														Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
														HX_STACK_LINE(725)
														Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
														HX_STACK_LINE(725)
														Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
														HX_STACK_LINE(725)
														result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
														HX_STACK_LINE(725)
														result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
														HX_STACK_LINE(725)
														result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
														HX_STACK_LINE(725)
														result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
														HX_STACK_LINE(725)
														result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
														HX_STACK_LINE(725)
														result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
														HX_STACK_LINE(725)
														result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
														HX_STACK_LINE(725)
														result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
														HX_STACK_LINE(725)
														result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
														HX_STACK_LINE(725)
														result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
														HX_STACK_LINE(725)
														result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
														HX_STACK_LINE(725)
														result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
														HX_STACK_LINE(725)
														result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
														HX_STACK_LINE(725)
														result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
														HX_STACK_LINE(725)
														result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
														HX_STACK_LINE(725)
														result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
														HX_STACK_LINE(725)
														result;
													}
												}
											}
											struct _Function_10_1{
												inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
													HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",725,0x7c8236a5)
													{
														HX_STACK_LINE(725)
														::com::gamestudiohx::babylonhx::tools::math::Matrix _g13 = mesh->parent->getWorldMatrix();		HX_STACK_VAR(_g13,"_g13");
														HX_STACK_LINE(725)
														return (_g13 != null());
													}
													return null();
												}
											};
											HX_STACK_LINE(725)
											if (((  (((  (((mesh->parent != null()))) ? bool(_Function_10_1::Block(mesh)) : bool(false) ))) ? bool((mesh->billboardMode == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE)) : bool(false) ))){
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(725)
														Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
														HX_STACK_LINE(725)
														Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
														HX_STACK_LINE(725)
														Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
														HX_STACK_LINE(725)
														Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
														HX_STACK_LINE(725)
														Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
														HX_STACK_LINE(725)
														Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
														HX_STACK_LINE(725)
														Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
														HX_STACK_LINE(725)
														Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
														HX_STACK_LINE(725)
														Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
														HX_STACK_LINE(725)
														Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
														HX_STACK_LINE(725)
														Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
														HX_STACK_LINE(725)
														Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
														HX_STACK_LINE(725)
														Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
														HX_STACK_LINE(725)
														Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
														HX_STACK_LINE(725)
														Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
														HX_STACK_LINE(725)
														Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
														HX_STACK_LINE(725)
														Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
														HX_STACK_LINE(725)
														Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
														HX_STACK_LINE(725)
														Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
														HX_STACK_LINE(725)
														Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
														HX_STACK_LINE(725)
														Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
														HX_STACK_LINE(725)
														Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
														HX_STACK_LINE(725)
														Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
														HX_STACK_LINE(725)
														Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
														HX_STACK_LINE(725)
														Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
														HX_STACK_LINE(725)
														Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
														HX_STACK_LINE(725)
														Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
														HX_STACK_LINE(725)
														Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
														HX_STACK_LINE(725)
														Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
														HX_STACK_LINE(725)
														Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
														HX_STACK_LINE(725)
														Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
														HX_STACK_LINE(725)
														Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
														HX_STACK_LINE(725)
														result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
														HX_STACK_LINE(725)
														result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
														HX_STACK_LINE(725)
														result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
														HX_STACK_LINE(725)
														result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
														HX_STACK_LINE(725)
														result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
														HX_STACK_LINE(725)
														result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
														HX_STACK_LINE(725)
														result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
														HX_STACK_LINE(725)
														result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
														HX_STACK_LINE(725)
														result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
														HX_STACK_LINE(725)
														result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
														HX_STACK_LINE(725)
														result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
														HX_STACK_LINE(725)
														result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
														HX_STACK_LINE(725)
														result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
														HX_STACK_LINE(725)
														result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
														HX_STACK_LINE(725)
														result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
														HX_STACK_LINE(725)
														result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
														HX_STACK_LINE(725)
														result;
													}
												}
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::tools::math::Matrix parentWorld = mesh->parent->getWorldMatrix();		HX_STACK_VAR(parentWorld,"parentWorld");
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localWorld;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(725)
														Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
														HX_STACK_LINE(725)
														Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
														HX_STACK_LINE(725)
														Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
														HX_STACK_LINE(725)
														Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
														HX_STACK_LINE(725)
														Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
														HX_STACK_LINE(725)
														Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
														HX_STACK_LINE(725)
														Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
														HX_STACK_LINE(725)
														Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
														HX_STACK_LINE(725)
														Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
														HX_STACK_LINE(725)
														Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
														HX_STACK_LINE(725)
														Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
														HX_STACK_LINE(725)
														Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
														HX_STACK_LINE(725)
														Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
														HX_STACK_LINE(725)
														Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
														HX_STACK_LINE(725)
														Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
														HX_STACK_LINE(725)
														Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
														HX_STACK_LINE(725)
														Float om0 = parentWorld->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
														HX_STACK_LINE(725)
														Float om1 = parentWorld->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
														HX_STACK_LINE(725)
														Float om2 = parentWorld->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
														HX_STACK_LINE(725)
														Float om3 = parentWorld->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
														HX_STACK_LINE(725)
														Float om4 = parentWorld->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
														HX_STACK_LINE(725)
														Float om5 = parentWorld->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
														HX_STACK_LINE(725)
														Float om6 = parentWorld->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
														HX_STACK_LINE(725)
														Float om7 = parentWorld->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
														HX_STACK_LINE(725)
														Float om8 = parentWorld->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
														HX_STACK_LINE(725)
														Float om9 = parentWorld->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
														HX_STACK_LINE(725)
														Float om10 = parentWorld->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
														HX_STACK_LINE(725)
														Float om11 = parentWorld->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
														HX_STACK_LINE(725)
														Float om12 = parentWorld->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
														HX_STACK_LINE(725)
														Float om13 = parentWorld->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
														HX_STACK_LINE(725)
														Float om14 = parentWorld->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
														HX_STACK_LINE(725)
														Float om15 = parentWorld->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
														HX_STACK_LINE(725)
														result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
														HX_STACK_LINE(725)
														result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
														HX_STACK_LINE(725)
														result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
														HX_STACK_LINE(725)
														result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
														HX_STACK_LINE(725)
														result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
														HX_STACK_LINE(725)
														result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
														HX_STACK_LINE(725)
														result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
														HX_STACK_LINE(725)
														result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
														HX_STACK_LINE(725)
														result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
														HX_STACK_LINE(725)
														result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
														HX_STACK_LINE(725)
														result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
														HX_STACK_LINE(725)
														result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
														HX_STACK_LINE(725)
														result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
														HX_STACK_LINE(725)
														result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
														HX_STACK_LINE(725)
														result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
														HX_STACK_LINE(725)
														result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
														HX_STACK_LINE(725)
														result;
													}
												}
											}
											else{
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(725)
													Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
													HX_STACK_LINE(725)
													Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
													HX_STACK_LINE(725)
													Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
													HX_STACK_LINE(725)
													Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
													HX_STACK_LINE(725)
													Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
													HX_STACK_LINE(725)
													Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
													HX_STACK_LINE(725)
													Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
													HX_STACK_LINE(725)
													Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
													HX_STACK_LINE(725)
													Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
													HX_STACK_LINE(725)
													Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
													HX_STACK_LINE(725)
													Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
													HX_STACK_LINE(725)
													Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
													HX_STACK_LINE(725)
													Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
													HX_STACK_LINE(725)
													Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
													HX_STACK_LINE(725)
													Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
													HX_STACK_LINE(725)
													Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
													HX_STACK_LINE(725)
													Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
													HX_STACK_LINE(725)
													Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
													HX_STACK_LINE(725)
													Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
													HX_STACK_LINE(725)
													Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
													HX_STACK_LINE(725)
													Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
													HX_STACK_LINE(725)
													Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
													HX_STACK_LINE(725)
													Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
													HX_STACK_LINE(725)
													Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
													HX_STACK_LINE(725)
													Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
													HX_STACK_LINE(725)
													Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
													HX_STACK_LINE(725)
													Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
													HX_STACK_LINE(725)
													Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
													HX_STACK_LINE(725)
													Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
													HX_STACK_LINE(725)
													Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
													HX_STACK_LINE(725)
													Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
													HX_STACK_LINE(725)
													Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
													HX_STACK_LINE(725)
													result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
													HX_STACK_LINE(725)
													result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
													HX_STACK_LINE(725)
													result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
													HX_STACK_LINE(725)
													result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
													HX_STACK_LINE(725)
													result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
													HX_STACK_LINE(725)
													result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
													HX_STACK_LINE(725)
													result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
													HX_STACK_LINE(725)
													result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
													HX_STACK_LINE(725)
													result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
													HX_STACK_LINE(725)
													result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
													HX_STACK_LINE(725)
													result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
													HX_STACK_LINE(725)
													result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
													HX_STACK_LINE(725)
													result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
													HX_STACK_LINE(725)
													result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
													HX_STACK_LINE(725)
													result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
													HX_STACK_LINE(725)
													result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
													HX_STACK_LINE(725)
													result;
												}
											}
											HX_STACK_LINE(725)
											if (((mesh->_boundingInfo != null()))){
												HX_STACK_LINE(725)
												Float _g14 = ::Math_obj::max(mesh->scaling->x,mesh->scaling->y);		HX_STACK_VAR(_g14,"_g14");
												HX_STACK_LINE(725)
												mesh->_scaleFactor = _g14;
												HX_STACK_LINE(725)
												Float _g15 = ::Math_obj::max(mesh->_scaleFactor,mesh->scaling->z);		HX_STACK_VAR(_g15,"_g15");
												HX_STACK_LINE(725)
												mesh->_scaleFactor = _g15;
												struct _Function_11_1{
													inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",725,0x7c8236a5)
														{
															HX_STACK_LINE(725)
															Dynamic _g16 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g16,"_g16");
															HX_STACK_LINE(725)
															return (_g16 != null());
														}
														return null();
													}
												};
												HX_STACK_LINE(725)
												if (((  (((mesh->parent != null()))) ? bool(_Function_11_1::Block(mesh)) : bool(false) ))){
													HX_STACK_LINE(725)
													Dynamic _g17 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g17,"_g17");
													HX_STACK_LINE(725)
													Float _g18 = (mesh->_scaleFactor * _g17);		HX_STACK_VAR(_g18,"_g18");
													HX_STACK_LINE(725)
													mesh->_scaleFactor = _g18;
												}
												HX_STACK_LINE(725)
												mesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
												HX_STACK_LINE(725)
												{
													HX_STACK_LINE(725)
													int _g12 = (int)0;		HX_STACK_VAR(_g12,"_g12");
													HX_STACK_LINE(725)
													int _g4 = mesh->subMeshes->length;		HX_STACK_VAR(_g4,"_g4");
													HX_STACK_LINE(725)
													while((true)){
														HX_STACK_LINE(725)
														if ((!(((_g12 < _g4))))){
															HX_STACK_LINE(725)
															break;
														}
														HX_STACK_LINE(725)
														int subIndex = (_g12)++;		HX_STACK_VAR(subIndex,"subIndex");
														HX_STACK_LINE(725)
														::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
														HX_STACK_LINE(725)
														subMesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
													}
												}
											}
											HX_STACK_LINE(725)
											{
												HX_STACK_LINE(725)
												::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_absolutePosition;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(725)
												_this->x = mesh->_worldMatrix->m->__get((int)12);
												HX_STACK_LINE(725)
												_this->y = mesh->_worldMatrix->m->__get((int)13);
												HX_STACK_LINE(725)
												_this->z = mesh->_worldMatrix->m->__get((int)14);
											}
											HX_STACK_LINE(725)
											ret = mesh->_worldMatrix;
										}
										HX_STACK_LINE(725)
										ret;
									}
									HX_STACK_LINE(725)
									mesh->_renderId = (int)0;
								}
								struct _Function_7_1{
									inline static bool Block( hx::ObjectPtr< ::com::gamestudiohx::babylonhx::Scene_obj > __this,::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
										HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",725,0x7c8236a5)
										{
											HX_STACK_LINE(725)
											return (  (((  (((  (((  (((mesh->_renderId == (int)0))) ? bool(mesh->isEnabled()) : bool(false) ))) ? bool(mesh->isVisible) : bool(false) ))) ? bool((mesh->visibility > (int)0)) : bool(false) ))) ? bool(mesh->isInFrustum(__this->_frustumPlanes)) : bool(false) );
										}
										return null();
									}
								};
								HX_STACK_LINE(725)
								if (((  ((!(((mesh->_renderId == this->_renderId))))) ? bool(_Function_7_1::Block(this,mesh)) : bool(true) ))){
									HX_STACK_LINE(725)
									if (((mesh->_renderId == (int)0))){
										HX_STACK_LINE(725)
										this->_activeMeshes->push(mesh);
									}
									HX_STACK_LINE(725)
									mesh->_renderId = this->_renderId;
									HX_STACK_LINE(725)
									if (((mesh->skeleton != null()))){
										HX_STACK_LINE(725)
										int _g19 = this->_activeSkeletons->indexOf(mesh->skeleton);		HX_STACK_VAR(_g19,"_g19");
										HX_STACK_LINE(725)
										if (((_g19 != (int)-1))){
											HX_STACK_LINE(725)
											this->_activeSkeletons->pushNoDuplicate(mesh->skeleton);
										}
									}
									HX_STACK_LINE(725)
									Array< ::Dynamic > subMeshes = block->subMeshes->__get(meshIndex).StaticCast< Array< ::Dynamic > >();		HX_STACK_VAR(subMeshes,"subMeshes");
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										int _g5 = (int)0;		HX_STACK_VAR(_g5,"_g5");
										HX_STACK_LINE(725)
										int _g4 = subMeshes->length;		HX_STACK_VAR(_g4,"_g4");
										HX_STACK_LINE(725)
										while((true)){
											HX_STACK_LINE(725)
											if ((!(((_g5 < _g4))))){
												HX_STACK_LINE(725)
												break;
											}
											HX_STACK_LINE(725)
											int subIndex = (_g5)++;		HX_STACK_VAR(subIndex,"subIndex");
											HX_STACK_LINE(725)
											::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
											HX_STACK_LINE(725)
											if (((subMesh->_renderId == this->_renderId))){
												HX_STACK_LINE(725)
												continue;
											}
											HX_STACK_LINE(725)
											subMesh->_renderId = this->_renderId;
											HX_STACK_LINE(725)
											if (((  ((!(((mesh->subMeshes->length == (int)1))))) ? bool(subMesh->_boundingInfo->isInFrustrum(this->_frustumPlanes)) : bool(true) ))){
												HX_STACK_LINE(725)
												Dynamic material = subMesh->getMaterial();		HX_STACK_VAR(material,"material");
												HX_STACK_LINE(725)
												if (((material != null()))){
													HX_STACK_LINE(725)
													Dynamic _g20 = ::Reflect_obj::field(material,HX_CSTRING("getRenderTargetTextures"));		HX_STACK_VAR(_g20,"_g20");
													HX_STACK_LINE(725)
													if (((_g20 != null()))){
														HX_STACK_LINE(725)
														int _g21 = this->_processedMaterials->indexOf(material);		HX_STACK_VAR(_g21,"_g21");
														HX_STACK_LINE(725)
														if (((_g21 == (int)-1))){
															HX_STACK_LINE(725)
															this->_processedMaterials->push(material);
															HX_STACK_LINE(725)
															Dynamic _g22 = material->__Field(HX_CSTRING("getRenderTargetTextures"),true)();		HX_STACK_VAR(_g22,"_g22");
															HX_STACK_LINE(725)
															this->_renderTargets->concat(_g22);
														}
													}
													HX_STACK_LINE(725)
													hx::AddEq(this->_activeVertices,subMesh->verticesCount);
													HX_STACK_LINE(725)
													{
														HX_STACK_LINE(725)
														::com::gamestudiohx::babylonhx::rendering::RenderingManager _this = this->_renderingManager;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(725)
														::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh1 = subMesh->getMesh();		HX_STACK_VAR(mesh1,"mesh1");
														HX_STACK_LINE(725)
														int renderingGroupId = mesh1->renderingGroupId;		HX_STACK_VAR(renderingGroupId,"renderingGroupId");
														HX_STACK_LINE(725)
														if (((_this->_renderingGroups->length <= renderingGroupId))){
															HX_STACK_LINE(725)
															_this->_renderingGroups[renderingGroupId] = ::com::gamestudiohx::babylonhx::rendering::RenderingGroup_obj::__new(renderingGroupId,_this->_scene);
														}
														HX_STACK_LINE(725)
														_this->_renderingGroups->__get(renderingGroupId).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingGroup >()->dispatch(subMesh);
													}
												}
											}
										}
									}
								}
								else{
									HX_STACK_LINE(725)
									mesh->_renderId = -(this->_renderId);
								}
							}
						}
					}
				}
			}
			else{
				HX_STACK_LINE(725)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(725)
				int _g = this->meshes->length;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(725)
				while((true)){
					HX_STACK_LINE(725)
					if ((!(((_g1 < _g))))){
						HX_STACK_LINE(725)
						break;
					}
					HX_STACK_LINE(725)
					int meshIndex = (_g1)++;		HX_STACK_VAR(meshIndex,"meshIndex");
					HX_STACK_LINE(725)
					::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = this->meshes->__get(meshIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
					HX_STACK_LINE(725)
					int _g23 = mesh->getTotalVertices();		HX_STACK_VAR(_g23,"_g23");
					HX_STACK_LINE(725)
					hx::AddEq(this->_totalVertices,_g23);
					HX_STACK_LINE(725)
					if ((!(mesh->isReady()))){
						HX_STACK_LINE(725)
						continue;
					}
					HX_STACK_LINE(725)
					{
						HX_STACK_LINE(725)
						bool force = false;		HX_STACK_VAR(force,"force");
						HX_STACK_LINE(725)
						::com::gamestudiohx::babylonhx::tools::math::Matrix ret = mesh->_worldMatrix;		HX_STACK_VAR(ret,"ret");
						struct _Function_5_1{
							inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
								HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",725,0x7c8236a5)
								{
									HX_STACK_LINE(725)
									int _g24 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g24,"_g24");
									HX_STACK_LINE(725)
									return (  ((!(((mesh->_currentRenderId == _g24))))) ? bool(mesh->isSynchronized(null())) : bool(true) );
								}
								return null();
							}
						};
						HX_STACK_LINE(725)
						if (((  ((!(force))) ? bool(_Function_5_1::Block(mesh)) : bool(false) ))){
							HX_STACK_LINE(725)
							mesh->_childrenFlag = (int)0;
						}
						else{
							HX_STACK_LINE(725)
							mesh->_childrenFlag = (int)1;
							HX_STACK_LINE(725)
							mesh->_cache->__Field(HX_CSTRING("position"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->position);
							HX_STACK_LINE(725)
							mesh->_cache->__Field(HX_CSTRING("scaling"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->scaling);
							HX_STACK_LINE(725)
							mesh->_cache->__FieldRef(HX_CSTRING("pivotMatrixUpdated")) = false;
							HX_STACK_LINE(725)
							int _g25 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g25,"_g25");
							HX_STACK_LINE(725)
							mesh->_currentRenderId = _g25;
							HX_STACK_LINE(725)
							{
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localScaling;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(725)
								result->m[(int)0] = mesh->scaling->x;
								HX_STACK_LINE(725)
								result->m[(int)1] = (int)0;
								HX_STACK_LINE(725)
								result->m[(int)2] = (int)0;
								HX_STACK_LINE(725)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(725)
								result->m[(int)4] = (int)0;
								HX_STACK_LINE(725)
								result->m[(int)5] = mesh->scaling->y;
								HX_STACK_LINE(725)
								result->m[(int)6] = (int)0;
								HX_STACK_LINE(725)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(725)
								result->m[(int)8] = (int)0;
								HX_STACK_LINE(725)
								result->m[(int)9] = (int)0;
								HX_STACK_LINE(725)
								result->m[(int)10] = mesh->scaling->z;
								HX_STACK_LINE(725)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(725)
								result->m[(int)12] = (int)0;
								HX_STACK_LINE(725)
								result->m[(int)13] = (int)0;
								HX_STACK_LINE(725)
								result->m[(int)14] = (int)0;
								HX_STACK_LINE(725)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(725)
								result;
							}
							HX_STACK_LINE(725)
							if (((mesh->rotationQuaternion != null()))){
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Quaternion _this = mesh->rotationQuaternion;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(725)
									Float xx = (_this->x * _this->x);		HX_STACK_VAR(xx,"xx");
									HX_STACK_LINE(725)
									Float yy = (_this->y * _this->y);		HX_STACK_VAR(yy,"yy");
									HX_STACK_LINE(725)
									Float zz = (_this->z * _this->z);		HX_STACK_VAR(zz,"zz");
									HX_STACK_LINE(725)
									Float xy = (_this->x * _this->y);		HX_STACK_VAR(xy,"xy");
									HX_STACK_LINE(725)
									Float zw = (_this->z * _this->w);		HX_STACK_VAR(zw,"zw");
									HX_STACK_LINE(725)
									Float zx = (_this->z * _this->x);		HX_STACK_VAR(zx,"zx");
									HX_STACK_LINE(725)
									Float yw = (_this->y * _this->w);		HX_STACK_VAR(yw,"yw");
									HX_STACK_LINE(725)
									Float yz = (_this->y * _this->z);		HX_STACK_VAR(yz,"yz");
									HX_STACK_LINE(725)
									Float xw = (_this->x * _this->w);		HX_STACK_VAR(xw,"xw");
									HX_STACK_LINE(725)
									result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
									HX_STACK_LINE(725)
									result->m[(int)1] = (2.0 * ((xy + zw)));
									HX_STACK_LINE(725)
									result->m[(int)2] = (2.0 * ((zx - yw)));
									HX_STACK_LINE(725)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)4] = (2.0 * ((xy - zw)));
									HX_STACK_LINE(725)
									result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
									HX_STACK_LINE(725)
									result->m[(int)6] = (2.0 * ((yz + xw)));
									HX_STACK_LINE(725)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)8] = (2.0 * ((zx + yw)));
									HX_STACK_LINE(725)
									result->m[(int)9] = (2.0 * ((yz - xw)));
									HX_STACK_LINE(725)
									result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
									HX_STACK_LINE(725)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)12] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)13] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)14] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(725)
									result;
								}
								HX_STACK_LINE(725)
								mesh->_cache->__Field(HX_CSTRING("rotationQuaternion"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotationQuaternion);
							}
							else{
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Quaternion tempQuaternion = ::com::gamestudiohx::babylonhx::tools::math::Quaternion_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tempQuaternion,"tempQuaternion");
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Quaternion _g26;		HX_STACK_VAR(_g26,"_g26");
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										Float halfRoll = (mesh->rotation->z * 0.5);		HX_STACK_VAR(halfRoll,"halfRoll");
										HX_STACK_LINE(725)
										Float halfPitch = (mesh->rotation->x * 0.5);		HX_STACK_VAR(halfPitch,"halfPitch");
										HX_STACK_LINE(725)
										Float halfYaw = (mesh->rotation->y * 0.5);		HX_STACK_VAR(halfYaw,"halfYaw");
										HX_STACK_LINE(725)
										Float sinRoll = ::Math_obj::sin(halfRoll);		HX_STACK_VAR(sinRoll,"sinRoll");
										HX_STACK_LINE(725)
										Float cosRoll = ::Math_obj::cos(halfRoll);		HX_STACK_VAR(cosRoll,"cosRoll");
										HX_STACK_LINE(725)
										Float sinPitch = ::Math_obj::sin(halfPitch);		HX_STACK_VAR(sinPitch,"sinPitch");
										HX_STACK_LINE(725)
										Float cosPitch = ::Math_obj::cos(halfPitch);		HX_STACK_VAR(cosPitch,"cosPitch");
										HX_STACK_LINE(725)
										Float sinYaw = ::Math_obj::sin(halfYaw);		HX_STACK_VAR(sinYaw,"sinYaw");
										HX_STACK_LINE(725)
										Float cosYaw = ::Math_obj::cos(halfYaw);		HX_STACK_VAR(cosYaw,"cosYaw");
										HX_STACK_LINE(725)
										tempQuaternion->x = (((cosYaw * sinPitch) * cosRoll) + ((sinYaw * cosPitch) * sinRoll));
										HX_STACK_LINE(725)
										tempQuaternion->y = (((sinYaw * cosPitch) * cosRoll) - ((cosYaw * sinPitch) * sinRoll));
										HX_STACK_LINE(725)
										tempQuaternion->z = (((cosYaw * cosPitch) * sinRoll) - ((sinYaw * sinPitch) * cosRoll));
										HX_STACK_LINE(725)
										tempQuaternion->w = (((cosYaw * cosPitch) * cosRoll) + ((sinYaw * sinPitch) * sinRoll));
										HX_STACK_LINE(725)
										_g26 = tempQuaternion;
									}
									HX_STACK_LINE(725)
									tempQuaternion = _g26;
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										Float xx = (tempQuaternion->x * tempQuaternion->x);		HX_STACK_VAR(xx,"xx");
										HX_STACK_LINE(725)
										Float yy = (tempQuaternion->y * tempQuaternion->y);		HX_STACK_VAR(yy,"yy");
										HX_STACK_LINE(725)
										Float zz = (tempQuaternion->z * tempQuaternion->z);		HX_STACK_VAR(zz,"zz");
										HX_STACK_LINE(725)
										Float xy = (tempQuaternion->x * tempQuaternion->y);		HX_STACK_VAR(xy,"xy");
										HX_STACK_LINE(725)
										Float zw = (tempQuaternion->z * tempQuaternion->w);		HX_STACK_VAR(zw,"zw");
										HX_STACK_LINE(725)
										Float zx = (tempQuaternion->z * tempQuaternion->x);		HX_STACK_VAR(zx,"zx");
										HX_STACK_LINE(725)
										Float yw = (tempQuaternion->y * tempQuaternion->w);		HX_STACK_VAR(yw,"yw");
										HX_STACK_LINE(725)
										Float yz = (tempQuaternion->y * tempQuaternion->z);		HX_STACK_VAR(yz,"yz");
										HX_STACK_LINE(725)
										Float xw = (tempQuaternion->x * tempQuaternion->w);		HX_STACK_VAR(xw,"xw");
										HX_STACK_LINE(725)
										result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
										HX_STACK_LINE(725)
										result->m[(int)1] = (2.0 * ((xy + zw)));
										HX_STACK_LINE(725)
										result->m[(int)2] = (2.0 * ((zx - yw)));
										HX_STACK_LINE(725)
										result->m[(int)3] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)4] = (2.0 * ((xy - zw)));
										HX_STACK_LINE(725)
										result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
										HX_STACK_LINE(725)
										result->m[(int)6] = (2.0 * ((yz + xw)));
										HX_STACK_LINE(725)
										result->m[(int)7] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)8] = (2.0 * ((zx + yw)));
										HX_STACK_LINE(725)
										result->m[(int)9] = (2.0 * ((yz - xw)));
										HX_STACK_LINE(725)
										result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
										HX_STACK_LINE(725)
										result->m[(int)11] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)12] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)13] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)14] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)15] = 1.0;
										HX_STACK_LINE(725)
										result;
									}
								}
								HX_STACK_LINE(725)
								mesh->_cache->__Field(HX_CSTRING("rotation"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotation);
							}
							HX_STACK_LINE(725)
							if ((mesh->infiniteDistance)){
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::cameras::Camera camera1 = mesh->_scene->activeCamera;		HX_STACK_VAR(camera1,"camera1");
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										result->m[(int)0] = 1.0;
										HX_STACK_LINE(725)
										result->m[(int)1] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)2] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)3] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)4] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)5] = 1.0;
										HX_STACK_LINE(725)
										result->m[(int)6] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)7] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)8] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)9] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)10] = 1.0;
										HX_STACK_LINE(725)
										result->m[(int)11] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)12] = (mesh->position->x + camera1->position->x);
										HX_STACK_LINE(725)
										result->m[(int)13] = (mesh->position->y + camera1->position->y);
										HX_STACK_LINE(725)
										result->m[(int)14] = (mesh->position->z + camera1->position->z);
										HX_STACK_LINE(725)
										result->m[(int)15] = 1.0;
										HX_STACK_LINE(725)
										result;
									}
								}
							}
							else{
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									result->m[(int)0] = 1.0;
									HX_STACK_LINE(725)
									result->m[(int)1] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)2] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)4] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)5] = 1.0;
									HX_STACK_LINE(725)
									result->m[(int)6] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)8] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)9] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)10] = 1.0;
									HX_STACK_LINE(725)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(725)
									result->m[(int)12] = mesh->position->x;
									HX_STACK_LINE(725)
									result->m[(int)13] = mesh->position->y;
									HX_STACK_LINE(725)
									result->m[(int)14] = mesh->position->z;
									HX_STACK_LINE(725)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(725)
									result;
								}
							}
							HX_STACK_LINE(725)
							{
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_pivotMatrix;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localScaling;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									Array< Float > result = mesh->_localPivotScaling->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(725)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(725)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(725)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(725)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(725)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(725)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(725)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(725)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(725)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(725)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(725)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(725)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(725)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(725)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(725)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(725)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(725)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(725)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(725)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(725)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(725)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(725)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(725)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(725)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(725)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(725)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(725)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(725)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(725)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(725)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(725)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(725)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(725)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(725)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(725)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(725)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(725)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(725)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(725)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(725)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(725)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(725)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(725)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(725)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(725)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(725)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(725)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(725)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(725)
									result;
								}
							}
							HX_STACK_LINE(725)
							{
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScaling;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localRotation;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(725)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(725)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(725)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(725)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(725)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(725)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(725)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(725)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(725)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(725)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(725)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(725)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(725)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(725)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(725)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(725)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(725)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(725)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(725)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(725)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(725)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(725)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(725)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(725)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(725)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(725)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(725)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(725)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(725)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(725)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(725)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(725)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(725)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(725)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(725)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(725)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(725)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(725)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(725)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(725)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(725)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(725)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(725)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(725)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(725)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(725)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(725)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(725)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(725)
									result;
								}
							}
							HX_STACK_LINE(725)
							if (((mesh->billboardMode != ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE))){
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 localPosition;		HX_STACK_VAR(localPosition,"localPosition");
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->position;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(725)
									localPosition = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
								}
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 zero;		HX_STACK_VAR(zero,"zero");
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_scene->activeCamera->position;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(725)
									zero = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
								}
								HX_STACK_LINE(725)
								if (((bool((mesh->parent != null())) && bool((mesh->parent->position != null()))))){
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = mesh->parent->position;		HX_STACK_VAR(otherVector,"otherVector");
										HX_STACK_LINE(725)
										hx::AddEq(localPosition->x,otherVector->x);
										HX_STACK_LINE(725)
										hx::AddEq(localPosition->y,otherVector->y);
										HX_STACK_LINE(725)
										hx::AddEq(localPosition->z,otherVector->z);
									}
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(725)
										{
											HX_STACK_LINE(725)
											result->m[(int)0] = 1.0;
											HX_STACK_LINE(725)
											result->m[(int)1] = (int)0;
											HX_STACK_LINE(725)
											result->m[(int)2] = (int)0;
											HX_STACK_LINE(725)
											result->m[(int)3] = (int)0;
											HX_STACK_LINE(725)
											result->m[(int)4] = (int)0;
											HX_STACK_LINE(725)
											result->m[(int)5] = 1.0;
											HX_STACK_LINE(725)
											result->m[(int)6] = (int)0;
											HX_STACK_LINE(725)
											result->m[(int)7] = (int)0;
											HX_STACK_LINE(725)
											result->m[(int)8] = (int)0;
											HX_STACK_LINE(725)
											result->m[(int)9] = (int)0;
											HX_STACK_LINE(725)
											result->m[(int)10] = 1.0;
											HX_STACK_LINE(725)
											result->m[(int)11] = (int)0;
											HX_STACK_LINE(725)
											result->m[(int)12] = localPosition->x;
											HX_STACK_LINE(725)
											result->m[(int)13] = localPosition->y;
											HX_STACK_LINE(725)
											result->m[(int)14] = localPosition->z;
											HX_STACK_LINE(725)
											result->m[(int)15] = 1.0;
											HX_STACK_LINE(725)
											result;
										}
									}
								}
								HX_STACK_LINE(725)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))) == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))){
									HX_STACK_LINE(725)
									zero = mesh->_scene->activeCamera->position;
								}
								else{
									HX_STACK_LINE(725)
									if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_X))) != (int)0))){
										HX_STACK_LINE(725)
										zero->x = (localPosition->x + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
									}
									HX_STACK_LINE(725)
									if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Y))) != (int)0))){
										HX_STACK_LINE(725)
										zero->y = (localPosition->y + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
									}
									HX_STACK_LINE(725)
									if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Z))) != (int)0))){
										HX_STACK_LINE(725)
										zero->z = (localPosition->z + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
									}
								}
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 up = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Up();		HX_STACK_VAR(up,"up");
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localBillboard;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 xAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(xAxis,"xAxis");
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 yAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(yAxis,"yAxis");
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 zAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(zAxis,"zAxis");
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										zAxis->x = (zero->x - localPosition->x);
										HX_STACK_LINE(725)
										zAxis->y = (zero->y - localPosition->y);
										HX_STACK_LINE(725)
										zAxis->z = (zero->z - localPosition->z);
									}
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										Float len = ::Math_obj::sqrt((((zAxis->x * zAxis->x) + (zAxis->y * zAxis->y)) + (zAxis->z * zAxis->z)));		HX_STACK_VAR(len,"len");
										HX_STACK_LINE(725)
										if (((len != (int)0))){
											HX_STACK_LINE(725)
											Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
											HX_STACK_LINE(725)
											hx::MultEq(zAxis->x,num);
											HX_STACK_LINE(725)
											hx::MultEq(zAxis->y,num);
											HX_STACK_LINE(725)
											hx::MultEq(zAxis->z,num);
										}
									}
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										xAxis->x = ((up->y * zAxis->z) - (up->z * zAxis->y));
										HX_STACK_LINE(725)
										xAxis->y = ((up->z * zAxis->x) - (up->x * zAxis->z));
										HX_STACK_LINE(725)
										xAxis->z = ((up->x * zAxis->y) - (up->y * zAxis->x));
									}
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										Float len = ::Math_obj::sqrt((((xAxis->x * xAxis->x) + (xAxis->y * xAxis->y)) + (xAxis->z * xAxis->z)));		HX_STACK_VAR(len,"len");
										HX_STACK_LINE(725)
										if (((len != (int)0))){
											HX_STACK_LINE(725)
											Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
											HX_STACK_LINE(725)
											hx::MultEq(xAxis->x,num);
											HX_STACK_LINE(725)
											hx::MultEq(xAxis->y,num);
											HX_STACK_LINE(725)
											hx::MultEq(xAxis->z,num);
										}
									}
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										yAxis->x = ((zAxis->y * xAxis->z) - (zAxis->z * xAxis->y));
										HX_STACK_LINE(725)
										yAxis->y = ((zAxis->z * xAxis->x) - (zAxis->x * xAxis->z));
										HX_STACK_LINE(725)
										yAxis->z = ((zAxis->x * xAxis->y) - (zAxis->y * xAxis->x));
									}
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										Float len = ::Math_obj::sqrt((((yAxis->x * yAxis->x) + (yAxis->y * yAxis->y)) + (yAxis->z * yAxis->z)));		HX_STACK_VAR(len,"len");
										HX_STACK_LINE(725)
										if (((len != (int)0))){
											HX_STACK_LINE(725)
											Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
											HX_STACK_LINE(725)
											hx::MultEq(yAxis->x,num);
											HX_STACK_LINE(725)
											hx::MultEq(yAxis->y,num);
											HX_STACK_LINE(725)
											hx::MultEq(yAxis->z,num);
										}
									}
									HX_STACK_LINE(725)
									Float ex = -(((((xAxis->x * localPosition->x) + (xAxis->y * localPosition->y)) + (xAxis->z * localPosition->z))));		HX_STACK_VAR(ex,"ex");
									HX_STACK_LINE(725)
									Float ey = -(((((yAxis->x * localPosition->x) + (yAxis->y * localPosition->y)) + (yAxis->z * localPosition->z))));		HX_STACK_VAR(ey,"ey");
									HX_STACK_LINE(725)
									Float ez = -(((((zAxis->x * localPosition->x) + (zAxis->y * localPosition->y)) + (zAxis->z * localPosition->z))));		HX_STACK_VAR(ez,"ez");
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										result->m[(int)0] = xAxis->x;
										HX_STACK_LINE(725)
										result->m[(int)1] = yAxis->x;
										HX_STACK_LINE(725)
										result->m[(int)2] = zAxis->x;
										HX_STACK_LINE(725)
										result->m[(int)3] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)4] = xAxis->y;
										HX_STACK_LINE(725)
										result->m[(int)5] = yAxis->y;
										HX_STACK_LINE(725)
										result->m[(int)6] = zAxis->y;
										HX_STACK_LINE(725)
										result->m[(int)7] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)8] = xAxis->z;
										HX_STACK_LINE(725)
										result->m[(int)9] = yAxis->z;
										HX_STACK_LINE(725)
										result->m[(int)10] = zAxis->z;
										HX_STACK_LINE(725)
										result->m[(int)11] = (int)0;
										HX_STACK_LINE(725)
										result->m[(int)12] = ex;
										HX_STACK_LINE(725)
										result->m[(int)13] = ey;
										HX_STACK_LINE(725)
										result->m[(int)14] = ez;
										HX_STACK_LINE(725)
										result->m[(int)15] = (int)1;
										HX_STACK_LINE(725)
										result;
									}
								}
								HX_STACK_LINE(725)
								mesh->_localBillboard->m[(int)12] = mesh->_localBillboard->m[(int)13] = mesh->_localBillboard->m[(int)14] = (int)0;
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localBillboard;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
										HX_STACK_LINE(725)
										Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
										HX_STACK_LINE(725)
										Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
										HX_STACK_LINE(725)
										Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
										HX_STACK_LINE(725)
										Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
										HX_STACK_LINE(725)
										Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
										HX_STACK_LINE(725)
										Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
										HX_STACK_LINE(725)
										Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
										HX_STACK_LINE(725)
										Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
										HX_STACK_LINE(725)
										Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
										HX_STACK_LINE(725)
										Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
										HX_STACK_LINE(725)
										Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
										HX_STACK_LINE(725)
										Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
										HX_STACK_LINE(725)
										Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
										HX_STACK_LINE(725)
										Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
										HX_STACK_LINE(725)
										Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
										HX_STACK_LINE(725)
										Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
										HX_STACK_LINE(725)
										Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
										HX_STACK_LINE(725)
										Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
										HX_STACK_LINE(725)
										Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
										HX_STACK_LINE(725)
										Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
										HX_STACK_LINE(725)
										Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
										HX_STACK_LINE(725)
										Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
										HX_STACK_LINE(725)
										Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
										HX_STACK_LINE(725)
										Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
										HX_STACK_LINE(725)
										Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
										HX_STACK_LINE(725)
										Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
										HX_STACK_LINE(725)
										Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
										HX_STACK_LINE(725)
										Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
										HX_STACK_LINE(725)
										Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
										HX_STACK_LINE(725)
										Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
										HX_STACK_LINE(725)
										Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
										HX_STACK_LINE(725)
										Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
										HX_STACK_LINE(725)
										Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
										HX_STACK_LINE(725)
										Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
										HX_STACK_LINE(725)
										Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
										HX_STACK_LINE(725)
										Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
										HX_STACK_LINE(725)
										Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
										HX_STACK_LINE(725)
										Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
										HX_STACK_LINE(725)
										_this->m[(int)0] = (l23 * l27);
										HX_STACK_LINE(725)
										_this->m[(int)4] = (l24 * l27);
										HX_STACK_LINE(725)
										_this->m[(int)8] = (l25 * l27);
										HX_STACK_LINE(725)
										_this->m[(int)12] = (l26 * l27);
										HX_STACK_LINE(725)
										_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
										HX_STACK_LINE(725)
										_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
										HX_STACK_LINE(725)
										_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
										HX_STACK_LINE(725)
										_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
										HX_STACK_LINE(725)
										_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
										HX_STACK_LINE(725)
										_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
										HX_STACK_LINE(725)
										_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
										HX_STACK_LINE(725)
										_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
										HX_STACK_LINE(725)
										_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
										HX_STACK_LINE(725)
										_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
										HX_STACK_LINE(725)
										_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
										HX_STACK_LINE(725)
										_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
									}
								}
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localBillboard;		HX_STACK_VAR(other,"other");
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(725)
										Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
										HX_STACK_LINE(725)
										Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
										HX_STACK_LINE(725)
										Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
										HX_STACK_LINE(725)
										Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
										HX_STACK_LINE(725)
										Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
										HX_STACK_LINE(725)
										Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
										HX_STACK_LINE(725)
										Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
										HX_STACK_LINE(725)
										Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
										HX_STACK_LINE(725)
										Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
										HX_STACK_LINE(725)
										Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
										HX_STACK_LINE(725)
										Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
										HX_STACK_LINE(725)
										Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
										HX_STACK_LINE(725)
										Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
										HX_STACK_LINE(725)
										Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
										HX_STACK_LINE(725)
										Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
										HX_STACK_LINE(725)
										Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
										HX_STACK_LINE(725)
										Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
										HX_STACK_LINE(725)
										Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
										HX_STACK_LINE(725)
										Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
										HX_STACK_LINE(725)
										Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
										HX_STACK_LINE(725)
										Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
										HX_STACK_LINE(725)
										Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
										HX_STACK_LINE(725)
										Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
										HX_STACK_LINE(725)
										Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
										HX_STACK_LINE(725)
										Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
										HX_STACK_LINE(725)
										Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
										HX_STACK_LINE(725)
										Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
										HX_STACK_LINE(725)
										Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
										HX_STACK_LINE(725)
										Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
										HX_STACK_LINE(725)
										Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
										HX_STACK_LINE(725)
										Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
										HX_STACK_LINE(725)
										Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
										HX_STACK_LINE(725)
										result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
										HX_STACK_LINE(725)
										result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
										HX_STACK_LINE(725)
										result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
										HX_STACK_LINE(725)
										result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
										HX_STACK_LINE(725)
										result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
										HX_STACK_LINE(725)
										result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
										HX_STACK_LINE(725)
										result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
										HX_STACK_LINE(725)
										result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
										HX_STACK_LINE(725)
										result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
										HX_STACK_LINE(725)
										result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
										HX_STACK_LINE(725)
										result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
										HX_STACK_LINE(725)
										result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
										HX_STACK_LINE(725)
										result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
										HX_STACK_LINE(725)
										result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
										HX_STACK_LINE(725)
										result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
										HX_STACK_LINE(725)
										result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
										HX_STACK_LINE(725)
										result;
									}
								}
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_rotateYByPI;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localWorld;		HX_STACK_VAR(other,"other");
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(725)
										Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
										HX_STACK_LINE(725)
										Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
										HX_STACK_LINE(725)
										Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
										HX_STACK_LINE(725)
										Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
										HX_STACK_LINE(725)
										Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
										HX_STACK_LINE(725)
										Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
										HX_STACK_LINE(725)
										Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
										HX_STACK_LINE(725)
										Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
										HX_STACK_LINE(725)
										Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
										HX_STACK_LINE(725)
										Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
										HX_STACK_LINE(725)
										Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
										HX_STACK_LINE(725)
										Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
										HX_STACK_LINE(725)
										Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
										HX_STACK_LINE(725)
										Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
										HX_STACK_LINE(725)
										Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
										HX_STACK_LINE(725)
										Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
										HX_STACK_LINE(725)
										Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
										HX_STACK_LINE(725)
										Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
										HX_STACK_LINE(725)
										Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
										HX_STACK_LINE(725)
										Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
										HX_STACK_LINE(725)
										Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
										HX_STACK_LINE(725)
										Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
										HX_STACK_LINE(725)
										Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
										HX_STACK_LINE(725)
										Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
										HX_STACK_LINE(725)
										Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
										HX_STACK_LINE(725)
										Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
										HX_STACK_LINE(725)
										Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
										HX_STACK_LINE(725)
										Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
										HX_STACK_LINE(725)
										Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
										HX_STACK_LINE(725)
										Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
										HX_STACK_LINE(725)
										Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
										HX_STACK_LINE(725)
										Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
										HX_STACK_LINE(725)
										result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
										HX_STACK_LINE(725)
										result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
										HX_STACK_LINE(725)
										result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
										HX_STACK_LINE(725)
										result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
										HX_STACK_LINE(725)
										result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
										HX_STACK_LINE(725)
										result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
										HX_STACK_LINE(725)
										result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
										HX_STACK_LINE(725)
										result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
										HX_STACK_LINE(725)
										result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
										HX_STACK_LINE(725)
										result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
										HX_STACK_LINE(725)
										result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
										HX_STACK_LINE(725)
										result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
										HX_STACK_LINE(725)
										result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
										HX_STACK_LINE(725)
										result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
										HX_STACK_LINE(725)
										result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
										HX_STACK_LINE(725)
										result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
										HX_STACK_LINE(725)
										result;
									}
								}
							}
							struct _Function_6_1{
								inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
									HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",725,0x7c8236a5)
									{
										HX_STACK_LINE(725)
										::com::gamestudiohx::babylonhx::tools::math::Matrix _g27 = mesh->parent->getWorldMatrix();		HX_STACK_VAR(_g27,"_g27");
										HX_STACK_LINE(725)
										return (_g27 != null());
									}
									return null();
								}
							};
							HX_STACK_LINE(725)
							if (((  (((  (((mesh->parent != null()))) ? bool(_Function_6_1::Block(mesh)) : bool(false) ))) ? bool((mesh->billboardMode == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE)) : bool(false) ))){
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(725)
										Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
										HX_STACK_LINE(725)
										Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
										HX_STACK_LINE(725)
										Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
										HX_STACK_LINE(725)
										Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
										HX_STACK_LINE(725)
										Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
										HX_STACK_LINE(725)
										Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
										HX_STACK_LINE(725)
										Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
										HX_STACK_LINE(725)
										Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
										HX_STACK_LINE(725)
										Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
										HX_STACK_LINE(725)
										Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
										HX_STACK_LINE(725)
										Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
										HX_STACK_LINE(725)
										Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
										HX_STACK_LINE(725)
										Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
										HX_STACK_LINE(725)
										Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
										HX_STACK_LINE(725)
										Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
										HX_STACK_LINE(725)
										Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
										HX_STACK_LINE(725)
										Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
										HX_STACK_LINE(725)
										Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
										HX_STACK_LINE(725)
										Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
										HX_STACK_LINE(725)
										Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
										HX_STACK_LINE(725)
										Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
										HX_STACK_LINE(725)
										Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
										HX_STACK_LINE(725)
										Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
										HX_STACK_LINE(725)
										Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
										HX_STACK_LINE(725)
										Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
										HX_STACK_LINE(725)
										Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
										HX_STACK_LINE(725)
										Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
										HX_STACK_LINE(725)
										Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
										HX_STACK_LINE(725)
										Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
										HX_STACK_LINE(725)
										Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
										HX_STACK_LINE(725)
										Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
										HX_STACK_LINE(725)
										Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
										HX_STACK_LINE(725)
										result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
										HX_STACK_LINE(725)
										result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
										HX_STACK_LINE(725)
										result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
										HX_STACK_LINE(725)
										result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
										HX_STACK_LINE(725)
										result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
										HX_STACK_LINE(725)
										result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
										HX_STACK_LINE(725)
										result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
										HX_STACK_LINE(725)
										result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
										HX_STACK_LINE(725)
										result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
										HX_STACK_LINE(725)
										result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
										HX_STACK_LINE(725)
										result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
										HX_STACK_LINE(725)
										result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
										HX_STACK_LINE(725)
										result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
										HX_STACK_LINE(725)
										result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
										HX_STACK_LINE(725)
										result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
										HX_STACK_LINE(725)
										result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
										HX_STACK_LINE(725)
										result;
									}
								}
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::tools::math::Matrix parentWorld = mesh->parent->getWorldMatrix();		HX_STACK_VAR(parentWorld,"parentWorld");
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localWorld;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(725)
									{
										HX_STACK_LINE(725)
										Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(725)
										Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
										HX_STACK_LINE(725)
										Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
										HX_STACK_LINE(725)
										Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
										HX_STACK_LINE(725)
										Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
										HX_STACK_LINE(725)
										Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
										HX_STACK_LINE(725)
										Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
										HX_STACK_LINE(725)
										Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
										HX_STACK_LINE(725)
										Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
										HX_STACK_LINE(725)
										Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
										HX_STACK_LINE(725)
										Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
										HX_STACK_LINE(725)
										Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
										HX_STACK_LINE(725)
										Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
										HX_STACK_LINE(725)
										Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
										HX_STACK_LINE(725)
										Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
										HX_STACK_LINE(725)
										Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
										HX_STACK_LINE(725)
										Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
										HX_STACK_LINE(725)
										Float om0 = parentWorld->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
										HX_STACK_LINE(725)
										Float om1 = parentWorld->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
										HX_STACK_LINE(725)
										Float om2 = parentWorld->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
										HX_STACK_LINE(725)
										Float om3 = parentWorld->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
										HX_STACK_LINE(725)
										Float om4 = parentWorld->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
										HX_STACK_LINE(725)
										Float om5 = parentWorld->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
										HX_STACK_LINE(725)
										Float om6 = parentWorld->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
										HX_STACK_LINE(725)
										Float om7 = parentWorld->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
										HX_STACK_LINE(725)
										Float om8 = parentWorld->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
										HX_STACK_LINE(725)
										Float om9 = parentWorld->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
										HX_STACK_LINE(725)
										Float om10 = parentWorld->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
										HX_STACK_LINE(725)
										Float om11 = parentWorld->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
										HX_STACK_LINE(725)
										Float om12 = parentWorld->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
										HX_STACK_LINE(725)
										Float om13 = parentWorld->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
										HX_STACK_LINE(725)
										Float om14 = parentWorld->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
										HX_STACK_LINE(725)
										Float om15 = parentWorld->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
										HX_STACK_LINE(725)
										result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
										HX_STACK_LINE(725)
										result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
										HX_STACK_LINE(725)
										result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
										HX_STACK_LINE(725)
										result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
										HX_STACK_LINE(725)
										result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
										HX_STACK_LINE(725)
										result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
										HX_STACK_LINE(725)
										result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
										HX_STACK_LINE(725)
										result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
										HX_STACK_LINE(725)
										result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
										HX_STACK_LINE(725)
										result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
										HX_STACK_LINE(725)
										result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
										HX_STACK_LINE(725)
										result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
										HX_STACK_LINE(725)
										result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
										HX_STACK_LINE(725)
										result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
										HX_STACK_LINE(725)
										result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
										HX_STACK_LINE(725)
										result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
										HX_STACK_LINE(725)
										result;
									}
								}
							}
							else{
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(725)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(725)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(725)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(725)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(725)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(725)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(725)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(725)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(725)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(725)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(725)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(725)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(725)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(725)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(725)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(725)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(725)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(725)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(725)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(725)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(725)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(725)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(725)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(725)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(725)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(725)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(725)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(725)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(725)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(725)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(725)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(725)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(725)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(725)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(725)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(725)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(725)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(725)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(725)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(725)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(725)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(725)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(725)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(725)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(725)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(725)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(725)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(725)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(725)
									result;
								}
							}
							HX_STACK_LINE(725)
							if (((mesh->_boundingInfo != null()))){
								HX_STACK_LINE(725)
								Float _g28 = ::Math_obj::max(mesh->scaling->x,mesh->scaling->y);		HX_STACK_VAR(_g28,"_g28");
								HX_STACK_LINE(725)
								mesh->_scaleFactor = _g28;
								HX_STACK_LINE(725)
								Float _g29 = ::Math_obj::max(mesh->_scaleFactor,mesh->scaling->z);		HX_STACK_VAR(_g29,"_g29");
								HX_STACK_LINE(725)
								mesh->_scaleFactor = _g29;
								struct _Function_7_1{
									inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
										HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",725,0x7c8236a5)
										{
											HX_STACK_LINE(725)
											Dynamic _g30 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g30,"_g30");
											HX_STACK_LINE(725)
											return (_g30 != null());
										}
										return null();
									}
								};
								HX_STACK_LINE(725)
								if (((  (((mesh->parent != null()))) ? bool(_Function_7_1::Block(mesh)) : bool(false) ))){
									HX_STACK_LINE(725)
									Dynamic _g31 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g31,"_g31");
									HX_STACK_LINE(725)
									Float _g32 = (mesh->_scaleFactor * _g31);		HX_STACK_VAR(_g32,"_g32");
									HX_STACK_LINE(725)
									mesh->_scaleFactor = _g32;
								}
								HX_STACK_LINE(725)
								mesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
								HX_STACK_LINE(725)
								{
									HX_STACK_LINE(725)
									int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
									HX_STACK_LINE(725)
									int _g2 = mesh->subMeshes->length;		HX_STACK_VAR(_g2,"_g2");
									HX_STACK_LINE(725)
									while((true)){
										HX_STACK_LINE(725)
										if ((!(((_g11 < _g2))))){
											HX_STACK_LINE(725)
											break;
										}
										HX_STACK_LINE(725)
										int subIndex = (_g11)++;		HX_STACK_VAR(subIndex,"subIndex");
										HX_STACK_LINE(725)
										::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
										HX_STACK_LINE(725)
										subMesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
									}
								}
							}
							HX_STACK_LINE(725)
							{
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_absolutePosition;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(725)
								_this->x = mesh->_worldMatrix->m->__get((int)12);
								HX_STACK_LINE(725)
								_this->y = mesh->_worldMatrix->m->__get((int)13);
								HX_STACK_LINE(725)
								_this->z = mesh->_worldMatrix->m->__get((int)14);
							}
							HX_STACK_LINE(725)
							ret = mesh->_worldMatrix;
						}
						HX_STACK_LINE(725)
						ret;
					}
					HX_STACK_LINE(725)
					if (((  (((  (((  ((mesh->isEnabled())) ? bool(mesh->isVisible) : bool(false) ))) ? bool((mesh->visibility > (int)0)) : bool(false) ))) ? bool(mesh->isInFrustum(this->_frustumPlanes)) : bool(false) ))){
						HX_STACK_LINE(725)
						this->_activeMeshes->push(mesh);
						HX_STACK_LINE(725)
						if (((mesh->skeleton != null()))){
							HX_STACK_LINE(725)
							this->_activeSkeletons->pushNoDuplicate(mesh->skeleton);
						}
						HX_STACK_LINE(725)
						{
							HX_STACK_LINE(725)
							int _g3 = (int)0;		HX_STACK_VAR(_g3,"_g3");
							HX_STACK_LINE(725)
							int _g2 = mesh->subMeshes->length;		HX_STACK_VAR(_g2,"_g2");
							HX_STACK_LINE(725)
							while((true)){
								HX_STACK_LINE(725)
								if ((!(((_g3 < _g2))))){
									HX_STACK_LINE(725)
									break;
								}
								HX_STACK_LINE(725)
								int subIndex = (_g3)++;		HX_STACK_VAR(subIndex,"subIndex");
								HX_STACK_LINE(725)
								::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
								HX_STACK_LINE(725)
								if (((  ((!(((mesh->subMeshes->length == (int)1))))) ? bool(subMesh->_boundingInfo->isInFrustrum(this->_frustumPlanes)) : bool(true) ))){
									HX_STACK_LINE(725)
									Dynamic material = subMesh->getMaterial();		HX_STACK_VAR(material,"material");
									HX_STACK_LINE(725)
									if (((material != null()))){
										HX_STACK_LINE(725)
										Dynamic _g33 = ::Reflect_obj::field(material,HX_CSTRING("getRenderTargetTextures"));		HX_STACK_VAR(_g33,"_g33");
										HX_STACK_LINE(725)
										if (((_g33 != null()))){
											HX_STACK_LINE(725)
											int _g34 = this->_processedMaterials->indexOf(material);		HX_STACK_VAR(_g34,"_g34");
											HX_STACK_LINE(725)
											if (((_g34 == (int)-1))){
												HX_STACK_LINE(725)
												this->_processedMaterials->push(material);
												HX_STACK_LINE(725)
												Dynamic _g35 = material->__Field(HX_CSTRING("getRenderTargetTextures"),true)();		HX_STACK_VAR(_g35,"_g35");
												HX_STACK_LINE(725)
												this->_renderTargets->concat(_g35);
											}
										}
										HX_STACK_LINE(725)
										hx::AddEq(this->_activeVertices,subMesh->verticesCount);
										HX_STACK_LINE(725)
										{
											HX_STACK_LINE(725)
											::com::gamestudiohx::babylonhx::rendering::RenderingManager _this = this->_renderingManager;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(725)
											::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh1 = subMesh->getMesh();		HX_STACK_VAR(mesh1,"mesh1");
											HX_STACK_LINE(725)
											int renderingGroupId = mesh1->renderingGroupId;		HX_STACK_VAR(renderingGroupId,"renderingGroupId");
											HX_STACK_LINE(725)
											if (((_this->_renderingGroups->length <= renderingGroupId))){
												HX_STACK_LINE(725)
												_this->_renderingGroups[renderingGroupId] = ::com::gamestudiohx::babylonhx::rendering::RenderingGroup_obj::__new(renderingGroupId,_this->_scene);
											}
											HX_STACK_LINE(725)
											_this->_renderingGroups->__get(renderingGroupId).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingGroup >()->dispatch(subMesh);
										}
									}
								}
							}
						}
					}
				}
			}
			HX_STACK_LINE(725)
			int beforeParticlesDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeParticlesDate,"beforeParticlesDate");
			HX_STACK_LINE(725)
			if ((this->particlesEnabled)){
				HX_STACK_LINE(725)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(725)
				int _g = this->particleSystems->length;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(725)
				while((true)){
					HX_STACK_LINE(725)
					if ((!(((_g1 < _g))))){
						HX_STACK_LINE(725)
						break;
					}
					HX_STACK_LINE(725)
					int particleIndex = (_g1)++;		HX_STACK_VAR(particleIndex,"particleIndex");
					HX_STACK_LINE(725)
					::com::gamestudiohx::babylonhx::particles::ParticleSystem particleSystem = this->particleSystems->__get(particleIndex).StaticCast< ::com::gamestudiohx::babylonhx::particles::ParticleSystem >();		HX_STACK_VAR(particleSystem,"particleSystem");
					struct _Function_4_1{
						inline static bool Block( ::com::gamestudiohx::babylonhx::particles::ParticleSystem &particleSystem){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",725,0x7c8236a5)
							{
								HX_STACK_LINE(725)
								return (  ((particleSystem->emitter)) ? bool(particleSystem->emitter->__Field(HX_CSTRING("isEnabled"),true)()) : bool(false) );
							}
							return null();
						}
					};
					HX_STACK_LINE(725)
					if (((  ((!((!(particleSystem->emitter->__Field(HX_CSTRING("position"),true)))))) ? bool(_Function_4_1::Block(particleSystem)) : bool(true) ))){
						HX_STACK_LINE(725)
						this->_activeParticleSystems->push(particleSystem);
						HX_STACK_LINE(725)
						particleSystem->animate();
					}
				}
			}
			HX_STACK_LINE(725)
			int _g36 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g36,"_g36");
			HX_STACK_LINE(725)
			int _g37 = (_g36 - beforeParticlesDate);		HX_STACK_VAR(_g37,"_g37");
			HX_STACK_LINE(725)
			hx::AddEq(this->_particlesDuration,_g37);
		}
		HX_STACK_LINE(726)
		int _g38 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g38,"_g38");
		HX_STACK_LINE(726)
		int _g39 = (_g38 - beforeEvaluateActiveMeshesDate);		HX_STACK_VAR(_g39,"_g39");
		HX_STACK_LINE(726)
		hx::AddEq(this->_evaluateActiveMeshesDuration,_g39);
		HX_STACK_LINE(729)
		{
			HX_STACK_LINE(729)
			int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(729)
			int _g = this->_activeSkeletons->length;		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(729)
			while((true)){
				HX_STACK_LINE(729)
				if ((!(((_g1 < _g))))){
					HX_STACK_LINE(729)
					break;
				}
				HX_STACK_LINE(729)
				int skeletonIndex = (_g1)++;		HX_STACK_VAR(skeletonIndex,"skeletonIndex");
				HX_STACK_LINE(730)
				::com::gamestudiohx::babylonhx::bones::Skeleton skeleton = this->_activeSkeletons->data->__GetItem(skeletonIndex);		HX_STACK_VAR(skeleton,"skeleton");
				HX_STACK_LINE(731)
				skeleton->prepare();
			}
		}
		HX_STACK_LINE(735)
		{
			HX_STACK_LINE(735)
			int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(735)
			int _g = this->customRenderTargets->__Field(HX_CSTRING("length"),true);		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(735)
			while((true)){
				HX_STACK_LINE(735)
				if ((!(((_g1 < _g))))){
					HX_STACK_LINE(735)
					break;
				}
				HX_STACK_LINE(735)
				int customIndex = (_g1)++;		HX_STACK_VAR(customIndex,"customIndex");
				HX_STACK_LINE(736)
				this->_renderTargets->push(this->customRenderTargets->__GetItem(customIndex));
			}
		}
		HX_STACK_LINE(740)
		int beforeRenderTargetDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeRenderTargetDate,"beforeRenderTargetDate");
		HX_STACK_LINE(741)
		if ((this->renderTargetsEnabled)){
			HX_STACK_LINE(742)
			int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(742)
			int _g = this->_renderTargets->length;		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(742)
			while((true)){
				HX_STACK_LINE(742)
				if ((!(((_g1 < _g))))){
					HX_STACK_LINE(742)
					break;
				}
				HX_STACK_LINE(742)
				int renderIndex = (_g1)++;		HX_STACK_VAR(renderIndex,"renderIndex");
				HX_STACK_LINE(743)
				Dynamic renderTarget = this->_renderTargets->data->__GetItem(renderIndex);		HX_STACK_VAR(renderTarget,"renderTarget");
				HX_STACK_LINE(744)
				(this->_renderId)++;
				HX_STACK_LINE(745)
				renderTarget->__Field(HX_CSTRING("render"),true)();
			}
		}
		HX_STACK_LINE(749)
		if (((this->_renderTargets->length > (int)0))){
			HX_STACK_LINE(750)
			engine->restoreDefaultFramebuffer();
		}
		HX_STACK_LINE(752)
		int _g40 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g40,"_g40");
		HX_STACK_LINE(752)
		int _g41 = (_g40 - beforeRenderTargetDate);		HX_STACK_VAR(_g41,"_g41");
		HX_STACK_LINE(752)
		this->_renderTargetsDuration = _g41;
		HX_STACK_LINE(755)
		this->postProcessManager->_prepareFrame();
		HX_STACK_LINE(757)
		int beforeRenderDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeRenderDate,"beforeRenderDate");
		HX_STACK_LINE(759)
		if (((this->layers->length > (int)0))){
			HX_STACK_LINE(760)
			engine->setDepthBuffer(false);
			HX_STACK_LINE(761)
			::com::gamestudiohx::babylonhx::layer::Layer layer = null();		HX_STACK_VAR(layer,"layer");
			HX_STACK_LINE(762)
			{
				HX_STACK_LINE(762)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(762)
				int _g = this->layers->length;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(762)
				while((true)){
					HX_STACK_LINE(762)
					if ((!(((_g1 < _g))))){
						HX_STACK_LINE(762)
						break;
					}
					HX_STACK_LINE(762)
					int layerIndex = (_g1)++;		HX_STACK_VAR(layerIndex,"layerIndex");
					HX_STACK_LINE(763)
					layer = this->layers->__get(layerIndex).StaticCast< ::com::gamestudiohx::babylonhx::layer::Layer >();
					HX_STACK_LINE(764)
					if ((layer->isBackground)){
						HX_STACK_LINE(765)
						layer->render();
					}
				}
			}
			HX_STACK_LINE(768)
			engine->setDepthBuffer(true);
		}
		HX_STACK_LINE(772)
		{
			HX_STACK_LINE(772)
			::com::gamestudiohx::babylonhx::rendering::RenderingManager _this = this->_renderingManager;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(772)
			Array< ::Dynamic > _g2 = Array_obj< ::Dynamic >::__new().Add(_this);		HX_STACK_VAR(_g2,"_g2");
			HX_STACK_LINE(772)
			{
				HX_STACK_LINE(772)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(772)
				int _g = ::com::gamestudiohx::babylonhx::rendering::RenderingManager_obj::MAX_RENDERINGGROUPS;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(772)
				while((true)){
					HX_STACK_LINE(772)
					if ((!(((_g1 < _g))))){
						HX_STACK_LINE(772)
						break;
					}
					HX_STACK_LINE(772)
					Array< int > index = Array_obj< int >::__new().Add((_g1)++);		HX_STACK_VAR(index,"index");
					HX_STACK_LINE(772)
					_this->_depthBufferAlreadyCleaned = (index->__get((int)0) == (int)0);
					HX_STACK_LINE(772)
					::com::gamestudiohx::babylonhx::rendering::RenderingGroup renderingGroup = _this->_renderingGroups->__get(index->__get((int)0)).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingGroup >();		HX_STACK_VAR(renderingGroup,"renderingGroup");
					HX_STACK_LINE(772)
					if (((renderingGroup != null()))){
						HX_STACK_LINE(772)
						_this->_clearDepthBuffer();

						HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_Function_5_1,Array< int >,index,Array< ::Dynamic >,_g2)
						Void run(){
							HX_STACK_FRAME("*","_Function_5_1",0x5203f63b,"*._Function_5_1","com/gamestudiohx/babylonhx/Scene.hx",772,0x7c8236a5)
							{
								HX_STACK_LINE(772)
								_g2->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingManager >()->_renderSprites(index->__get((int)0));
							}
							return null();
						}
						HX_END_LOCAL_FUNC0((void))

						HX_STACK_LINE(772)
						if ((!(renderingGroup->render(null(), Dynamic(new _Function_5_1(index,_g2)))))){
							HX_STACK_LINE(772)
							_this->_renderingGroups->splice(index->__get((int)0),(int)1);
						}
					}
					else{
						HX_STACK_LINE(772)
						_this->_renderSprites(index->__get((int)0));
					}
					HX_STACK_LINE(772)
					if (((_this->_scene->_activeParticleSystems->length != (int)0))){
						HX_STACK_LINE(772)
						int beforeParticlesDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeParticlesDate,"beforeParticlesDate");
						HX_STACK_LINE(772)
						{
							HX_STACK_LINE(772)
							int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
							HX_STACK_LINE(772)
							int _g3 = _this->_scene->_activeParticleSystems->length;		HX_STACK_VAR(_g3,"_g3");
							HX_STACK_LINE(772)
							while((true)){
								HX_STACK_LINE(772)
								if ((!(((_g11 < _g3))))){
									HX_STACK_LINE(772)
									break;
								}
								HX_STACK_LINE(772)
								int particleIndex = (_g11)++;		HX_STACK_VAR(particleIndex,"particleIndex");
								HX_STACK_LINE(772)
								::com::gamestudiohx::babylonhx::particles::ParticleSystem particleSystem = _this->_scene->_activeParticleSystems->data->__GetItem(particleIndex);		HX_STACK_VAR(particleSystem,"particleSystem");
								HX_STACK_LINE(772)
								if (((particleSystem->renderingGroupId == index->__get((int)0)))){
									HX_STACK_LINE(772)
									_this->_clearDepthBuffer();
									struct _Function_8_1{
										inline static bool Block( ::com::gamestudiohx::babylonhx::particles::ParticleSystem &particleSystem){
											HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",772,0x7c8236a5)
											{
												HX_STACK_LINE(772)
												int _g42 = ::Lambda_obj::indexOf(null(),particleSystem->emitter);		HX_STACK_VAR(_g42,"_g42");
												HX_STACK_LINE(772)
												return (_g42 != (int)-1);
											}
											return null();
										}
									};
									HX_STACK_LINE(772)
									if (((  ((!((!(particleSystem->emitter->__Field(HX_CSTRING("position"),true)))))) ? bool(_Function_8_1::Block(particleSystem)) : bool(true) ))){
										HX_STACK_LINE(772)
										int _g43 = particleSystem->render();		HX_STACK_VAR(_g43,"_g43");
										HX_STACK_LINE(772)
										hx::AddEq(_this->_scene->_activeParticles,_g43);
									}
								}
							}
						}
						HX_STACK_LINE(772)
						int _g44 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g44,"_g44");
						HX_STACK_LINE(772)
						int _g45 = (_g44 - beforeParticlesDate);		HX_STACK_VAR(_g45,"_g45");
						HX_STACK_LINE(772)
						hx::AddEq(_this->_scene->_particlesDuration,_g45);
					}
				}
			}
		}
		HX_STACK_LINE(775)
		{
			HX_STACK_LINE(775)
			int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(775)
			int _g = this->lensFlareSystems->length;		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(775)
			while((true)){
				HX_STACK_LINE(775)
				if ((!(((_g1 < _g))))){
					HX_STACK_LINE(775)
					break;
				}
				HX_STACK_LINE(775)
				int lensFlareSystemIndex = (_g1)++;		HX_STACK_VAR(lensFlareSystemIndex,"lensFlareSystemIndex");
				HX_STACK_LINE(776)
				this->lensFlareSystems->__get(lensFlareSystemIndex).StaticCast< ::com::gamestudiohx::babylonhx::lensflare::LensFlareSystem >()->render();
			}
		}
		HX_STACK_LINE(780)
		if (((this->layers->length > (int)0))){
			HX_STACK_LINE(781)
			engine->setDepthBuffer(false);
			HX_STACK_LINE(782)
			{
				HX_STACK_LINE(782)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(782)
				int _g = this->layers->length;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(782)
				while((true)){
					HX_STACK_LINE(782)
					if ((!(((_g1 < _g))))){
						HX_STACK_LINE(782)
						break;
					}
					HX_STACK_LINE(782)
					int layerIndex = (_g1)++;		HX_STACK_VAR(layerIndex,"layerIndex");
					HX_STACK_LINE(783)
					::com::gamestudiohx::babylonhx::layer::Layer layer = this->layers->__get(layerIndex).StaticCast< ::com::gamestudiohx::babylonhx::layer::Layer >();		HX_STACK_VAR(layer,"layer");
					HX_STACK_LINE(784)
					if ((!(layer->isBackground))){
						HX_STACK_LINE(785)
						layer->render();
					}
				}
			}
			HX_STACK_LINE(788)
			engine->setDepthBuffer(true);
		}
		HX_STACK_LINE(791)
		int _g46 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g46,"_g46");
		HX_STACK_LINE(791)
		int _g47 = (_g46 - beforeRenderDate);		HX_STACK_VAR(_g47,"_g47");
		HX_STACK_LINE(791)
		hx::AddEq(this->_renderDuration,_g47);
		HX_STACK_LINE(794)
		this->postProcessManager->_finalizeFrame();
		HX_STACK_LINE(797)
		this->activeCamera->_update();
		HX_STACK_LINE(800)
		this->_renderTargets->reset();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,_renderForCamera,(void))

Void Scene_obj::render( ::openfl::geom::Rectangle rect){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","render",0x2599dc8a,"com.gamestudiohx.babylonhx.Scene.render","com/gamestudiohx/babylonhx/Scene.hx",803,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_ARG(rect,"rect")
		HX_STACK_LINE(804)
		int startDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(startDate,"startDate");
		HX_STACK_LINE(805)
		this->_particlesDuration = (int)0;
		HX_STACK_LINE(806)
		this->_spritesDuration = (int)0;
		HX_STACK_LINE(807)
		this->_activeParticles = (int)0;
		HX_STACK_LINE(808)
		this->_renderDuration = (int)0;
		HX_STACK_LINE(809)
		this->_evaluateActiveMeshesDuration = (int)0;
		HX_STACK_LINE(810)
		this->_totalVertices = (int)0;
		HX_STACK_LINE(811)
		this->_activeVertices = (int)0;
		HX_STACK_LINE(814)
		if (((this->beforeRender_dyn() != null()))){
			HX_STACK_LINE(815)
			this->beforeRender();
		}
		HX_STACK_LINE(818)
		{
			HX_STACK_LINE(818)
			int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(818)
			int _g = this->_onBeforeRenderCallbacks->__Field(HX_CSTRING("length"),true);		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(818)
			while((true)){
				HX_STACK_LINE(818)
				if ((!(((_g1 < _g))))){
					HX_STACK_LINE(818)
					break;
				}
				HX_STACK_LINE(818)
				int callbackIndex = (_g1)++;		HX_STACK_VAR(callbackIndex,"callbackIndex");
				HX_STACK_LINE(819)
				this->_onBeforeRenderCallbacks->__GetItem(callbackIndex)().Cast< Void >();
			}
		}
		HX_STACK_LINE(823)
		Float deltaTime = ::com::gamestudiohx::babylonhx::tools::Tools_obj::GetDeltaTime();		HX_STACK_VAR(deltaTime,"deltaTime");
		HX_STACK_LINE(824)
		this->_animationRatio = (deltaTime * 0.06);
		HX_STACK_LINE(825)
		this->_animate();
		HX_STACK_LINE(828)
		if (((this->_physicsEngine != null()))){
			HX_STACK_LINE(829)
			this->_physicsEngine->__Field(HX_CSTRING("_runOneStep"),true)((Float(deltaTime) / Float(1000.0)));
		}
		HX_STACK_LINE(833)
		this->_engine->clear(this->clearColor,(bool(this->autoClear) || bool(this->forceWireframe)),true);
		HX_STACK_LINE(836)
		{
			HX_STACK_LINE(836)
			int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(836)
			int _g = this->lights->length;		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(836)
			while((true)){
				HX_STACK_LINE(836)
				if ((!(((_g1 < _g))))){
					HX_STACK_LINE(836)
					break;
				}
				HX_STACK_LINE(836)
				int lightIndex = (_g1)++;		HX_STACK_VAR(lightIndex,"lightIndex");
				HX_STACK_LINE(837)
				::com::gamestudiohx::babylonhx::lights::Light light = this->lights->__get(lightIndex).StaticCast< ::com::gamestudiohx::babylonhx::lights::Light >();		HX_STACK_VAR(light,"light");
				HX_STACK_LINE(838)
				::com::gamestudiohx::babylonhx::lights::shadows::ShadowGenerator shadowGenerator = light->getShadowGenerator();		HX_STACK_VAR(shadowGenerator,"shadowGenerator");
				HX_STACK_LINE(840)
				if (((  ((light->isEnabled())) ? bool((shadowGenerator != null())) : bool(false) ))){
					HX_STACK_LINE(841)
					::com::gamestudiohx::babylonhx::materials::textures::RenderTargetTexture _g2 = shadowGenerator->getShadowMap();		HX_STACK_VAR(_g2,"_g2");
					HX_STACK_LINE(841)
					this->_renderTargets->push(_g2);
				}
			}
		}
		HX_STACK_LINE(846)
		if (((this->activeCameras->length > (int)0))){
			HX_STACK_LINE(847)
			int currentRenderId = this->_renderId;		HX_STACK_VAR(currentRenderId,"currentRenderId");
			HX_STACK_LINE(848)
			{
				HX_STACK_LINE(848)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(848)
				int _g = this->activeCameras->length;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(848)
				while((true)){
					HX_STACK_LINE(848)
					if ((!(((_g1 < _g))))){
						HX_STACK_LINE(848)
						break;
					}
					HX_STACK_LINE(848)
					int cameraIndex = (_g1)++;		HX_STACK_VAR(cameraIndex,"cameraIndex");
					HX_STACK_LINE(849)
					this->_renderId = currentRenderId;
					HX_STACK_LINE(850)
					{
						HX_STACK_LINE(850)
						::com::gamestudiohx::babylonhx::Engine engine = this->_engine;		HX_STACK_VAR(engine,"engine");
						HX_STACK_LINE(850)
						this->activeCamera = this->activeCameras->__get(cameraIndex).StaticCast< ::com::gamestudiohx::babylonhx::cameras::Camera >();
						HX_STACK_LINE(850)
						if (((this->activeCamera == null()))){
							HX_STACK_LINE(850)
							HX_STACK_DO_THROW(HX_CSTRING("Active camera not set"));
						}
						HX_STACK_LINE(850)
						engine->setViewport(this->activeCamera->viewport,null(),null());
						HX_STACK_LINE(850)
						if (((cameraIndex != (int)0))){
							HX_STACK_LINE(850)
							this->_engine->clear(this->clearColor,false,true);
						}
						HX_STACK_LINE(850)
						(this->_renderId)++;
						HX_STACK_LINE(850)
						{
							HX_STACK_LINE(850)
							::com::gamestudiohx::babylonhx::tools::math::Matrix view;		HX_STACK_VAR(view,"view");
							HX_STACK_LINE(850)
							{
								HX_STACK_LINE(850)
								::com::gamestudiohx::babylonhx::cameras::Camera _this = this->activeCamera;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(850)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _g2;		HX_STACK_VAR(_g2,"_g2");
								HX_STACK_LINE(850)
								{
									HX_STACK_LINE(850)
									bool force = false;		HX_STACK_VAR(force,"force");
									HX_STACK_LINE(850)
									if ((!(((  ((!(force))) ? bool(_this->_isSynchronizedViewMatrix()) : bool(false) ))))){
										HX_STACK_LINE(850)
										_this->_syncChildFlag();
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Matrix _g11 = _this->_getViewMatrix();		HX_STACK_VAR(_g11,"_g11");
										HX_STACK_LINE(850)
										_this->_computedViewMatrix = _g11;
									}
									HX_STACK_LINE(850)
									_g2 = _this->_computedViewMatrix;
								}
								HX_STACK_LINE(850)
								_this->_computedViewMatrix = _g2;
								struct _Function_7_1{
									inline static bool Block( ::com::gamestudiohx::babylonhx::cameras::Camera _this){
										HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",850,0x7c8236a5)
										{
											HX_STACK_LINE(850)
											::com::gamestudiohx::babylonhx::tools::math::Matrix _g3 = _this->parent->getWorldMatrix();		HX_STACK_VAR(_g3,"_g3");
											HX_STACK_LINE(850)
											return (_g3 == null());
										}
										return null();
									}
								};
								struct _Function_7_2{
									inline static bool Block( ::com::gamestudiohx::babylonhx::cameras::Camera _this){
										HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",850,0x7c8236a5)
										{
											HX_STACK_LINE(850)
											return (  ((!(_this->hasNewParent(null())))) ? bool(_this->parent->isSynchronized(null())) : bool(false) );
										}
										return null();
									}
								};
								HX_STACK_LINE(850)
								if ((!(((  ((!(((  ((!(((_this->parent == null()))))) ? bool(_Function_7_1::Block(_this)) : bool(true) ))))) ? bool(_Function_7_2::Block(_this)) : bool(true) ))))){
									HX_STACK_LINE(850)
									if (((_this->_worldMatrix == null()))){
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Matrix _g4;		HX_STACK_VAR(_g4,"_g4");
										HX_STACK_LINE(850)
										{
											HX_STACK_LINE(850)
											::com::gamestudiohx::babylonhx::tools::math::Matrix result = ::com::gamestudiohx::babylonhx::tools::math::Matrix_obj::__new();		HX_STACK_VAR(result,"result");
											HX_STACK_LINE(850)
											result->m[(int)0] = 1.0;
											HX_STACK_LINE(850)
											result->m[(int)1] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)2] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)3] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)4] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)5] = 1.0;
											HX_STACK_LINE(850)
											result->m[(int)6] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)7] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)8] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)9] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)10] = 1.0;
											HX_STACK_LINE(850)
											result->m[(int)11] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)12] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)13] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)14] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)15] = 1.0;
											HX_STACK_LINE(850)
											_g4 = result;
										}
										HX_STACK_LINE(850)
										_this->_worldMatrix = _g4;
									}
									HX_STACK_LINE(850)
									{
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Matrix _this1 = _this->_computedViewMatrix;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Matrix other = _this->_worldMatrix;		HX_STACK_VAR(other,"other");
										HX_STACK_LINE(850)
										Float l1 = _this1->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
										HX_STACK_LINE(850)
										Float l2 = _this1->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
										HX_STACK_LINE(850)
										Float l3 = _this1->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
										HX_STACK_LINE(850)
										Float l4 = _this1->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
										HX_STACK_LINE(850)
										Float l5 = _this1->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
										HX_STACK_LINE(850)
										Float l6 = _this1->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
										HX_STACK_LINE(850)
										Float l7 = _this1->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
										HX_STACK_LINE(850)
										Float l8 = _this1->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
										HX_STACK_LINE(850)
										Float l9 = _this1->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
										HX_STACK_LINE(850)
										Float l10 = _this1->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
										HX_STACK_LINE(850)
										Float l11 = _this1->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
										HX_STACK_LINE(850)
										Float l12 = _this1->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
										HX_STACK_LINE(850)
										Float l13 = _this1->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
										HX_STACK_LINE(850)
										Float l14 = _this1->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
										HX_STACK_LINE(850)
										Float l15 = _this1->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
										HX_STACK_LINE(850)
										Float l16 = _this1->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
										HX_STACK_LINE(850)
										Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
										HX_STACK_LINE(850)
										Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
										HX_STACK_LINE(850)
										Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
										HX_STACK_LINE(850)
										Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
										HX_STACK_LINE(850)
										Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
										HX_STACK_LINE(850)
										Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
										HX_STACK_LINE(850)
										Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
										HX_STACK_LINE(850)
										Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
										HX_STACK_LINE(850)
										Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
										HX_STACK_LINE(850)
										Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
										HX_STACK_LINE(850)
										Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
										HX_STACK_LINE(850)
										Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
										HX_STACK_LINE(850)
										Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
										HX_STACK_LINE(850)
										Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
										HX_STACK_LINE(850)
										Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
										HX_STACK_LINE(850)
										Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
										HX_STACK_LINE(850)
										Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
										HX_STACK_LINE(850)
										Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
										HX_STACK_LINE(850)
										Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
										HX_STACK_LINE(850)
										Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
										HX_STACK_LINE(850)
										Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
										HX_STACK_LINE(850)
										Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
										HX_STACK_LINE(850)
										Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
										HX_STACK_LINE(850)
										other->m[(int)0] = (l23 * l27);
										HX_STACK_LINE(850)
										other->m[(int)4] = (l24 * l27);
										HX_STACK_LINE(850)
										other->m[(int)8] = (l25 * l27);
										HX_STACK_LINE(850)
										other->m[(int)12] = (l26 * l27);
										HX_STACK_LINE(850)
										other->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
										HX_STACK_LINE(850)
										other->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
										HX_STACK_LINE(850)
										other->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
										HX_STACK_LINE(850)
										other->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
										HX_STACK_LINE(850)
										other->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
										HX_STACK_LINE(850)
										other->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
										HX_STACK_LINE(850)
										other->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
										HX_STACK_LINE(850)
										other->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
										HX_STACK_LINE(850)
										other->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
										HX_STACK_LINE(850)
										other->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
										HX_STACK_LINE(850)
										other->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
										HX_STACK_LINE(850)
										other->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
									}
									HX_STACK_LINE(850)
									{
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Matrix _this1 = _this->_worldMatrix;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Matrix other = _this->parent->getWorldMatrix();		HX_STACK_VAR(other,"other");
										HX_STACK_LINE(850)
										{
											HX_STACK_LINE(850)
											Array< Float > result = _this->_computedViewMatrix->m;		HX_STACK_VAR(result,"result");
											HX_STACK_LINE(850)
											Float tm0 = _this1->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
											HX_STACK_LINE(850)
											Float tm1 = _this1->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
											HX_STACK_LINE(850)
											Float tm2 = _this1->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
											HX_STACK_LINE(850)
											Float tm3 = _this1->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
											HX_STACK_LINE(850)
											Float tm4 = _this1->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
											HX_STACK_LINE(850)
											Float tm5 = _this1->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
											HX_STACK_LINE(850)
											Float tm6 = _this1->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
											HX_STACK_LINE(850)
											Float tm7 = _this1->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
											HX_STACK_LINE(850)
											Float tm8 = _this1->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
											HX_STACK_LINE(850)
											Float tm9 = _this1->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
											HX_STACK_LINE(850)
											Float tm10 = _this1->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
											HX_STACK_LINE(850)
											Float tm11 = _this1->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
											HX_STACK_LINE(850)
											Float tm12 = _this1->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
											HX_STACK_LINE(850)
											Float tm13 = _this1->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
											HX_STACK_LINE(850)
											Float tm14 = _this1->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
											HX_STACK_LINE(850)
											Float tm15 = _this1->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
											HX_STACK_LINE(850)
											Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
											HX_STACK_LINE(850)
											Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
											HX_STACK_LINE(850)
											Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
											HX_STACK_LINE(850)
											Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
											HX_STACK_LINE(850)
											Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
											HX_STACK_LINE(850)
											Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
											HX_STACK_LINE(850)
											Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
											HX_STACK_LINE(850)
											Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
											HX_STACK_LINE(850)
											Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
											HX_STACK_LINE(850)
											Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
											HX_STACK_LINE(850)
											Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
											HX_STACK_LINE(850)
											Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
											HX_STACK_LINE(850)
											Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
											HX_STACK_LINE(850)
											Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
											HX_STACK_LINE(850)
											Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
											HX_STACK_LINE(850)
											Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
											HX_STACK_LINE(850)
											result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
											HX_STACK_LINE(850)
											result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
											HX_STACK_LINE(850)
											result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
											HX_STACK_LINE(850)
											result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
											HX_STACK_LINE(850)
											result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
											HX_STACK_LINE(850)
											result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
											HX_STACK_LINE(850)
											result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
											HX_STACK_LINE(850)
											result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
											HX_STACK_LINE(850)
											result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
											HX_STACK_LINE(850)
											result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
											HX_STACK_LINE(850)
											result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
											HX_STACK_LINE(850)
											result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
											HX_STACK_LINE(850)
											result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
											HX_STACK_LINE(850)
											result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
											HX_STACK_LINE(850)
											result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
											HX_STACK_LINE(850)
											result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
											HX_STACK_LINE(850)
											result;
										}
									}
									HX_STACK_LINE(850)
									{
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Matrix _this1 = _this->_computedViewMatrix;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(850)
										{
											HX_STACK_LINE(850)
											Float l1 = _this1->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
											HX_STACK_LINE(850)
											Float l2 = _this1->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
											HX_STACK_LINE(850)
											Float l3 = _this1->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
											HX_STACK_LINE(850)
											Float l4 = _this1->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
											HX_STACK_LINE(850)
											Float l5 = _this1->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
											HX_STACK_LINE(850)
											Float l6 = _this1->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
											HX_STACK_LINE(850)
											Float l7 = _this1->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
											HX_STACK_LINE(850)
											Float l8 = _this1->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
											HX_STACK_LINE(850)
											Float l9 = _this1->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
											HX_STACK_LINE(850)
											Float l10 = _this1->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
											HX_STACK_LINE(850)
											Float l11 = _this1->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
											HX_STACK_LINE(850)
											Float l12 = _this1->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
											HX_STACK_LINE(850)
											Float l13 = _this1->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
											HX_STACK_LINE(850)
											Float l14 = _this1->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
											HX_STACK_LINE(850)
											Float l15 = _this1->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
											HX_STACK_LINE(850)
											Float l16 = _this1->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
											HX_STACK_LINE(850)
											Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
											HX_STACK_LINE(850)
											Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
											HX_STACK_LINE(850)
											Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
											HX_STACK_LINE(850)
											Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
											HX_STACK_LINE(850)
											Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
											HX_STACK_LINE(850)
											Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
											HX_STACK_LINE(850)
											Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
											HX_STACK_LINE(850)
											Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
											HX_STACK_LINE(850)
											Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
											HX_STACK_LINE(850)
											Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
											HX_STACK_LINE(850)
											Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
											HX_STACK_LINE(850)
											Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
											HX_STACK_LINE(850)
											Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
											HX_STACK_LINE(850)
											Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
											HX_STACK_LINE(850)
											Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
											HX_STACK_LINE(850)
											Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
											HX_STACK_LINE(850)
											Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
											HX_STACK_LINE(850)
											Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
											HX_STACK_LINE(850)
											Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
											HX_STACK_LINE(850)
											Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
											HX_STACK_LINE(850)
											Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
											HX_STACK_LINE(850)
											Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
											HX_STACK_LINE(850)
											Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
											HX_STACK_LINE(850)
											_this1->m[(int)0] = (l23 * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)4] = (l24 * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)8] = (l25 * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)12] = (l26 * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
											HX_STACK_LINE(850)
											_this1->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
										}
									}
								}
								HX_STACK_LINE(850)
								view = _this->_computedViewMatrix;
							}
							HX_STACK_LINE(850)
							::com::gamestudiohx::babylonhx::tools::math::Matrix projection;		HX_STACK_VAR(projection,"projection");
							HX_STACK_LINE(850)
							{
								HX_STACK_LINE(850)
								::com::gamestudiohx::babylonhx::cameras::Camera _this = this->activeCamera;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(850)
								bool force = false;		HX_STACK_VAR(force,"force");
								HX_STACK_LINE(850)
								if ((!(((  ((!(force))) ? bool(_this->_isSynchronizedProjectionMatrix()) : bool(false) ))))){
									HX_STACK_LINE(850)
									::com::gamestudiohx::babylonhx::Engine engine1 = _this->_scene->getEngine();		HX_STACK_VAR(engine1,"engine1");
									HX_STACK_LINE(850)
									if (((_this->mode == ::com::gamestudiohx::babylonhx::cameras::Camera_obj::PERSPECTIVE_CAMERA))){
										HX_STACK_LINE(850)
										Float aspect = engine1->getAspectRatio(_this);		HX_STACK_VAR(aspect,"aspect");
										HX_STACK_LINE(850)
										Float znear = _this->minZ;		HX_STACK_VAR(znear,"znear");
										HX_STACK_LINE(850)
										Float zfar = _this->maxZ;		HX_STACK_VAR(zfar,"zfar");
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Matrix result = _this->_projectionMatrix;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(850)
										Float _g5 = ::Math_obj::tan((_this->fov * 0.5));		HX_STACK_VAR(_g5,"_g5");
										HX_STACK_LINE(850)
										Float tan = (Float(1.0) / Float(_g5));		HX_STACK_VAR(tan,"tan");
										HX_STACK_LINE(850)
										result->m[(int)0] = (Float(tan) / Float(aspect));
										HX_STACK_LINE(850)
										result->m[(int)1] = result->m[(int)2] = result->m[(int)3] = 0.0;
										HX_STACK_LINE(850)
										result->m[(int)5] = tan;
										HX_STACK_LINE(850)
										result->m[(int)4] = result->m[(int)6] = result->m[(int)7] = 0.0;
										HX_STACK_LINE(850)
										result->m[(int)8] = result->m[(int)9] = 0.0;
										HX_STACK_LINE(850)
										result->m[(int)10] = (Float(-(zfar)) / Float(((znear - zfar))));
										HX_STACK_LINE(850)
										result->m[(int)11] = 1.0;
										HX_STACK_LINE(850)
										result->m[(int)12] = result->m[(int)13] = result->m[(int)15] = 0.0;
										HX_STACK_LINE(850)
										result->m[(int)14] = (Float((znear * zfar)) / Float(((znear - zfar))));
										HX_STACK_LINE(850)
										result;
									}
									else{
										HX_STACK_LINE(850)
										int _g6 = engine1->getRenderWidth();		HX_STACK_VAR(_g6,"_g6");
										HX_STACK_LINE(850)
										Float halfWidth = (Float(_g6) / Float(2.0));		HX_STACK_VAR(halfWidth,"halfWidth");
										HX_STACK_LINE(850)
										int _g7 = engine1->getRenderHeight();		HX_STACK_VAR(_g7,"_g7");
										HX_STACK_LINE(850)
										Float halfHeight = (Float(_g7) / Float(2.0));		HX_STACK_VAR(halfHeight,"halfHeight");
										HX_STACK_LINE(850)
										{
											HX_STACK_LINE(850)
											Float left;		HX_STACK_VAR(left,"left");
											HX_STACK_LINE(850)
											if (((_this->orthoLeft == null()))){
												HX_STACK_LINE(850)
												left = -(halfWidth);
											}
											else{
												HX_STACK_LINE(850)
												left = _this->orthoLeft;
											}
											HX_STACK_LINE(850)
											Float right;		HX_STACK_VAR(right,"right");
											HX_STACK_LINE(850)
											if (((_this->orthoRight == null()))){
												HX_STACK_LINE(850)
												right = halfWidth;
											}
											else{
												HX_STACK_LINE(850)
												right = _this->orthoRight;
											}
											HX_STACK_LINE(850)
											Float bottom;		HX_STACK_VAR(bottom,"bottom");
											HX_STACK_LINE(850)
											if (((_this->orthoBottom == null()))){
												HX_STACK_LINE(850)
												bottom = -(halfHeight);
											}
											else{
												HX_STACK_LINE(850)
												bottom = _this->orthoBottom;
											}
											HX_STACK_LINE(850)
											Float top;		HX_STACK_VAR(top,"top");
											HX_STACK_LINE(850)
											if (((_this->orthoTop == null()))){
												HX_STACK_LINE(850)
												top = halfHeight;
											}
											else{
												HX_STACK_LINE(850)
												top = _this->orthoTop;
											}
											HX_STACK_LINE(850)
											Float znear = _this->minZ;		HX_STACK_VAR(znear,"znear");
											HX_STACK_LINE(850)
											Float zfar = _this->maxZ;		HX_STACK_VAR(zfar,"zfar");
											HX_STACK_LINE(850)
											::com::gamestudiohx::babylonhx::tools::math::Matrix result = _this->_projectionMatrix;		HX_STACK_VAR(result,"result");
											HX_STACK_LINE(850)
											result->m[(int)0] = (Float(2.0) / Float(((right - left))));
											HX_STACK_LINE(850)
											result->m[(int)1] = result->m[(int)2] = result->m[(int)3] = result->m[(int)4] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)5] = (Float(2.0) / Float(((top - bottom))));
											HX_STACK_LINE(850)
											result->m[(int)6] = result->m[(int)7] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)8] = result->m[(int)9] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)10] = (Float((int)-1) / Float(((znear - zfar))));
											HX_STACK_LINE(850)
											result->m[(int)11] = (int)0;
											HX_STACK_LINE(850)
											result->m[(int)12] = (Float(((left + right))) / Float(((left - right))));
											HX_STACK_LINE(850)
											result->m[(int)13] = (Float(((top + bottom))) / Float(((bottom - top))));
											HX_STACK_LINE(850)
											result->m[(int)14] = (Float(znear) / Float(((znear - zfar))));
											HX_STACK_LINE(850)
											result->m[(int)15] = 1.0;
											HX_STACK_LINE(850)
											result;
										}
									}
								}
								HX_STACK_LINE(850)
								projection = _this->_projectionMatrix;
							}
							HX_STACK_LINE(850)
							this->_viewMatrix = view;
							HX_STACK_LINE(850)
							this->_projectionMatrix = projection;
							HX_STACK_LINE(850)
							{
								HX_STACK_LINE(850)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = this->_viewMatrix;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(850)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = this->_projectionMatrix;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(850)
								{
									HX_STACK_LINE(850)
									Array< Float > result = this->_transformMatrix->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(850)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(850)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(850)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(850)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(850)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(850)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(850)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(850)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(850)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(850)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(850)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(850)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(850)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(850)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(850)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(850)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(850)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(850)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(850)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(850)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(850)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(850)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(850)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(850)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(850)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(850)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(850)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(850)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(850)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(850)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(850)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(850)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(850)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(850)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(850)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(850)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(850)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(850)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(850)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(850)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(850)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(850)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(850)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(850)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(850)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(850)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(850)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(850)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(850)
									result;
								}
							}
						}
						HX_STACK_LINE(850)
						int beforeEvaluateActiveMeshesDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeEvaluateActiveMeshesDate,"beforeEvaluateActiveMeshesDate");
						HX_STACK_LINE(850)
						{
							HX_STACK_LINE(850)
							this->_activeMeshes->reset();
							HX_STACK_LINE(850)
							this->_renderingManager->reset();
							HX_STACK_LINE(850)
							this->_processedMaterials->reset();
							HX_STACK_LINE(850)
							this->_activeParticleSystems->reset();
							HX_STACK_LINE(850)
							this->_activeSkeletons->reset();
							HX_STACK_LINE(850)
							if (((this->_frustumPlanes == null()))){
								HX_STACK_LINE(850)
								Array< ::Dynamic > _g8 = ::com::gamestudiohx::babylonhx::tools::math::Frustum_obj::GetPlanes(this->_transformMatrix);		HX_STACK_VAR(_g8,"_g8");
								HX_STACK_LINE(850)
								this->_frustumPlanes = _g8;
							}
							else{
								HX_STACK_LINE(850)
								Array< ::Dynamic > _g9;		HX_STACK_VAR(_g9,"_g9");
								HX_STACK_LINE(850)
								{
									HX_STACK_LINE(850)
									::com::gamestudiohx::babylonhx::tools::math::Matrix transform = this->_transformMatrix;		HX_STACK_VAR(transform,"transform");
									HX_STACK_LINE(850)
									Array< ::Dynamic > frustumPlanes = this->_frustumPlanes;		HX_STACK_VAR(frustumPlanes,"frustumPlanes");
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) + transform->m->__get((int)2));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) + transform->m->__get((int)6));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)10) + transform->m->__get((int)10));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) + transform->m->__get((int)14));
									HX_STACK_LINE(850)
									{
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(850)
										Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
										HX_STACK_LINE(850)
										Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
										HX_STACK_LINE(850)
										if (((norm != (int)0))){
											HX_STACK_LINE(850)
											magnitude = (Float(1.0) / Float(norm));
										}
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->x,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->y,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->z,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->d,magnitude);
									}
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) - transform->m->__get((int)2));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) - transform->m->__get((int)6));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) - transform->m->__get((int)10));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) - transform->m->__get((int)14));
									HX_STACK_LINE(850)
									{
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(850)
										Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
										HX_STACK_LINE(850)
										Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
										HX_STACK_LINE(850)
										if (((norm != (int)0))){
											HX_STACK_LINE(850)
											magnitude = (Float(1.0) / Float(norm));
										}
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->x,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->y,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->z,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->d,magnitude);
									}
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) + transform->m->__get((int)0));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) + transform->m->__get((int)4));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) + transform->m->__get((int)8));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) + transform->m->__get((int)12));
									HX_STACK_LINE(850)
									{
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(850)
										Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
										HX_STACK_LINE(850)
										Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
										HX_STACK_LINE(850)
										if (((norm != (int)0))){
											HX_STACK_LINE(850)
											magnitude = (Float(1.0) / Float(norm));
										}
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->x,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->y,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->z,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->d,magnitude);
									}
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) - transform->m->__get((int)0));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) - transform->m->__get((int)4));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) - transform->m->__get((int)8));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) - transform->m->__get((int)12));
									HX_STACK_LINE(850)
									{
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(850)
										Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
										HX_STACK_LINE(850)
										Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
										HX_STACK_LINE(850)
										if (((norm != (int)0))){
											HX_STACK_LINE(850)
											magnitude = (Float(1.0) / Float(norm));
										}
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->x,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->y,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->z,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->d,magnitude);
									}
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) - transform->m->__get((int)1));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) - transform->m->__get((int)5));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) - transform->m->__get((int)9));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) - transform->m->__get((int)13));
									HX_STACK_LINE(850)
									{
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(850)
										Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
										HX_STACK_LINE(850)
										Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
										HX_STACK_LINE(850)
										if (((norm != (int)0))){
											HX_STACK_LINE(850)
											magnitude = (Float(1.0) / Float(norm));
										}
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->x,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->y,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->z,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->d,magnitude);
									}
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) + transform->m->__get((int)1));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) + transform->m->__get((int)5));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) + transform->m->__get((int)9));
									HX_STACK_LINE(850)
									frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) + transform->m->__get((int)13));
									HX_STACK_LINE(850)
									{
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(850)
										Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
										HX_STACK_LINE(850)
										Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
										HX_STACK_LINE(850)
										if (((norm != (int)0))){
											HX_STACK_LINE(850)
											magnitude = (Float(1.0) / Float(norm));
										}
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->x,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->y,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->normal->z,magnitude);
										HX_STACK_LINE(850)
										hx::MultEq(_this->d,magnitude);
									}
									HX_STACK_LINE(850)
									_g9 = frustumPlanes;
								}
								HX_STACK_LINE(850)
								this->_frustumPlanes = _g9;
							}
							HX_STACK_LINE(850)
							if (((this->_selectionOctree != null()))){
								HX_STACK_LINE(850)
								Array< ::Dynamic > selection = this->_selectionOctree->select(this->_frustumPlanes);		HX_STACK_VAR(selection,"selection");
								HX_STACK_LINE(850)
								{
									HX_STACK_LINE(850)
									int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
									HX_STACK_LINE(850)
									int _g2 = selection->length;		HX_STACK_VAR(_g2,"_g2");
									HX_STACK_LINE(850)
									while((true)){
										HX_STACK_LINE(850)
										if ((!(((_g11 < _g2))))){
											HX_STACK_LINE(850)
											break;
										}
										HX_STACK_LINE(850)
										int blockIndex = (_g11)++;		HX_STACK_VAR(blockIndex,"blockIndex");
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::culling::octrees::OctreeBlock block = selection->__get(blockIndex).StaticCast< ::com::gamestudiohx::babylonhx::culling::octrees::OctreeBlock >();		HX_STACK_VAR(block,"block");
										HX_STACK_LINE(850)
										{
											HX_STACK_LINE(850)
											int _g3 = (int)0;		HX_STACK_VAR(_g3,"_g3");
											HX_STACK_LINE(850)
											int _g21 = block->meshes->length;		HX_STACK_VAR(_g21,"_g21");
											HX_STACK_LINE(850)
											while((true)){
												HX_STACK_LINE(850)
												if ((!(((_g3 < _g21))))){
													HX_STACK_LINE(850)
													break;
												}
												HX_STACK_LINE(850)
												int meshIndex = (_g3)++;		HX_STACK_VAR(meshIndex,"meshIndex");
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = block->meshes->__get(meshIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
												HX_STACK_LINE(850)
												if (((mesh->_renderId != this->_renderId))){
													HX_STACK_LINE(850)
													int _g10 = mesh->getTotalVertices();		HX_STACK_VAR(_g10,"_g10");
													HX_STACK_LINE(850)
													hx::AddEq(this->_totalVertices,_g10);
													HX_STACK_LINE(850)
													if ((!(mesh->isReady()))){
														HX_STACK_LINE(850)
														continue;
													}
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														bool force = false;		HX_STACK_VAR(force,"force");
														HX_STACK_LINE(850)
														::com::gamestudiohx::babylonhx::tools::math::Matrix ret = mesh->_worldMatrix;		HX_STACK_VAR(ret,"ret");
														struct _Function_13_1{
															inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
																HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",850,0x7c8236a5)
																{
																	HX_STACK_LINE(850)
																	int _g111 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g111,"_g111");
																	HX_STACK_LINE(850)
																	return (  ((!(((mesh->_currentRenderId == _g111))))) ? bool(mesh->isSynchronized(null())) : bool(true) );
																}
																return null();
															}
														};
														HX_STACK_LINE(850)
														if (((  ((!(force))) ? bool(_Function_13_1::Block(mesh)) : bool(false) ))){
															HX_STACK_LINE(850)
															mesh->_childrenFlag = (int)0;
														}
														else{
															HX_STACK_LINE(850)
															mesh->_childrenFlag = (int)1;
															HX_STACK_LINE(850)
															mesh->_cache->__Field(HX_CSTRING("position"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->position);
															HX_STACK_LINE(850)
															mesh->_cache->__Field(HX_CSTRING("scaling"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->scaling);
															HX_STACK_LINE(850)
															mesh->_cache->__FieldRef(HX_CSTRING("pivotMatrixUpdated")) = false;
															HX_STACK_LINE(850)
															int _g12 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g12,"_g12");
															HX_STACK_LINE(850)
															mesh->_currentRenderId = _g12;
															HX_STACK_LINE(850)
															{
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localScaling;		HX_STACK_VAR(result,"result");
																HX_STACK_LINE(850)
																result->m[(int)0] = mesh->scaling->x;
																HX_STACK_LINE(850)
																result->m[(int)1] = (int)0;
																HX_STACK_LINE(850)
																result->m[(int)2] = (int)0;
																HX_STACK_LINE(850)
																result->m[(int)3] = (int)0;
																HX_STACK_LINE(850)
																result->m[(int)4] = (int)0;
																HX_STACK_LINE(850)
																result->m[(int)5] = mesh->scaling->y;
																HX_STACK_LINE(850)
																result->m[(int)6] = (int)0;
																HX_STACK_LINE(850)
																result->m[(int)7] = (int)0;
																HX_STACK_LINE(850)
																result->m[(int)8] = (int)0;
																HX_STACK_LINE(850)
																result->m[(int)9] = (int)0;
																HX_STACK_LINE(850)
																result->m[(int)10] = mesh->scaling->z;
																HX_STACK_LINE(850)
																result->m[(int)11] = (int)0;
																HX_STACK_LINE(850)
																result->m[(int)12] = (int)0;
																HX_STACK_LINE(850)
																result->m[(int)13] = (int)0;
																HX_STACK_LINE(850)
																result->m[(int)14] = (int)0;
																HX_STACK_LINE(850)
																result->m[(int)15] = 1.0;
																HX_STACK_LINE(850)
																result;
															}
															HX_STACK_LINE(850)
															if (((mesh->rotationQuaternion != null()))){
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Quaternion _this = mesh->rotationQuaternion;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
																	HX_STACK_LINE(850)
																	Float xx = (_this->x * _this->x);		HX_STACK_VAR(xx,"xx");
																	HX_STACK_LINE(850)
																	Float yy = (_this->y * _this->y);		HX_STACK_VAR(yy,"yy");
																	HX_STACK_LINE(850)
																	Float zz = (_this->z * _this->z);		HX_STACK_VAR(zz,"zz");
																	HX_STACK_LINE(850)
																	Float xy = (_this->x * _this->y);		HX_STACK_VAR(xy,"xy");
																	HX_STACK_LINE(850)
																	Float zw = (_this->z * _this->w);		HX_STACK_VAR(zw,"zw");
																	HX_STACK_LINE(850)
																	Float zx = (_this->z * _this->x);		HX_STACK_VAR(zx,"zx");
																	HX_STACK_LINE(850)
																	Float yw = (_this->y * _this->w);		HX_STACK_VAR(yw,"yw");
																	HX_STACK_LINE(850)
																	Float yz = (_this->y * _this->z);		HX_STACK_VAR(yz,"yz");
																	HX_STACK_LINE(850)
																	Float xw = (_this->x * _this->w);		HX_STACK_VAR(xw,"xw");
																	HX_STACK_LINE(850)
																	result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
																	HX_STACK_LINE(850)
																	result->m[(int)1] = (2.0 * ((xy + zw)));
																	HX_STACK_LINE(850)
																	result->m[(int)2] = (2.0 * ((zx - yw)));
																	HX_STACK_LINE(850)
																	result->m[(int)3] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)4] = (2.0 * ((xy - zw)));
																	HX_STACK_LINE(850)
																	result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
																	HX_STACK_LINE(850)
																	result->m[(int)6] = (2.0 * ((yz + xw)));
																	HX_STACK_LINE(850)
																	result->m[(int)7] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)8] = (2.0 * ((zx + yw)));
																	HX_STACK_LINE(850)
																	result->m[(int)9] = (2.0 * ((yz - xw)));
																	HX_STACK_LINE(850)
																	result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
																	HX_STACK_LINE(850)
																	result->m[(int)11] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)12] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)13] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)14] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)15] = 1.0;
																	HX_STACK_LINE(850)
																	result;
																}
																HX_STACK_LINE(850)
																mesh->_cache->__Field(HX_CSTRING("rotationQuaternion"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotationQuaternion);
															}
															else{
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Quaternion tempQuaternion = ::com::gamestudiohx::babylonhx::tools::math::Quaternion_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tempQuaternion,"tempQuaternion");
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Quaternion _g13;		HX_STACK_VAR(_g13,"_g13");
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		Float halfRoll = (mesh->rotation->z * 0.5);		HX_STACK_VAR(halfRoll,"halfRoll");
																		HX_STACK_LINE(850)
																		Float halfPitch = (mesh->rotation->x * 0.5);		HX_STACK_VAR(halfPitch,"halfPitch");
																		HX_STACK_LINE(850)
																		Float halfYaw = (mesh->rotation->y * 0.5);		HX_STACK_VAR(halfYaw,"halfYaw");
																		HX_STACK_LINE(850)
																		Float sinRoll = ::Math_obj::sin(halfRoll);		HX_STACK_VAR(sinRoll,"sinRoll");
																		HX_STACK_LINE(850)
																		Float cosRoll = ::Math_obj::cos(halfRoll);		HX_STACK_VAR(cosRoll,"cosRoll");
																		HX_STACK_LINE(850)
																		Float sinPitch = ::Math_obj::sin(halfPitch);		HX_STACK_VAR(sinPitch,"sinPitch");
																		HX_STACK_LINE(850)
																		Float cosPitch = ::Math_obj::cos(halfPitch);		HX_STACK_VAR(cosPitch,"cosPitch");
																		HX_STACK_LINE(850)
																		Float sinYaw = ::Math_obj::sin(halfYaw);		HX_STACK_VAR(sinYaw,"sinYaw");
																		HX_STACK_LINE(850)
																		Float cosYaw = ::Math_obj::cos(halfYaw);		HX_STACK_VAR(cosYaw,"cosYaw");
																		HX_STACK_LINE(850)
																		tempQuaternion->x = (((cosYaw * sinPitch) * cosRoll) + ((sinYaw * cosPitch) * sinRoll));
																		HX_STACK_LINE(850)
																		tempQuaternion->y = (((sinYaw * cosPitch) * cosRoll) - ((cosYaw * sinPitch) * sinRoll));
																		HX_STACK_LINE(850)
																		tempQuaternion->z = (((cosYaw * cosPitch) * sinRoll) - ((sinYaw * sinPitch) * cosRoll));
																		HX_STACK_LINE(850)
																		tempQuaternion->w = (((cosYaw * cosPitch) * cosRoll) + ((sinYaw * sinPitch) * sinRoll));
																		HX_STACK_LINE(850)
																		_g13 = tempQuaternion;
																	}
																	HX_STACK_LINE(850)
																	tempQuaternion = _g13;
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		Float xx = (tempQuaternion->x * tempQuaternion->x);		HX_STACK_VAR(xx,"xx");
																		HX_STACK_LINE(850)
																		Float yy = (tempQuaternion->y * tempQuaternion->y);		HX_STACK_VAR(yy,"yy");
																		HX_STACK_LINE(850)
																		Float zz = (tempQuaternion->z * tempQuaternion->z);		HX_STACK_VAR(zz,"zz");
																		HX_STACK_LINE(850)
																		Float xy = (tempQuaternion->x * tempQuaternion->y);		HX_STACK_VAR(xy,"xy");
																		HX_STACK_LINE(850)
																		Float zw = (tempQuaternion->z * tempQuaternion->w);		HX_STACK_VAR(zw,"zw");
																		HX_STACK_LINE(850)
																		Float zx = (tempQuaternion->z * tempQuaternion->x);		HX_STACK_VAR(zx,"zx");
																		HX_STACK_LINE(850)
																		Float yw = (tempQuaternion->y * tempQuaternion->w);		HX_STACK_VAR(yw,"yw");
																		HX_STACK_LINE(850)
																		Float yz = (tempQuaternion->y * tempQuaternion->z);		HX_STACK_VAR(yz,"yz");
																		HX_STACK_LINE(850)
																		Float xw = (tempQuaternion->x * tempQuaternion->w);		HX_STACK_VAR(xw,"xw");
																		HX_STACK_LINE(850)
																		result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
																		HX_STACK_LINE(850)
																		result->m[(int)1] = (2.0 * ((xy + zw)));
																		HX_STACK_LINE(850)
																		result->m[(int)2] = (2.0 * ((zx - yw)));
																		HX_STACK_LINE(850)
																		result->m[(int)3] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)4] = (2.0 * ((xy - zw)));
																		HX_STACK_LINE(850)
																		result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
																		HX_STACK_LINE(850)
																		result->m[(int)6] = (2.0 * ((yz + xw)));
																		HX_STACK_LINE(850)
																		result->m[(int)7] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)8] = (2.0 * ((zx + yw)));
																		HX_STACK_LINE(850)
																		result->m[(int)9] = (2.0 * ((yz - xw)));
																		HX_STACK_LINE(850)
																		result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
																		HX_STACK_LINE(850)
																		result->m[(int)11] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)12] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)13] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)14] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)15] = 1.0;
																		HX_STACK_LINE(850)
																		result;
																	}
																}
																HX_STACK_LINE(850)
																mesh->_cache->__Field(HX_CSTRING("rotation"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotation);
															}
															HX_STACK_LINE(850)
															if ((mesh->infiniteDistance)){
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::cameras::Camera camera = mesh->_scene->activeCamera;		HX_STACK_VAR(camera,"camera");
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		result->m[(int)0] = 1.0;
																		HX_STACK_LINE(850)
																		result->m[(int)1] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)2] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)3] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)4] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)5] = 1.0;
																		HX_STACK_LINE(850)
																		result->m[(int)6] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)7] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)8] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)9] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)10] = 1.0;
																		HX_STACK_LINE(850)
																		result->m[(int)11] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)12] = (mesh->position->x + camera->position->x);
																		HX_STACK_LINE(850)
																		result->m[(int)13] = (mesh->position->y + camera->position->y);
																		HX_STACK_LINE(850)
																		result->m[(int)14] = (mesh->position->z + camera->position->z);
																		HX_STACK_LINE(850)
																		result->m[(int)15] = 1.0;
																		HX_STACK_LINE(850)
																		result;
																	}
																}
															}
															else{
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	result->m[(int)0] = 1.0;
																	HX_STACK_LINE(850)
																	result->m[(int)1] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)2] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)3] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)4] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)5] = 1.0;
																	HX_STACK_LINE(850)
																	result->m[(int)6] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)7] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)8] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)9] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)10] = 1.0;
																	HX_STACK_LINE(850)
																	result->m[(int)11] = (int)0;
																	HX_STACK_LINE(850)
																	result->m[(int)12] = mesh->position->x;
																	HX_STACK_LINE(850)
																	result->m[(int)13] = mesh->position->y;
																	HX_STACK_LINE(850)
																	result->m[(int)14] = mesh->position->z;
																	HX_STACK_LINE(850)
																	result->m[(int)15] = 1.0;
																	HX_STACK_LINE(850)
																	result;
																}
															}
															HX_STACK_LINE(850)
															{
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_pivotMatrix;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localScaling;		HX_STACK_VAR(other,"other");
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	Array< Float > result = mesh->_localPivotScaling->m;		HX_STACK_VAR(result,"result");
																	HX_STACK_LINE(850)
																	Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
																	HX_STACK_LINE(850)
																	Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
																	HX_STACK_LINE(850)
																	Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
																	HX_STACK_LINE(850)
																	Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
																	HX_STACK_LINE(850)
																	Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
																	HX_STACK_LINE(850)
																	Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
																	HX_STACK_LINE(850)
																	Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
																	HX_STACK_LINE(850)
																	Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
																	HX_STACK_LINE(850)
																	Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
																	HX_STACK_LINE(850)
																	Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
																	HX_STACK_LINE(850)
																	Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
																	HX_STACK_LINE(850)
																	Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
																	HX_STACK_LINE(850)
																	Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
																	HX_STACK_LINE(850)
																	Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
																	HX_STACK_LINE(850)
																	Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
																	HX_STACK_LINE(850)
																	Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
																	HX_STACK_LINE(850)
																	Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
																	HX_STACK_LINE(850)
																	Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
																	HX_STACK_LINE(850)
																	Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
																	HX_STACK_LINE(850)
																	Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
																	HX_STACK_LINE(850)
																	Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
																	HX_STACK_LINE(850)
																	Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
																	HX_STACK_LINE(850)
																	Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
																	HX_STACK_LINE(850)
																	Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
																	HX_STACK_LINE(850)
																	Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
																	HX_STACK_LINE(850)
																	Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
																	HX_STACK_LINE(850)
																	Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
																	HX_STACK_LINE(850)
																	Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
																	HX_STACK_LINE(850)
																	Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
																	HX_STACK_LINE(850)
																	Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
																	HX_STACK_LINE(850)
																	Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
																	HX_STACK_LINE(850)
																	Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
																	HX_STACK_LINE(850)
																	result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
																	HX_STACK_LINE(850)
																	result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
																	HX_STACK_LINE(850)
																	result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
																	HX_STACK_LINE(850)
																	result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
																	HX_STACK_LINE(850)
																	result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
																	HX_STACK_LINE(850)
																	result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
																	HX_STACK_LINE(850)
																	result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
																	HX_STACK_LINE(850)
																	result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
																	HX_STACK_LINE(850)
																	result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
																	HX_STACK_LINE(850)
																	result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
																	HX_STACK_LINE(850)
																	result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
																	HX_STACK_LINE(850)
																	result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
																	HX_STACK_LINE(850)
																	result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
																	HX_STACK_LINE(850)
																	result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
																	HX_STACK_LINE(850)
																	result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
																	HX_STACK_LINE(850)
																	result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
																	HX_STACK_LINE(850)
																	result;
																}
															}
															HX_STACK_LINE(850)
															{
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScaling;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localRotation;		HX_STACK_VAR(other,"other");
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
																	HX_STACK_LINE(850)
																	Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
																	HX_STACK_LINE(850)
																	Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
																	HX_STACK_LINE(850)
																	Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
																	HX_STACK_LINE(850)
																	Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
																	HX_STACK_LINE(850)
																	Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
																	HX_STACK_LINE(850)
																	Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
																	HX_STACK_LINE(850)
																	Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
																	HX_STACK_LINE(850)
																	Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
																	HX_STACK_LINE(850)
																	Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
																	HX_STACK_LINE(850)
																	Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
																	HX_STACK_LINE(850)
																	Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
																	HX_STACK_LINE(850)
																	Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
																	HX_STACK_LINE(850)
																	Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
																	HX_STACK_LINE(850)
																	Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
																	HX_STACK_LINE(850)
																	Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
																	HX_STACK_LINE(850)
																	Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
																	HX_STACK_LINE(850)
																	Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
																	HX_STACK_LINE(850)
																	Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
																	HX_STACK_LINE(850)
																	Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
																	HX_STACK_LINE(850)
																	Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
																	HX_STACK_LINE(850)
																	Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
																	HX_STACK_LINE(850)
																	Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
																	HX_STACK_LINE(850)
																	Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
																	HX_STACK_LINE(850)
																	Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
																	HX_STACK_LINE(850)
																	Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
																	HX_STACK_LINE(850)
																	Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
																	HX_STACK_LINE(850)
																	Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
																	HX_STACK_LINE(850)
																	Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
																	HX_STACK_LINE(850)
																	Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
																	HX_STACK_LINE(850)
																	Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
																	HX_STACK_LINE(850)
																	Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
																	HX_STACK_LINE(850)
																	Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
																	HX_STACK_LINE(850)
																	result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
																	HX_STACK_LINE(850)
																	result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
																	HX_STACK_LINE(850)
																	result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
																	HX_STACK_LINE(850)
																	result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
																	HX_STACK_LINE(850)
																	result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
																	HX_STACK_LINE(850)
																	result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
																	HX_STACK_LINE(850)
																	result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
																	HX_STACK_LINE(850)
																	result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
																	HX_STACK_LINE(850)
																	result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
																	HX_STACK_LINE(850)
																	result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
																	HX_STACK_LINE(850)
																	result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
																	HX_STACK_LINE(850)
																	result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
																	HX_STACK_LINE(850)
																	result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
																	HX_STACK_LINE(850)
																	result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
																	HX_STACK_LINE(850)
																	result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
																	HX_STACK_LINE(850)
																	result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
																	HX_STACK_LINE(850)
																	result;
																}
															}
															HX_STACK_LINE(850)
															if (((mesh->billboardMode != ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE))){
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::tools::math::Vector3 localPosition;		HX_STACK_VAR(localPosition,"localPosition");
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->position;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(850)
																	localPosition = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
																}
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::tools::math::Vector3 zero;		HX_STACK_VAR(zero,"zero");
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_scene->activeCamera->position;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(850)
																	zero = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
																}
																HX_STACK_LINE(850)
																if (((bool((mesh->parent != null())) && bool((mesh->parent->position != null()))))){
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = mesh->parent->position;		HX_STACK_VAR(otherVector,"otherVector");
																		HX_STACK_LINE(850)
																		hx::AddEq(localPosition->x,otherVector->x);
																		HX_STACK_LINE(850)
																		hx::AddEq(localPosition->y,otherVector->y);
																		HX_STACK_LINE(850)
																		hx::AddEq(localPosition->z,otherVector->z);
																	}
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
																		HX_STACK_LINE(850)
																		{
																			HX_STACK_LINE(850)
																			result->m[(int)0] = 1.0;
																			HX_STACK_LINE(850)
																			result->m[(int)1] = (int)0;
																			HX_STACK_LINE(850)
																			result->m[(int)2] = (int)0;
																			HX_STACK_LINE(850)
																			result->m[(int)3] = (int)0;
																			HX_STACK_LINE(850)
																			result->m[(int)4] = (int)0;
																			HX_STACK_LINE(850)
																			result->m[(int)5] = 1.0;
																			HX_STACK_LINE(850)
																			result->m[(int)6] = (int)0;
																			HX_STACK_LINE(850)
																			result->m[(int)7] = (int)0;
																			HX_STACK_LINE(850)
																			result->m[(int)8] = (int)0;
																			HX_STACK_LINE(850)
																			result->m[(int)9] = (int)0;
																			HX_STACK_LINE(850)
																			result->m[(int)10] = 1.0;
																			HX_STACK_LINE(850)
																			result->m[(int)11] = (int)0;
																			HX_STACK_LINE(850)
																			result->m[(int)12] = localPosition->x;
																			HX_STACK_LINE(850)
																			result->m[(int)13] = localPosition->y;
																			HX_STACK_LINE(850)
																			result->m[(int)14] = localPosition->z;
																			HX_STACK_LINE(850)
																			result->m[(int)15] = 1.0;
																			HX_STACK_LINE(850)
																			result;
																		}
																	}
																}
																HX_STACK_LINE(850)
																if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))) == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))){
																	HX_STACK_LINE(850)
																	zero = mesh->_scene->activeCamera->position;
																}
																else{
																	HX_STACK_LINE(850)
																	if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_X))) != (int)0))){
																		HX_STACK_LINE(850)
																		zero->x = (localPosition->x + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
																	}
																	HX_STACK_LINE(850)
																	if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Y))) != (int)0))){
																		HX_STACK_LINE(850)
																		zero->y = (localPosition->y + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
																	}
																	HX_STACK_LINE(850)
																	if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Z))) != (int)0))){
																		HX_STACK_LINE(850)
																		zero->z = (localPosition->z + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
																	}
																}
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Vector3 up = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Up();		HX_STACK_VAR(up,"up");
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localBillboard;		HX_STACK_VAR(result,"result");
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Vector3 xAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(xAxis,"xAxis");
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Vector3 yAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(yAxis,"yAxis");
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Vector3 zAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(zAxis,"zAxis");
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		zAxis->x = (zero->x - localPosition->x);
																		HX_STACK_LINE(850)
																		zAxis->y = (zero->y - localPosition->y);
																		HX_STACK_LINE(850)
																		zAxis->z = (zero->z - localPosition->z);
																	}
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		Float len = ::Math_obj::sqrt((((zAxis->x * zAxis->x) + (zAxis->y * zAxis->y)) + (zAxis->z * zAxis->z)));		HX_STACK_VAR(len,"len");
																		HX_STACK_LINE(850)
																		if (((len != (int)0))){
																			HX_STACK_LINE(850)
																			Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
																			HX_STACK_LINE(850)
																			hx::MultEq(zAxis->x,num);
																			HX_STACK_LINE(850)
																			hx::MultEq(zAxis->y,num);
																			HX_STACK_LINE(850)
																			hx::MultEq(zAxis->z,num);
																		}
																	}
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		xAxis->x = ((up->y * zAxis->z) - (up->z * zAxis->y));
																		HX_STACK_LINE(850)
																		xAxis->y = ((up->z * zAxis->x) - (up->x * zAxis->z));
																		HX_STACK_LINE(850)
																		xAxis->z = ((up->x * zAxis->y) - (up->y * zAxis->x));
																	}
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		Float len = ::Math_obj::sqrt((((xAxis->x * xAxis->x) + (xAxis->y * xAxis->y)) + (xAxis->z * xAxis->z)));		HX_STACK_VAR(len,"len");
																		HX_STACK_LINE(850)
																		if (((len != (int)0))){
																			HX_STACK_LINE(850)
																			Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
																			HX_STACK_LINE(850)
																			hx::MultEq(xAxis->x,num);
																			HX_STACK_LINE(850)
																			hx::MultEq(xAxis->y,num);
																			HX_STACK_LINE(850)
																			hx::MultEq(xAxis->z,num);
																		}
																	}
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		yAxis->x = ((zAxis->y * xAxis->z) - (zAxis->z * xAxis->y));
																		HX_STACK_LINE(850)
																		yAxis->y = ((zAxis->z * xAxis->x) - (zAxis->x * xAxis->z));
																		HX_STACK_LINE(850)
																		yAxis->z = ((zAxis->x * xAxis->y) - (zAxis->y * xAxis->x));
																	}
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		Float len = ::Math_obj::sqrt((((yAxis->x * yAxis->x) + (yAxis->y * yAxis->y)) + (yAxis->z * yAxis->z)));		HX_STACK_VAR(len,"len");
																		HX_STACK_LINE(850)
																		if (((len != (int)0))){
																			HX_STACK_LINE(850)
																			Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
																			HX_STACK_LINE(850)
																			hx::MultEq(yAxis->x,num);
																			HX_STACK_LINE(850)
																			hx::MultEq(yAxis->y,num);
																			HX_STACK_LINE(850)
																			hx::MultEq(yAxis->z,num);
																		}
																	}
																	HX_STACK_LINE(850)
																	Float ex = -(((((xAxis->x * localPosition->x) + (xAxis->y * localPosition->y)) + (xAxis->z * localPosition->z))));		HX_STACK_VAR(ex,"ex");
																	HX_STACK_LINE(850)
																	Float ey = -(((((yAxis->x * localPosition->x) + (yAxis->y * localPosition->y)) + (yAxis->z * localPosition->z))));		HX_STACK_VAR(ey,"ey");
																	HX_STACK_LINE(850)
																	Float ez = -(((((zAxis->x * localPosition->x) + (zAxis->y * localPosition->y)) + (zAxis->z * localPosition->z))));		HX_STACK_VAR(ez,"ez");
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		result->m[(int)0] = xAxis->x;
																		HX_STACK_LINE(850)
																		result->m[(int)1] = yAxis->x;
																		HX_STACK_LINE(850)
																		result->m[(int)2] = zAxis->x;
																		HX_STACK_LINE(850)
																		result->m[(int)3] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)4] = xAxis->y;
																		HX_STACK_LINE(850)
																		result->m[(int)5] = yAxis->y;
																		HX_STACK_LINE(850)
																		result->m[(int)6] = zAxis->y;
																		HX_STACK_LINE(850)
																		result->m[(int)7] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)8] = xAxis->z;
																		HX_STACK_LINE(850)
																		result->m[(int)9] = yAxis->z;
																		HX_STACK_LINE(850)
																		result->m[(int)10] = zAxis->z;
																		HX_STACK_LINE(850)
																		result->m[(int)11] = (int)0;
																		HX_STACK_LINE(850)
																		result->m[(int)12] = ex;
																		HX_STACK_LINE(850)
																		result->m[(int)13] = ey;
																		HX_STACK_LINE(850)
																		result->m[(int)14] = ez;
																		HX_STACK_LINE(850)
																		result->m[(int)15] = (int)1;
																		HX_STACK_LINE(850)
																		result;
																	}
																}
																HX_STACK_LINE(850)
																mesh->_localBillboard->m[(int)12] = mesh->_localBillboard->m[(int)13] = mesh->_localBillboard->m[(int)14] = (int)0;
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localBillboard;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
																		HX_STACK_LINE(850)
																		Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
																		HX_STACK_LINE(850)
																		Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
																		HX_STACK_LINE(850)
																		Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
																		HX_STACK_LINE(850)
																		Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
																		HX_STACK_LINE(850)
																		Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
																		HX_STACK_LINE(850)
																		Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
																		HX_STACK_LINE(850)
																		Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
																		HX_STACK_LINE(850)
																		Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
																		HX_STACK_LINE(850)
																		Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
																		HX_STACK_LINE(850)
																		Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
																		HX_STACK_LINE(850)
																		Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
																		HX_STACK_LINE(850)
																		Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
																		HX_STACK_LINE(850)
																		Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
																		HX_STACK_LINE(850)
																		Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
																		HX_STACK_LINE(850)
																		Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
																		HX_STACK_LINE(850)
																		Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
																		HX_STACK_LINE(850)
																		Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
																		HX_STACK_LINE(850)
																		Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
																		HX_STACK_LINE(850)
																		Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
																		HX_STACK_LINE(850)
																		Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
																		HX_STACK_LINE(850)
																		Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
																		HX_STACK_LINE(850)
																		Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
																		HX_STACK_LINE(850)
																		Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
																		HX_STACK_LINE(850)
																		Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
																		HX_STACK_LINE(850)
																		Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
																		HX_STACK_LINE(850)
																		Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
																		HX_STACK_LINE(850)
																		Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
																		HX_STACK_LINE(850)
																		Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
																		HX_STACK_LINE(850)
																		Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
																		HX_STACK_LINE(850)
																		Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
																		HX_STACK_LINE(850)
																		Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
																		HX_STACK_LINE(850)
																		Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
																		HX_STACK_LINE(850)
																		Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
																		HX_STACK_LINE(850)
																		Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
																		HX_STACK_LINE(850)
																		Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
																		HX_STACK_LINE(850)
																		Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
																		HX_STACK_LINE(850)
																		Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
																		HX_STACK_LINE(850)
																		Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
																		HX_STACK_LINE(850)
																		_this->m[(int)0] = (l23 * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)4] = (l24 * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)8] = (l25 * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)12] = (l26 * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
																		HX_STACK_LINE(850)
																		_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
																	}
																}
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localBillboard;		HX_STACK_VAR(other,"other");
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
																		HX_STACK_LINE(850)
																		Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
																		HX_STACK_LINE(850)
																		Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
																		HX_STACK_LINE(850)
																		Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
																		HX_STACK_LINE(850)
																		Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
																		HX_STACK_LINE(850)
																		Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
																		HX_STACK_LINE(850)
																		Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
																		HX_STACK_LINE(850)
																		Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
																		HX_STACK_LINE(850)
																		Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
																		HX_STACK_LINE(850)
																		Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
																		HX_STACK_LINE(850)
																		Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
																		HX_STACK_LINE(850)
																		Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
																		HX_STACK_LINE(850)
																		Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
																		HX_STACK_LINE(850)
																		Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
																		HX_STACK_LINE(850)
																		Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
																		HX_STACK_LINE(850)
																		Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
																		HX_STACK_LINE(850)
																		Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
																		HX_STACK_LINE(850)
																		Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
																		HX_STACK_LINE(850)
																		Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
																		HX_STACK_LINE(850)
																		Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
																		HX_STACK_LINE(850)
																		Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
																		HX_STACK_LINE(850)
																		Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
																		HX_STACK_LINE(850)
																		Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
																		HX_STACK_LINE(850)
																		Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
																		HX_STACK_LINE(850)
																		Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
																		HX_STACK_LINE(850)
																		Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
																		HX_STACK_LINE(850)
																		Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
																		HX_STACK_LINE(850)
																		Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
																		HX_STACK_LINE(850)
																		Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
																		HX_STACK_LINE(850)
																		Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
																		HX_STACK_LINE(850)
																		Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
																		HX_STACK_LINE(850)
																		Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
																		HX_STACK_LINE(850)
																		Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
																		HX_STACK_LINE(850)
																		result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
																		HX_STACK_LINE(850)
																		result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
																		HX_STACK_LINE(850)
																		result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
																		HX_STACK_LINE(850)
																		result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
																		HX_STACK_LINE(850)
																		result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
																		HX_STACK_LINE(850)
																		result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
																		HX_STACK_LINE(850)
																		result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
																		HX_STACK_LINE(850)
																		result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
																		HX_STACK_LINE(850)
																		result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
																		HX_STACK_LINE(850)
																		result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
																		HX_STACK_LINE(850)
																		result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
																		HX_STACK_LINE(850)
																		result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
																		HX_STACK_LINE(850)
																		result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
																		HX_STACK_LINE(850)
																		result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
																		HX_STACK_LINE(850)
																		result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
																		HX_STACK_LINE(850)
																		result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
																		HX_STACK_LINE(850)
																		result;
																	}
																}
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_rotateYByPI;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localWorld;		HX_STACK_VAR(other,"other");
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
																		HX_STACK_LINE(850)
																		Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
																		HX_STACK_LINE(850)
																		Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
																		HX_STACK_LINE(850)
																		Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
																		HX_STACK_LINE(850)
																		Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
																		HX_STACK_LINE(850)
																		Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
																		HX_STACK_LINE(850)
																		Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
																		HX_STACK_LINE(850)
																		Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
																		HX_STACK_LINE(850)
																		Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
																		HX_STACK_LINE(850)
																		Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
																		HX_STACK_LINE(850)
																		Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
																		HX_STACK_LINE(850)
																		Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
																		HX_STACK_LINE(850)
																		Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
																		HX_STACK_LINE(850)
																		Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
																		HX_STACK_LINE(850)
																		Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
																		HX_STACK_LINE(850)
																		Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
																		HX_STACK_LINE(850)
																		Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
																		HX_STACK_LINE(850)
																		Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
																		HX_STACK_LINE(850)
																		Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
																		HX_STACK_LINE(850)
																		Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
																		HX_STACK_LINE(850)
																		Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
																		HX_STACK_LINE(850)
																		Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
																		HX_STACK_LINE(850)
																		Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
																		HX_STACK_LINE(850)
																		Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
																		HX_STACK_LINE(850)
																		Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
																		HX_STACK_LINE(850)
																		Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
																		HX_STACK_LINE(850)
																		Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
																		HX_STACK_LINE(850)
																		Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
																		HX_STACK_LINE(850)
																		Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
																		HX_STACK_LINE(850)
																		Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
																		HX_STACK_LINE(850)
																		Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
																		HX_STACK_LINE(850)
																		Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
																		HX_STACK_LINE(850)
																		Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
																		HX_STACK_LINE(850)
																		result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
																		HX_STACK_LINE(850)
																		result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
																		HX_STACK_LINE(850)
																		result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
																		HX_STACK_LINE(850)
																		result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
																		HX_STACK_LINE(850)
																		result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
																		HX_STACK_LINE(850)
																		result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
																		HX_STACK_LINE(850)
																		result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
																		HX_STACK_LINE(850)
																		result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
																		HX_STACK_LINE(850)
																		result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
																		HX_STACK_LINE(850)
																		result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
																		HX_STACK_LINE(850)
																		result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
																		HX_STACK_LINE(850)
																		result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
																		HX_STACK_LINE(850)
																		result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
																		HX_STACK_LINE(850)
																		result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
																		HX_STACK_LINE(850)
																		result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
																		HX_STACK_LINE(850)
																		result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
																		HX_STACK_LINE(850)
																		result;
																	}
																}
															}
															struct _Function_14_1{
																inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
																	HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",850,0x7c8236a5)
																	{
																		HX_STACK_LINE(850)
																		::com::gamestudiohx::babylonhx::tools::math::Matrix _g14 = mesh->parent->getWorldMatrix();		HX_STACK_VAR(_g14,"_g14");
																		HX_STACK_LINE(850)
																		return (_g14 != null());
																	}
																	return null();
																}
															};
															HX_STACK_LINE(850)
															if (((  (((  (((mesh->parent != null()))) ? bool(_Function_14_1::Block(mesh)) : bool(false) ))) ? bool((mesh->billboardMode == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE)) : bool(false) ))){
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
																		HX_STACK_LINE(850)
																		Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
																		HX_STACK_LINE(850)
																		Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
																		HX_STACK_LINE(850)
																		Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
																		HX_STACK_LINE(850)
																		Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
																		HX_STACK_LINE(850)
																		Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
																		HX_STACK_LINE(850)
																		Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
																		HX_STACK_LINE(850)
																		Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
																		HX_STACK_LINE(850)
																		Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
																		HX_STACK_LINE(850)
																		Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
																		HX_STACK_LINE(850)
																		Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
																		HX_STACK_LINE(850)
																		Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
																		HX_STACK_LINE(850)
																		Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
																		HX_STACK_LINE(850)
																		Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
																		HX_STACK_LINE(850)
																		Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
																		HX_STACK_LINE(850)
																		Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
																		HX_STACK_LINE(850)
																		Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
																		HX_STACK_LINE(850)
																		Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
																		HX_STACK_LINE(850)
																		Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
																		HX_STACK_LINE(850)
																		Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
																		HX_STACK_LINE(850)
																		Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
																		HX_STACK_LINE(850)
																		Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
																		HX_STACK_LINE(850)
																		Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
																		HX_STACK_LINE(850)
																		Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
																		HX_STACK_LINE(850)
																		Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
																		HX_STACK_LINE(850)
																		Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
																		HX_STACK_LINE(850)
																		Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
																		HX_STACK_LINE(850)
																		Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
																		HX_STACK_LINE(850)
																		Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
																		HX_STACK_LINE(850)
																		Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
																		HX_STACK_LINE(850)
																		Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
																		HX_STACK_LINE(850)
																		Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
																		HX_STACK_LINE(850)
																		Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
																		HX_STACK_LINE(850)
																		result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
																		HX_STACK_LINE(850)
																		result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
																		HX_STACK_LINE(850)
																		result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
																		HX_STACK_LINE(850)
																		result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
																		HX_STACK_LINE(850)
																		result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
																		HX_STACK_LINE(850)
																		result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
																		HX_STACK_LINE(850)
																		result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
																		HX_STACK_LINE(850)
																		result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
																		HX_STACK_LINE(850)
																		result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
																		HX_STACK_LINE(850)
																		result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
																		HX_STACK_LINE(850)
																		result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
																		HX_STACK_LINE(850)
																		result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
																		HX_STACK_LINE(850)
																		result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
																		HX_STACK_LINE(850)
																		result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
																		HX_STACK_LINE(850)
																		result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
																		HX_STACK_LINE(850)
																		result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
																		HX_STACK_LINE(850)
																		result;
																	}
																}
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::tools::math::Matrix parentWorld = mesh->parent->getWorldMatrix();		HX_STACK_VAR(parentWorld,"parentWorld");
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localWorld;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
																		HX_STACK_LINE(850)
																		Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
																		HX_STACK_LINE(850)
																		Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
																		HX_STACK_LINE(850)
																		Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
																		HX_STACK_LINE(850)
																		Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
																		HX_STACK_LINE(850)
																		Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
																		HX_STACK_LINE(850)
																		Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
																		HX_STACK_LINE(850)
																		Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
																		HX_STACK_LINE(850)
																		Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
																		HX_STACK_LINE(850)
																		Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
																		HX_STACK_LINE(850)
																		Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
																		HX_STACK_LINE(850)
																		Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
																		HX_STACK_LINE(850)
																		Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
																		HX_STACK_LINE(850)
																		Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
																		HX_STACK_LINE(850)
																		Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
																		HX_STACK_LINE(850)
																		Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
																		HX_STACK_LINE(850)
																		Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
																		HX_STACK_LINE(850)
																		Float om0 = parentWorld->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
																		HX_STACK_LINE(850)
																		Float om1 = parentWorld->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
																		HX_STACK_LINE(850)
																		Float om2 = parentWorld->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
																		HX_STACK_LINE(850)
																		Float om3 = parentWorld->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
																		HX_STACK_LINE(850)
																		Float om4 = parentWorld->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
																		HX_STACK_LINE(850)
																		Float om5 = parentWorld->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
																		HX_STACK_LINE(850)
																		Float om6 = parentWorld->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
																		HX_STACK_LINE(850)
																		Float om7 = parentWorld->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
																		HX_STACK_LINE(850)
																		Float om8 = parentWorld->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
																		HX_STACK_LINE(850)
																		Float om9 = parentWorld->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
																		HX_STACK_LINE(850)
																		Float om10 = parentWorld->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
																		HX_STACK_LINE(850)
																		Float om11 = parentWorld->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
																		HX_STACK_LINE(850)
																		Float om12 = parentWorld->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
																		HX_STACK_LINE(850)
																		Float om13 = parentWorld->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
																		HX_STACK_LINE(850)
																		Float om14 = parentWorld->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
																		HX_STACK_LINE(850)
																		Float om15 = parentWorld->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
																		HX_STACK_LINE(850)
																		result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
																		HX_STACK_LINE(850)
																		result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
																		HX_STACK_LINE(850)
																		result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
																		HX_STACK_LINE(850)
																		result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
																		HX_STACK_LINE(850)
																		result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
																		HX_STACK_LINE(850)
																		result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
																		HX_STACK_LINE(850)
																		result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
																		HX_STACK_LINE(850)
																		result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
																		HX_STACK_LINE(850)
																		result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
																		HX_STACK_LINE(850)
																		result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
																		HX_STACK_LINE(850)
																		result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
																		HX_STACK_LINE(850)
																		result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
																		HX_STACK_LINE(850)
																		result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
																		HX_STACK_LINE(850)
																		result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
																		HX_STACK_LINE(850)
																		result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
																		HX_STACK_LINE(850)
																		result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
																		HX_STACK_LINE(850)
																		result;
																	}
																}
															}
															else{
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
																	HX_STACK_LINE(850)
																	Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
																	HX_STACK_LINE(850)
																	Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
																	HX_STACK_LINE(850)
																	Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
																	HX_STACK_LINE(850)
																	Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
																	HX_STACK_LINE(850)
																	Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
																	HX_STACK_LINE(850)
																	Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
																	HX_STACK_LINE(850)
																	Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
																	HX_STACK_LINE(850)
																	Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
																	HX_STACK_LINE(850)
																	Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
																	HX_STACK_LINE(850)
																	Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
																	HX_STACK_LINE(850)
																	Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
																	HX_STACK_LINE(850)
																	Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
																	HX_STACK_LINE(850)
																	Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
																	HX_STACK_LINE(850)
																	Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
																	HX_STACK_LINE(850)
																	Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
																	HX_STACK_LINE(850)
																	Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
																	HX_STACK_LINE(850)
																	Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
																	HX_STACK_LINE(850)
																	Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
																	HX_STACK_LINE(850)
																	Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
																	HX_STACK_LINE(850)
																	Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
																	HX_STACK_LINE(850)
																	Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
																	HX_STACK_LINE(850)
																	Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
																	HX_STACK_LINE(850)
																	Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
																	HX_STACK_LINE(850)
																	Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
																	HX_STACK_LINE(850)
																	Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
																	HX_STACK_LINE(850)
																	Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
																	HX_STACK_LINE(850)
																	Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
																	HX_STACK_LINE(850)
																	Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
																	HX_STACK_LINE(850)
																	Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
																	HX_STACK_LINE(850)
																	Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
																	HX_STACK_LINE(850)
																	Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
																	HX_STACK_LINE(850)
																	Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
																	HX_STACK_LINE(850)
																	result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
																	HX_STACK_LINE(850)
																	result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
																	HX_STACK_LINE(850)
																	result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
																	HX_STACK_LINE(850)
																	result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
																	HX_STACK_LINE(850)
																	result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
																	HX_STACK_LINE(850)
																	result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
																	HX_STACK_LINE(850)
																	result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
																	HX_STACK_LINE(850)
																	result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
																	HX_STACK_LINE(850)
																	result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
																	HX_STACK_LINE(850)
																	result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
																	HX_STACK_LINE(850)
																	result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
																	HX_STACK_LINE(850)
																	result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
																	HX_STACK_LINE(850)
																	result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
																	HX_STACK_LINE(850)
																	result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
																	HX_STACK_LINE(850)
																	result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
																	HX_STACK_LINE(850)
																	result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
																	HX_STACK_LINE(850)
																	result;
																}
															}
															HX_STACK_LINE(850)
															if (((mesh->_boundingInfo != null()))){
																HX_STACK_LINE(850)
																Float _g15 = ::Math_obj::max(mesh->scaling->x,mesh->scaling->y);		HX_STACK_VAR(_g15,"_g15");
																HX_STACK_LINE(850)
																mesh->_scaleFactor = _g15;
																HX_STACK_LINE(850)
																Float _g16 = ::Math_obj::max(mesh->_scaleFactor,mesh->scaling->z);		HX_STACK_VAR(_g16,"_g16");
																HX_STACK_LINE(850)
																mesh->_scaleFactor = _g16;
																struct _Function_15_1{
																	inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
																		HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",850,0x7c8236a5)
																		{
																			HX_STACK_LINE(850)
																			Dynamic _g17 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g17,"_g17");
																			HX_STACK_LINE(850)
																			return (_g17 != null());
																		}
																		return null();
																	}
																};
																HX_STACK_LINE(850)
																if (((  (((mesh->parent != null()))) ? bool(_Function_15_1::Block(mesh)) : bool(false) ))){
																	HX_STACK_LINE(850)
																	Dynamic _g18 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g18,"_g18");
																	HX_STACK_LINE(850)
																	Float _g19 = (mesh->_scaleFactor * _g18);		HX_STACK_VAR(_g19,"_g19");
																	HX_STACK_LINE(850)
																	mesh->_scaleFactor = _g19;
																}
																HX_STACK_LINE(850)
																mesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
																HX_STACK_LINE(850)
																{
																	HX_STACK_LINE(850)
																	int _g13 = (int)0;		HX_STACK_VAR(_g13,"_g13");
																	HX_STACK_LINE(850)
																	int _g4 = mesh->subMeshes->length;		HX_STACK_VAR(_g4,"_g4");
																	HX_STACK_LINE(850)
																	while((true)){
																		HX_STACK_LINE(850)
																		if ((!(((_g13 < _g4))))){
																			HX_STACK_LINE(850)
																			break;
																		}
																		HX_STACK_LINE(850)
																		int subIndex = (_g13)++;		HX_STACK_VAR(subIndex,"subIndex");
																		HX_STACK_LINE(850)
																		::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
																		HX_STACK_LINE(850)
																		subMesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
																	}
																}
															}
															HX_STACK_LINE(850)
															{
																HX_STACK_LINE(850)
																::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_absolutePosition;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(850)
																_this->x = mesh->_worldMatrix->m->__get((int)12);
																HX_STACK_LINE(850)
																_this->y = mesh->_worldMatrix->m->__get((int)13);
																HX_STACK_LINE(850)
																_this->z = mesh->_worldMatrix->m->__get((int)14);
															}
															HX_STACK_LINE(850)
															ret = mesh->_worldMatrix;
														}
														HX_STACK_LINE(850)
														ret;
													}
													HX_STACK_LINE(850)
													mesh->_renderId = (int)0;
												}
												struct _Function_11_1{
													inline static bool Block( hx::ObjectPtr< ::com::gamestudiohx::babylonhx::Scene_obj > __this,::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",850,0x7c8236a5)
														{
															HX_STACK_LINE(850)
															return (  (((  (((  (((  (((mesh->_renderId == (int)0))) ? bool(mesh->isEnabled()) : bool(false) ))) ? bool(mesh->isVisible) : bool(false) ))) ? bool((mesh->visibility > (int)0)) : bool(false) ))) ? bool(mesh->isInFrustum(__this->_frustumPlanes)) : bool(false) );
														}
														return null();
													}
												};
												HX_STACK_LINE(850)
												if (((  ((!(((mesh->_renderId == this->_renderId))))) ? bool(_Function_11_1::Block(this,mesh)) : bool(true) ))){
													HX_STACK_LINE(850)
													if (((mesh->_renderId == (int)0))){
														HX_STACK_LINE(850)
														this->_activeMeshes->push(mesh);
													}
													HX_STACK_LINE(850)
													mesh->_renderId = this->_renderId;
													HX_STACK_LINE(850)
													if (((mesh->skeleton != null()))){
														HX_STACK_LINE(850)
														int _g20 = this->_activeSkeletons->indexOf(mesh->skeleton);		HX_STACK_VAR(_g20,"_g20");
														HX_STACK_LINE(850)
														if (((_g20 != (int)-1))){
															HX_STACK_LINE(850)
															this->_activeSkeletons->pushNoDuplicate(mesh->skeleton);
														}
													}
													HX_STACK_LINE(850)
													Array< ::Dynamic > subMeshes = block->subMeshes->__get(meshIndex).StaticCast< Array< ::Dynamic > >();		HX_STACK_VAR(subMeshes,"subMeshes");
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														int _g5 = (int)0;		HX_STACK_VAR(_g5,"_g5");
														HX_STACK_LINE(850)
														int _g4 = subMeshes->length;		HX_STACK_VAR(_g4,"_g4");
														HX_STACK_LINE(850)
														while((true)){
															HX_STACK_LINE(850)
															if ((!(((_g5 < _g4))))){
																HX_STACK_LINE(850)
																break;
															}
															HX_STACK_LINE(850)
															int subIndex = (_g5)++;		HX_STACK_VAR(subIndex,"subIndex");
															HX_STACK_LINE(850)
															::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
															HX_STACK_LINE(850)
															if (((subMesh->_renderId == this->_renderId))){
																HX_STACK_LINE(850)
																continue;
															}
															HX_STACK_LINE(850)
															subMesh->_renderId = this->_renderId;
															HX_STACK_LINE(850)
															if (((  ((!(((mesh->subMeshes->length == (int)1))))) ? bool(subMesh->_boundingInfo->isInFrustrum(this->_frustumPlanes)) : bool(true) ))){
																HX_STACK_LINE(850)
																Dynamic material = subMesh->getMaterial();		HX_STACK_VAR(material,"material");
																HX_STACK_LINE(850)
																if (((material != null()))){
																	HX_STACK_LINE(850)
																	Dynamic _g211 = ::Reflect_obj::field(material,HX_CSTRING("getRenderTargetTextures"));		HX_STACK_VAR(_g211,"_g211");
																	HX_STACK_LINE(850)
																	if (((_g211 != null()))){
																		HX_STACK_LINE(850)
																		int _g22 = this->_processedMaterials->indexOf(material);		HX_STACK_VAR(_g22,"_g22");
																		HX_STACK_LINE(850)
																		if (((_g22 == (int)-1))){
																			HX_STACK_LINE(850)
																			this->_processedMaterials->push(material);
																			HX_STACK_LINE(850)
																			Dynamic _g23 = material->__Field(HX_CSTRING("getRenderTargetTextures"),true)();		HX_STACK_VAR(_g23,"_g23");
																			HX_STACK_LINE(850)
																			this->_renderTargets->concat(_g23);
																		}
																	}
																	HX_STACK_LINE(850)
																	hx::AddEq(this->_activeVertices,subMesh->verticesCount);
																	HX_STACK_LINE(850)
																	{
																		HX_STACK_LINE(850)
																		::com::gamestudiohx::babylonhx::rendering::RenderingManager _this = this->_renderingManager;		HX_STACK_VAR(_this,"_this");
																		HX_STACK_LINE(850)
																		::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh1 = subMesh->getMesh();		HX_STACK_VAR(mesh1,"mesh1");
																		HX_STACK_LINE(850)
																		int renderingGroupId = mesh1->renderingGroupId;		HX_STACK_VAR(renderingGroupId,"renderingGroupId");
																		HX_STACK_LINE(850)
																		if (((_this->_renderingGroups->length <= renderingGroupId))){
																			HX_STACK_LINE(850)
																			_this->_renderingGroups[renderingGroupId] = ::com::gamestudiohx::babylonhx::rendering::RenderingGroup_obj::__new(renderingGroupId,_this->_scene);
																		}
																		HX_STACK_LINE(850)
																		_this->_renderingGroups->__get(renderingGroupId).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingGroup >()->dispatch(subMesh);
																	}
																}
															}
														}
													}
												}
												else{
													HX_STACK_LINE(850)
													mesh->_renderId = -(this->_renderId);
												}
											}
										}
									}
								}
							}
							else{
								HX_STACK_LINE(850)
								int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(850)
								int _g2 = this->meshes->length;		HX_STACK_VAR(_g2,"_g2");
								HX_STACK_LINE(850)
								while((true)){
									HX_STACK_LINE(850)
									if ((!(((_g11 < _g2))))){
										HX_STACK_LINE(850)
										break;
									}
									HX_STACK_LINE(850)
									int meshIndex = (_g11)++;		HX_STACK_VAR(meshIndex,"meshIndex");
									HX_STACK_LINE(850)
									::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = this->meshes->__get(meshIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
									HX_STACK_LINE(850)
									int _g24 = mesh->getTotalVertices();		HX_STACK_VAR(_g24,"_g24");
									HX_STACK_LINE(850)
									hx::AddEq(this->_totalVertices,_g24);
									HX_STACK_LINE(850)
									if ((!(mesh->isReady()))){
										HX_STACK_LINE(850)
										continue;
									}
									HX_STACK_LINE(850)
									{
										HX_STACK_LINE(850)
										bool force = false;		HX_STACK_VAR(force,"force");
										HX_STACK_LINE(850)
										::com::gamestudiohx::babylonhx::tools::math::Matrix ret = mesh->_worldMatrix;		HX_STACK_VAR(ret,"ret");
										struct _Function_9_1{
											inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
												HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",850,0x7c8236a5)
												{
													HX_STACK_LINE(850)
													int _g25 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g25,"_g25");
													HX_STACK_LINE(850)
													return (  ((!(((mesh->_currentRenderId == _g25))))) ? bool(mesh->isSynchronized(null())) : bool(true) );
												}
												return null();
											}
										};
										HX_STACK_LINE(850)
										if (((  ((!(force))) ? bool(_Function_9_1::Block(mesh)) : bool(false) ))){
											HX_STACK_LINE(850)
											mesh->_childrenFlag = (int)0;
										}
										else{
											HX_STACK_LINE(850)
											mesh->_childrenFlag = (int)1;
											HX_STACK_LINE(850)
											mesh->_cache->__Field(HX_CSTRING("position"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->position);
											HX_STACK_LINE(850)
											mesh->_cache->__Field(HX_CSTRING("scaling"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->scaling);
											HX_STACK_LINE(850)
											mesh->_cache->__FieldRef(HX_CSTRING("pivotMatrixUpdated")) = false;
											HX_STACK_LINE(850)
											int _g26 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g26,"_g26");
											HX_STACK_LINE(850)
											mesh->_currentRenderId = _g26;
											HX_STACK_LINE(850)
											{
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localScaling;		HX_STACK_VAR(result,"result");
												HX_STACK_LINE(850)
												result->m[(int)0] = mesh->scaling->x;
												HX_STACK_LINE(850)
												result->m[(int)1] = (int)0;
												HX_STACK_LINE(850)
												result->m[(int)2] = (int)0;
												HX_STACK_LINE(850)
												result->m[(int)3] = (int)0;
												HX_STACK_LINE(850)
												result->m[(int)4] = (int)0;
												HX_STACK_LINE(850)
												result->m[(int)5] = mesh->scaling->y;
												HX_STACK_LINE(850)
												result->m[(int)6] = (int)0;
												HX_STACK_LINE(850)
												result->m[(int)7] = (int)0;
												HX_STACK_LINE(850)
												result->m[(int)8] = (int)0;
												HX_STACK_LINE(850)
												result->m[(int)9] = (int)0;
												HX_STACK_LINE(850)
												result->m[(int)10] = mesh->scaling->z;
												HX_STACK_LINE(850)
												result->m[(int)11] = (int)0;
												HX_STACK_LINE(850)
												result->m[(int)12] = (int)0;
												HX_STACK_LINE(850)
												result->m[(int)13] = (int)0;
												HX_STACK_LINE(850)
												result->m[(int)14] = (int)0;
												HX_STACK_LINE(850)
												result->m[(int)15] = 1.0;
												HX_STACK_LINE(850)
												result;
											}
											HX_STACK_LINE(850)
											if (((mesh->rotationQuaternion != null()))){
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Quaternion _this = mesh->rotationQuaternion;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(850)
													Float xx = (_this->x * _this->x);		HX_STACK_VAR(xx,"xx");
													HX_STACK_LINE(850)
													Float yy = (_this->y * _this->y);		HX_STACK_VAR(yy,"yy");
													HX_STACK_LINE(850)
													Float zz = (_this->z * _this->z);		HX_STACK_VAR(zz,"zz");
													HX_STACK_LINE(850)
													Float xy = (_this->x * _this->y);		HX_STACK_VAR(xy,"xy");
													HX_STACK_LINE(850)
													Float zw = (_this->z * _this->w);		HX_STACK_VAR(zw,"zw");
													HX_STACK_LINE(850)
													Float zx = (_this->z * _this->x);		HX_STACK_VAR(zx,"zx");
													HX_STACK_LINE(850)
													Float yw = (_this->y * _this->w);		HX_STACK_VAR(yw,"yw");
													HX_STACK_LINE(850)
													Float yz = (_this->y * _this->z);		HX_STACK_VAR(yz,"yz");
													HX_STACK_LINE(850)
													Float xw = (_this->x * _this->w);		HX_STACK_VAR(xw,"xw");
													HX_STACK_LINE(850)
													result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
													HX_STACK_LINE(850)
													result->m[(int)1] = (2.0 * ((xy + zw)));
													HX_STACK_LINE(850)
													result->m[(int)2] = (2.0 * ((zx - yw)));
													HX_STACK_LINE(850)
													result->m[(int)3] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)4] = (2.0 * ((xy - zw)));
													HX_STACK_LINE(850)
													result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
													HX_STACK_LINE(850)
													result->m[(int)6] = (2.0 * ((yz + xw)));
													HX_STACK_LINE(850)
													result->m[(int)7] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)8] = (2.0 * ((zx + yw)));
													HX_STACK_LINE(850)
													result->m[(int)9] = (2.0 * ((yz - xw)));
													HX_STACK_LINE(850)
													result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
													HX_STACK_LINE(850)
													result->m[(int)11] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)12] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)13] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)14] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)15] = 1.0;
													HX_STACK_LINE(850)
													result;
												}
												HX_STACK_LINE(850)
												mesh->_cache->__Field(HX_CSTRING("rotationQuaternion"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotationQuaternion);
											}
											else{
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Quaternion tempQuaternion = ::com::gamestudiohx::babylonhx::tools::math::Quaternion_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tempQuaternion,"tempQuaternion");
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Quaternion _g27;		HX_STACK_VAR(_g27,"_g27");
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														Float halfRoll = (mesh->rotation->z * 0.5);		HX_STACK_VAR(halfRoll,"halfRoll");
														HX_STACK_LINE(850)
														Float halfPitch = (mesh->rotation->x * 0.5);		HX_STACK_VAR(halfPitch,"halfPitch");
														HX_STACK_LINE(850)
														Float halfYaw = (mesh->rotation->y * 0.5);		HX_STACK_VAR(halfYaw,"halfYaw");
														HX_STACK_LINE(850)
														Float sinRoll = ::Math_obj::sin(halfRoll);		HX_STACK_VAR(sinRoll,"sinRoll");
														HX_STACK_LINE(850)
														Float cosRoll = ::Math_obj::cos(halfRoll);		HX_STACK_VAR(cosRoll,"cosRoll");
														HX_STACK_LINE(850)
														Float sinPitch = ::Math_obj::sin(halfPitch);		HX_STACK_VAR(sinPitch,"sinPitch");
														HX_STACK_LINE(850)
														Float cosPitch = ::Math_obj::cos(halfPitch);		HX_STACK_VAR(cosPitch,"cosPitch");
														HX_STACK_LINE(850)
														Float sinYaw = ::Math_obj::sin(halfYaw);		HX_STACK_VAR(sinYaw,"sinYaw");
														HX_STACK_LINE(850)
														Float cosYaw = ::Math_obj::cos(halfYaw);		HX_STACK_VAR(cosYaw,"cosYaw");
														HX_STACK_LINE(850)
														tempQuaternion->x = (((cosYaw * sinPitch) * cosRoll) + ((sinYaw * cosPitch) * sinRoll));
														HX_STACK_LINE(850)
														tempQuaternion->y = (((sinYaw * cosPitch) * cosRoll) - ((cosYaw * sinPitch) * sinRoll));
														HX_STACK_LINE(850)
														tempQuaternion->z = (((cosYaw * cosPitch) * sinRoll) - ((sinYaw * sinPitch) * cosRoll));
														HX_STACK_LINE(850)
														tempQuaternion->w = (((cosYaw * cosPitch) * cosRoll) + ((sinYaw * sinPitch) * sinRoll));
														HX_STACK_LINE(850)
														_g27 = tempQuaternion;
													}
													HX_STACK_LINE(850)
													tempQuaternion = _g27;
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														Float xx = (tempQuaternion->x * tempQuaternion->x);		HX_STACK_VAR(xx,"xx");
														HX_STACK_LINE(850)
														Float yy = (tempQuaternion->y * tempQuaternion->y);		HX_STACK_VAR(yy,"yy");
														HX_STACK_LINE(850)
														Float zz = (tempQuaternion->z * tempQuaternion->z);		HX_STACK_VAR(zz,"zz");
														HX_STACK_LINE(850)
														Float xy = (tempQuaternion->x * tempQuaternion->y);		HX_STACK_VAR(xy,"xy");
														HX_STACK_LINE(850)
														Float zw = (tempQuaternion->z * tempQuaternion->w);		HX_STACK_VAR(zw,"zw");
														HX_STACK_LINE(850)
														Float zx = (tempQuaternion->z * tempQuaternion->x);		HX_STACK_VAR(zx,"zx");
														HX_STACK_LINE(850)
														Float yw = (tempQuaternion->y * tempQuaternion->w);		HX_STACK_VAR(yw,"yw");
														HX_STACK_LINE(850)
														Float yz = (tempQuaternion->y * tempQuaternion->z);		HX_STACK_VAR(yz,"yz");
														HX_STACK_LINE(850)
														Float xw = (tempQuaternion->x * tempQuaternion->w);		HX_STACK_VAR(xw,"xw");
														HX_STACK_LINE(850)
														result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
														HX_STACK_LINE(850)
														result->m[(int)1] = (2.0 * ((xy + zw)));
														HX_STACK_LINE(850)
														result->m[(int)2] = (2.0 * ((zx - yw)));
														HX_STACK_LINE(850)
														result->m[(int)3] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)4] = (2.0 * ((xy - zw)));
														HX_STACK_LINE(850)
														result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
														HX_STACK_LINE(850)
														result->m[(int)6] = (2.0 * ((yz + xw)));
														HX_STACK_LINE(850)
														result->m[(int)7] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)8] = (2.0 * ((zx + yw)));
														HX_STACK_LINE(850)
														result->m[(int)9] = (2.0 * ((yz - xw)));
														HX_STACK_LINE(850)
														result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
														HX_STACK_LINE(850)
														result->m[(int)11] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)12] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)13] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)14] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)15] = 1.0;
														HX_STACK_LINE(850)
														result;
													}
												}
												HX_STACK_LINE(850)
												mesh->_cache->__Field(HX_CSTRING("rotation"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotation);
											}
											HX_STACK_LINE(850)
											if ((mesh->infiniteDistance)){
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::cameras::Camera camera = mesh->_scene->activeCamera;		HX_STACK_VAR(camera,"camera");
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														result->m[(int)0] = 1.0;
														HX_STACK_LINE(850)
														result->m[(int)1] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)2] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)3] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)4] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)5] = 1.0;
														HX_STACK_LINE(850)
														result->m[(int)6] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)7] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)8] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)9] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)10] = 1.0;
														HX_STACK_LINE(850)
														result->m[(int)11] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)12] = (mesh->position->x + camera->position->x);
														HX_STACK_LINE(850)
														result->m[(int)13] = (mesh->position->y + camera->position->y);
														HX_STACK_LINE(850)
														result->m[(int)14] = (mesh->position->z + camera->position->z);
														HX_STACK_LINE(850)
														result->m[(int)15] = 1.0;
														HX_STACK_LINE(850)
														result;
													}
												}
											}
											else{
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													result->m[(int)0] = 1.0;
													HX_STACK_LINE(850)
													result->m[(int)1] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)2] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)3] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)4] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)5] = 1.0;
													HX_STACK_LINE(850)
													result->m[(int)6] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)7] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)8] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)9] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)10] = 1.0;
													HX_STACK_LINE(850)
													result->m[(int)11] = (int)0;
													HX_STACK_LINE(850)
													result->m[(int)12] = mesh->position->x;
													HX_STACK_LINE(850)
													result->m[(int)13] = mesh->position->y;
													HX_STACK_LINE(850)
													result->m[(int)14] = mesh->position->z;
													HX_STACK_LINE(850)
													result->m[(int)15] = 1.0;
													HX_STACK_LINE(850)
													result;
												}
											}
											HX_STACK_LINE(850)
											{
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_pivotMatrix;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localScaling;		HX_STACK_VAR(other,"other");
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													Array< Float > result = mesh->_localPivotScaling->m;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(850)
													Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
													HX_STACK_LINE(850)
													Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
													HX_STACK_LINE(850)
													Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
													HX_STACK_LINE(850)
													Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
													HX_STACK_LINE(850)
													Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
													HX_STACK_LINE(850)
													Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
													HX_STACK_LINE(850)
													Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
													HX_STACK_LINE(850)
													Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
													HX_STACK_LINE(850)
													Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
													HX_STACK_LINE(850)
													Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
													HX_STACK_LINE(850)
													Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
													HX_STACK_LINE(850)
													Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
													HX_STACK_LINE(850)
													Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
													HX_STACK_LINE(850)
													Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
													HX_STACK_LINE(850)
													Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
													HX_STACK_LINE(850)
													Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
													HX_STACK_LINE(850)
													Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
													HX_STACK_LINE(850)
													Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
													HX_STACK_LINE(850)
													Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
													HX_STACK_LINE(850)
													Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
													HX_STACK_LINE(850)
													Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
													HX_STACK_LINE(850)
													Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
													HX_STACK_LINE(850)
													Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
													HX_STACK_LINE(850)
													Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
													HX_STACK_LINE(850)
													Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
													HX_STACK_LINE(850)
													Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
													HX_STACK_LINE(850)
													Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
													HX_STACK_LINE(850)
													Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
													HX_STACK_LINE(850)
													Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
													HX_STACK_LINE(850)
													Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
													HX_STACK_LINE(850)
													Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
													HX_STACK_LINE(850)
													Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
													HX_STACK_LINE(850)
													result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
													HX_STACK_LINE(850)
													result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
													HX_STACK_LINE(850)
													result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
													HX_STACK_LINE(850)
													result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
													HX_STACK_LINE(850)
													result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
													HX_STACK_LINE(850)
													result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
													HX_STACK_LINE(850)
													result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
													HX_STACK_LINE(850)
													result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
													HX_STACK_LINE(850)
													result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
													HX_STACK_LINE(850)
													result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
													HX_STACK_LINE(850)
													result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
													HX_STACK_LINE(850)
													result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
													HX_STACK_LINE(850)
													result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
													HX_STACK_LINE(850)
													result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
													HX_STACK_LINE(850)
													result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
													HX_STACK_LINE(850)
													result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
													HX_STACK_LINE(850)
													result;
												}
											}
											HX_STACK_LINE(850)
											{
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScaling;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localRotation;		HX_STACK_VAR(other,"other");
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(850)
													Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
													HX_STACK_LINE(850)
													Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
													HX_STACK_LINE(850)
													Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
													HX_STACK_LINE(850)
													Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
													HX_STACK_LINE(850)
													Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
													HX_STACK_LINE(850)
													Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
													HX_STACK_LINE(850)
													Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
													HX_STACK_LINE(850)
													Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
													HX_STACK_LINE(850)
													Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
													HX_STACK_LINE(850)
													Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
													HX_STACK_LINE(850)
													Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
													HX_STACK_LINE(850)
													Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
													HX_STACK_LINE(850)
													Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
													HX_STACK_LINE(850)
													Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
													HX_STACK_LINE(850)
													Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
													HX_STACK_LINE(850)
													Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
													HX_STACK_LINE(850)
													Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
													HX_STACK_LINE(850)
													Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
													HX_STACK_LINE(850)
													Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
													HX_STACK_LINE(850)
													Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
													HX_STACK_LINE(850)
													Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
													HX_STACK_LINE(850)
													Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
													HX_STACK_LINE(850)
													Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
													HX_STACK_LINE(850)
													Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
													HX_STACK_LINE(850)
													Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
													HX_STACK_LINE(850)
													Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
													HX_STACK_LINE(850)
													Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
													HX_STACK_LINE(850)
													Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
													HX_STACK_LINE(850)
													Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
													HX_STACK_LINE(850)
													Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
													HX_STACK_LINE(850)
													Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
													HX_STACK_LINE(850)
													Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
													HX_STACK_LINE(850)
													result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
													HX_STACK_LINE(850)
													result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
													HX_STACK_LINE(850)
													result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
													HX_STACK_LINE(850)
													result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
													HX_STACK_LINE(850)
													result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
													HX_STACK_LINE(850)
													result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
													HX_STACK_LINE(850)
													result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
													HX_STACK_LINE(850)
													result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
													HX_STACK_LINE(850)
													result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
													HX_STACK_LINE(850)
													result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
													HX_STACK_LINE(850)
													result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
													HX_STACK_LINE(850)
													result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
													HX_STACK_LINE(850)
													result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
													HX_STACK_LINE(850)
													result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
													HX_STACK_LINE(850)
													result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
													HX_STACK_LINE(850)
													result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
													HX_STACK_LINE(850)
													result;
												}
											}
											HX_STACK_LINE(850)
											if (((mesh->billboardMode != ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE))){
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::tools::math::Vector3 localPosition;		HX_STACK_VAR(localPosition,"localPosition");
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->position;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(850)
													localPosition = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
												}
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::tools::math::Vector3 zero;		HX_STACK_VAR(zero,"zero");
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_scene->activeCamera->position;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(850)
													zero = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
												}
												HX_STACK_LINE(850)
												if (((bool((mesh->parent != null())) && bool((mesh->parent->position != null()))))){
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = mesh->parent->position;		HX_STACK_VAR(otherVector,"otherVector");
														HX_STACK_LINE(850)
														hx::AddEq(localPosition->x,otherVector->x);
														HX_STACK_LINE(850)
														hx::AddEq(localPosition->y,otherVector->y);
														HX_STACK_LINE(850)
														hx::AddEq(localPosition->z,otherVector->z);
													}
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(850)
														{
															HX_STACK_LINE(850)
															result->m[(int)0] = 1.0;
															HX_STACK_LINE(850)
															result->m[(int)1] = (int)0;
															HX_STACK_LINE(850)
															result->m[(int)2] = (int)0;
															HX_STACK_LINE(850)
															result->m[(int)3] = (int)0;
															HX_STACK_LINE(850)
															result->m[(int)4] = (int)0;
															HX_STACK_LINE(850)
															result->m[(int)5] = 1.0;
															HX_STACK_LINE(850)
															result->m[(int)6] = (int)0;
															HX_STACK_LINE(850)
															result->m[(int)7] = (int)0;
															HX_STACK_LINE(850)
															result->m[(int)8] = (int)0;
															HX_STACK_LINE(850)
															result->m[(int)9] = (int)0;
															HX_STACK_LINE(850)
															result->m[(int)10] = 1.0;
															HX_STACK_LINE(850)
															result->m[(int)11] = (int)0;
															HX_STACK_LINE(850)
															result->m[(int)12] = localPosition->x;
															HX_STACK_LINE(850)
															result->m[(int)13] = localPosition->y;
															HX_STACK_LINE(850)
															result->m[(int)14] = localPosition->z;
															HX_STACK_LINE(850)
															result->m[(int)15] = 1.0;
															HX_STACK_LINE(850)
															result;
														}
													}
												}
												HX_STACK_LINE(850)
												if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))) == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))){
													HX_STACK_LINE(850)
													zero = mesh->_scene->activeCamera->position;
												}
												else{
													HX_STACK_LINE(850)
													if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_X))) != (int)0))){
														HX_STACK_LINE(850)
														zero->x = (localPosition->x + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
													}
													HX_STACK_LINE(850)
													if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Y))) != (int)0))){
														HX_STACK_LINE(850)
														zero->y = (localPosition->y + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
													}
													HX_STACK_LINE(850)
													if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Z))) != (int)0))){
														HX_STACK_LINE(850)
														zero->z = (localPosition->z + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
													}
												}
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 up = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Up();		HX_STACK_VAR(up,"up");
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localBillboard;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 xAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(xAxis,"xAxis");
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 yAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(yAxis,"yAxis");
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 zAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(zAxis,"zAxis");
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														zAxis->x = (zero->x - localPosition->x);
														HX_STACK_LINE(850)
														zAxis->y = (zero->y - localPosition->y);
														HX_STACK_LINE(850)
														zAxis->z = (zero->z - localPosition->z);
													}
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														Float len = ::Math_obj::sqrt((((zAxis->x * zAxis->x) + (zAxis->y * zAxis->y)) + (zAxis->z * zAxis->z)));		HX_STACK_VAR(len,"len");
														HX_STACK_LINE(850)
														if (((len != (int)0))){
															HX_STACK_LINE(850)
															Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
															HX_STACK_LINE(850)
															hx::MultEq(zAxis->x,num);
															HX_STACK_LINE(850)
															hx::MultEq(zAxis->y,num);
															HX_STACK_LINE(850)
															hx::MultEq(zAxis->z,num);
														}
													}
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														xAxis->x = ((up->y * zAxis->z) - (up->z * zAxis->y));
														HX_STACK_LINE(850)
														xAxis->y = ((up->z * zAxis->x) - (up->x * zAxis->z));
														HX_STACK_LINE(850)
														xAxis->z = ((up->x * zAxis->y) - (up->y * zAxis->x));
													}
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														Float len = ::Math_obj::sqrt((((xAxis->x * xAxis->x) + (xAxis->y * xAxis->y)) + (xAxis->z * xAxis->z)));		HX_STACK_VAR(len,"len");
														HX_STACK_LINE(850)
														if (((len != (int)0))){
															HX_STACK_LINE(850)
															Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
															HX_STACK_LINE(850)
															hx::MultEq(xAxis->x,num);
															HX_STACK_LINE(850)
															hx::MultEq(xAxis->y,num);
															HX_STACK_LINE(850)
															hx::MultEq(xAxis->z,num);
														}
													}
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														yAxis->x = ((zAxis->y * xAxis->z) - (zAxis->z * xAxis->y));
														HX_STACK_LINE(850)
														yAxis->y = ((zAxis->z * xAxis->x) - (zAxis->x * xAxis->z));
														HX_STACK_LINE(850)
														yAxis->z = ((zAxis->x * xAxis->y) - (zAxis->y * xAxis->x));
													}
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														Float len = ::Math_obj::sqrt((((yAxis->x * yAxis->x) + (yAxis->y * yAxis->y)) + (yAxis->z * yAxis->z)));		HX_STACK_VAR(len,"len");
														HX_STACK_LINE(850)
														if (((len != (int)0))){
															HX_STACK_LINE(850)
															Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
															HX_STACK_LINE(850)
															hx::MultEq(yAxis->x,num);
															HX_STACK_LINE(850)
															hx::MultEq(yAxis->y,num);
															HX_STACK_LINE(850)
															hx::MultEq(yAxis->z,num);
														}
													}
													HX_STACK_LINE(850)
													Float ex = -(((((xAxis->x * localPosition->x) + (xAxis->y * localPosition->y)) + (xAxis->z * localPosition->z))));		HX_STACK_VAR(ex,"ex");
													HX_STACK_LINE(850)
													Float ey = -(((((yAxis->x * localPosition->x) + (yAxis->y * localPosition->y)) + (yAxis->z * localPosition->z))));		HX_STACK_VAR(ey,"ey");
													HX_STACK_LINE(850)
													Float ez = -(((((zAxis->x * localPosition->x) + (zAxis->y * localPosition->y)) + (zAxis->z * localPosition->z))));		HX_STACK_VAR(ez,"ez");
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														result->m[(int)0] = xAxis->x;
														HX_STACK_LINE(850)
														result->m[(int)1] = yAxis->x;
														HX_STACK_LINE(850)
														result->m[(int)2] = zAxis->x;
														HX_STACK_LINE(850)
														result->m[(int)3] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)4] = xAxis->y;
														HX_STACK_LINE(850)
														result->m[(int)5] = yAxis->y;
														HX_STACK_LINE(850)
														result->m[(int)6] = zAxis->y;
														HX_STACK_LINE(850)
														result->m[(int)7] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)8] = xAxis->z;
														HX_STACK_LINE(850)
														result->m[(int)9] = yAxis->z;
														HX_STACK_LINE(850)
														result->m[(int)10] = zAxis->z;
														HX_STACK_LINE(850)
														result->m[(int)11] = (int)0;
														HX_STACK_LINE(850)
														result->m[(int)12] = ex;
														HX_STACK_LINE(850)
														result->m[(int)13] = ey;
														HX_STACK_LINE(850)
														result->m[(int)14] = ez;
														HX_STACK_LINE(850)
														result->m[(int)15] = (int)1;
														HX_STACK_LINE(850)
														result;
													}
												}
												HX_STACK_LINE(850)
												mesh->_localBillboard->m[(int)12] = mesh->_localBillboard->m[(int)13] = mesh->_localBillboard->m[(int)14] = (int)0;
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localBillboard;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
														HX_STACK_LINE(850)
														Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
														HX_STACK_LINE(850)
														Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
														HX_STACK_LINE(850)
														Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
														HX_STACK_LINE(850)
														Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
														HX_STACK_LINE(850)
														Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
														HX_STACK_LINE(850)
														Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
														HX_STACK_LINE(850)
														Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
														HX_STACK_LINE(850)
														Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
														HX_STACK_LINE(850)
														Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
														HX_STACK_LINE(850)
														Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
														HX_STACK_LINE(850)
														Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
														HX_STACK_LINE(850)
														Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
														HX_STACK_LINE(850)
														Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
														HX_STACK_LINE(850)
														Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
														HX_STACK_LINE(850)
														Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
														HX_STACK_LINE(850)
														Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
														HX_STACK_LINE(850)
														Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
														HX_STACK_LINE(850)
														Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
														HX_STACK_LINE(850)
														Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
														HX_STACK_LINE(850)
														Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
														HX_STACK_LINE(850)
														Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
														HX_STACK_LINE(850)
														Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
														HX_STACK_LINE(850)
														Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
														HX_STACK_LINE(850)
														Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
														HX_STACK_LINE(850)
														Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
														HX_STACK_LINE(850)
														Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
														HX_STACK_LINE(850)
														Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
														HX_STACK_LINE(850)
														Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
														HX_STACK_LINE(850)
														Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
														HX_STACK_LINE(850)
														Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
														HX_STACK_LINE(850)
														Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
														HX_STACK_LINE(850)
														Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
														HX_STACK_LINE(850)
														Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
														HX_STACK_LINE(850)
														Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
														HX_STACK_LINE(850)
														Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
														HX_STACK_LINE(850)
														Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
														HX_STACK_LINE(850)
														Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
														HX_STACK_LINE(850)
														Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
														HX_STACK_LINE(850)
														_this->m[(int)0] = (l23 * l27);
														HX_STACK_LINE(850)
														_this->m[(int)4] = (l24 * l27);
														HX_STACK_LINE(850)
														_this->m[(int)8] = (l25 * l27);
														HX_STACK_LINE(850)
														_this->m[(int)12] = (l26 * l27);
														HX_STACK_LINE(850)
														_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
														HX_STACK_LINE(850)
														_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
														HX_STACK_LINE(850)
														_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
														HX_STACK_LINE(850)
														_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
														HX_STACK_LINE(850)
														_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
														HX_STACK_LINE(850)
														_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
														HX_STACK_LINE(850)
														_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
														HX_STACK_LINE(850)
														_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
														HX_STACK_LINE(850)
														_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
														HX_STACK_LINE(850)
														_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
														HX_STACK_LINE(850)
														_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
														HX_STACK_LINE(850)
														_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
													}
												}
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localBillboard;		HX_STACK_VAR(other,"other");
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(850)
														Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
														HX_STACK_LINE(850)
														Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
														HX_STACK_LINE(850)
														Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
														HX_STACK_LINE(850)
														Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
														HX_STACK_LINE(850)
														Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
														HX_STACK_LINE(850)
														Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
														HX_STACK_LINE(850)
														Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
														HX_STACK_LINE(850)
														Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
														HX_STACK_LINE(850)
														Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
														HX_STACK_LINE(850)
														Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
														HX_STACK_LINE(850)
														Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
														HX_STACK_LINE(850)
														Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
														HX_STACK_LINE(850)
														Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
														HX_STACK_LINE(850)
														Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
														HX_STACK_LINE(850)
														Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
														HX_STACK_LINE(850)
														Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
														HX_STACK_LINE(850)
														Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
														HX_STACK_LINE(850)
														Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
														HX_STACK_LINE(850)
														Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
														HX_STACK_LINE(850)
														Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
														HX_STACK_LINE(850)
														Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
														HX_STACK_LINE(850)
														Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
														HX_STACK_LINE(850)
														Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
														HX_STACK_LINE(850)
														Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
														HX_STACK_LINE(850)
														Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
														HX_STACK_LINE(850)
														Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
														HX_STACK_LINE(850)
														Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
														HX_STACK_LINE(850)
														Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
														HX_STACK_LINE(850)
														Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
														HX_STACK_LINE(850)
														Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
														HX_STACK_LINE(850)
														Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
														HX_STACK_LINE(850)
														Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
														HX_STACK_LINE(850)
														result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
														HX_STACK_LINE(850)
														result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
														HX_STACK_LINE(850)
														result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
														HX_STACK_LINE(850)
														result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
														HX_STACK_LINE(850)
														result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
														HX_STACK_LINE(850)
														result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
														HX_STACK_LINE(850)
														result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
														HX_STACK_LINE(850)
														result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
														HX_STACK_LINE(850)
														result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
														HX_STACK_LINE(850)
														result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
														HX_STACK_LINE(850)
														result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
														HX_STACK_LINE(850)
														result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
														HX_STACK_LINE(850)
														result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
														HX_STACK_LINE(850)
														result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
														HX_STACK_LINE(850)
														result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
														HX_STACK_LINE(850)
														result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
														HX_STACK_LINE(850)
														result;
													}
												}
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_rotateYByPI;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localWorld;		HX_STACK_VAR(other,"other");
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(850)
														Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
														HX_STACK_LINE(850)
														Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
														HX_STACK_LINE(850)
														Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
														HX_STACK_LINE(850)
														Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
														HX_STACK_LINE(850)
														Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
														HX_STACK_LINE(850)
														Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
														HX_STACK_LINE(850)
														Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
														HX_STACK_LINE(850)
														Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
														HX_STACK_LINE(850)
														Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
														HX_STACK_LINE(850)
														Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
														HX_STACK_LINE(850)
														Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
														HX_STACK_LINE(850)
														Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
														HX_STACK_LINE(850)
														Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
														HX_STACK_LINE(850)
														Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
														HX_STACK_LINE(850)
														Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
														HX_STACK_LINE(850)
														Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
														HX_STACK_LINE(850)
														Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
														HX_STACK_LINE(850)
														Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
														HX_STACK_LINE(850)
														Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
														HX_STACK_LINE(850)
														Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
														HX_STACK_LINE(850)
														Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
														HX_STACK_LINE(850)
														Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
														HX_STACK_LINE(850)
														Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
														HX_STACK_LINE(850)
														Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
														HX_STACK_LINE(850)
														Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
														HX_STACK_LINE(850)
														Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
														HX_STACK_LINE(850)
														Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
														HX_STACK_LINE(850)
														Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
														HX_STACK_LINE(850)
														Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
														HX_STACK_LINE(850)
														Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
														HX_STACK_LINE(850)
														Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
														HX_STACK_LINE(850)
														Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
														HX_STACK_LINE(850)
														result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
														HX_STACK_LINE(850)
														result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
														HX_STACK_LINE(850)
														result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
														HX_STACK_LINE(850)
														result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
														HX_STACK_LINE(850)
														result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
														HX_STACK_LINE(850)
														result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
														HX_STACK_LINE(850)
														result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
														HX_STACK_LINE(850)
														result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
														HX_STACK_LINE(850)
														result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
														HX_STACK_LINE(850)
														result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
														HX_STACK_LINE(850)
														result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
														HX_STACK_LINE(850)
														result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
														HX_STACK_LINE(850)
														result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
														HX_STACK_LINE(850)
														result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
														HX_STACK_LINE(850)
														result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
														HX_STACK_LINE(850)
														result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
														HX_STACK_LINE(850)
														result;
													}
												}
											}
											struct _Function_10_1{
												inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
													HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",850,0x7c8236a5)
													{
														HX_STACK_LINE(850)
														::com::gamestudiohx::babylonhx::tools::math::Matrix _g28 = mesh->parent->getWorldMatrix();		HX_STACK_VAR(_g28,"_g28");
														HX_STACK_LINE(850)
														return (_g28 != null());
													}
													return null();
												}
											};
											HX_STACK_LINE(850)
											if (((  (((  (((mesh->parent != null()))) ? bool(_Function_10_1::Block(mesh)) : bool(false) ))) ? bool((mesh->billboardMode == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE)) : bool(false) ))){
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(850)
														Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
														HX_STACK_LINE(850)
														Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
														HX_STACK_LINE(850)
														Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
														HX_STACK_LINE(850)
														Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
														HX_STACK_LINE(850)
														Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
														HX_STACK_LINE(850)
														Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
														HX_STACK_LINE(850)
														Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
														HX_STACK_LINE(850)
														Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
														HX_STACK_LINE(850)
														Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
														HX_STACK_LINE(850)
														Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
														HX_STACK_LINE(850)
														Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
														HX_STACK_LINE(850)
														Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
														HX_STACK_LINE(850)
														Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
														HX_STACK_LINE(850)
														Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
														HX_STACK_LINE(850)
														Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
														HX_STACK_LINE(850)
														Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
														HX_STACK_LINE(850)
														Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
														HX_STACK_LINE(850)
														Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
														HX_STACK_LINE(850)
														Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
														HX_STACK_LINE(850)
														Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
														HX_STACK_LINE(850)
														Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
														HX_STACK_LINE(850)
														Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
														HX_STACK_LINE(850)
														Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
														HX_STACK_LINE(850)
														Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
														HX_STACK_LINE(850)
														Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
														HX_STACK_LINE(850)
														Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
														HX_STACK_LINE(850)
														Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
														HX_STACK_LINE(850)
														Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
														HX_STACK_LINE(850)
														Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
														HX_STACK_LINE(850)
														Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
														HX_STACK_LINE(850)
														Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
														HX_STACK_LINE(850)
														Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
														HX_STACK_LINE(850)
														result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
														HX_STACK_LINE(850)
														result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
														HX_STACK_LINE(850)
														result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
														HX_STACK_LINE(850)
														result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
														HX_STACK_LINE(850)
														result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
														HX_STACK_LINE(850)
														result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
														HX_STACK_LINE(850)
														result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
														HX_STACK_LINE(850)
														result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
														HX_STACK_LINE(850)
														result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
														HX_STACK_LINE(850)
														result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
														HX_STACK_LINE(850)
														result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
														HX_STACK_LINE(850)
														result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
														HX_STACK_LINE(850)
														result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
														HX_STACK_LINE(850)
														result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
														HX_STACK_LINE(850)
														result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
														HX_STACK_LINE(850)
														result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
														HX_STACK_LINE(850)
														result;
													}
												}
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::tools::math::Matrix parentWorld = mesh->parent->getWorldMatrix();		HX_STACK_VAR(parentWorld,"parentWorld");
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localWorld;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(850)
													{
														HX_STACK_LINE(850)
														Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(850)
														Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
														HX_STACK_LINE(850)
														Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
														HX_STACK_LINE(850)
														Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
														HX_STACK_LINE(850)
														Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
														HX_STACK_LINE(850)
														Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
														HX_STACK_LINE(850)
														Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
														HX_STACK_LINE(850)
														Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
														HX_STACK_LINE(850)
														Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
														HX_STACK_LINE(850)
														Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
														HX_STACK_LINE(850)
														Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
														HX_STACK_LINE(850)
														Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
														HX_STACK_LINE(850)
														Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
														HX_STACK_LINE(850)
														Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
														HX_STACK_LINE(850)
														Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
														HX_STACK_LINE(850)
														Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
														HX_STACK_LINE(850)
														Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
														HX_STACK_LINE(850)
														Float om0 = parentWorld->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
														HX_STACK_LINE(850)
														Float om1 = parentWorld->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
														HX_STACK_LINE(850)
														Float om2 = parentWorld->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
														HX_STACK_LINE(850)
														Float om3 = parentWorld->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
														HX_STACK_LINE(850)
														Float om4 = parentWorld->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
														HX_STACK_LINE(850)
														Float om5 = parentWorld->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
														HX_STACK_LINE(850)
														Float om6 = parentWorld->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
														HX_STACK_LINE(850)
														Float om7 = parentWorld->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
														HX_STACK_LINE(850)
														Float om8 = parentWorld->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
														HX_STACK_LINE(850)
														Float om9 = parentWorld->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
														HX_STACK_LINE(850)
														Float om10 = parentWorld->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
														HX_STACK_LINE(850)
														Float om11 = parentWorld->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
														HX_STACK_LINE(850)
														Float om12 = parentWorld->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
														HX_STACK_LINE(850)
														Float om13 = parentWorld->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
														HX_STACK_LINE(850)
														Float om14 = parentWorld->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
														HX_STACK_LINE(850)
														Float om15 = parentWorld->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
														HX_STACK_LINE(850)
														result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
														HX_STACK_LINE(850)
														result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
														HX_STACK_LINE(850)
														result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
														HX_STACK_LINE(850)
														result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
														HX_STACK_LINE(850)
														result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
														HX_STACK_LINE(850)
														result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
														HX_STACK_LINE(850)
														result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
														HX_STACK_LINE(850)
														result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
														HX_STACK_LINE(850)
														result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
														HX_STACK_LINE(850)
														result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
														HX_STACK_LINE(850)
														result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
														HX_STACK_LINE(850)
														result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
														HX_STACK_LINE(850)
														result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
														HX_STACK_LINE(850)
														result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
														HX_STACK_LINE(850)
														result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
														HX_STACK_LINE(850)
														result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
														HX_STACK_LINE(850)
														result;
													}
												}
											}
											else{
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(850)
													Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
													HX_STACK_LINE(850)
													Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
													HX_STACK_LINE(850)
													Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
													HX_STACK_LINE(850)
													Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
													HX_STACK_LINE(850)
													Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
													HX_STACK_LINE(850)
													Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
													HX_STACK_LINE(850)
													Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
													HX_STACK_LINE(850)
													Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
													HX_STACK_LINE(850)
													Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
													HX_STACK_LINE(850)
													Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
													HX_STACK_LINE(850)
													Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
													HX_STACK_LINE(850)
													Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
													HX_STACK_LINE(850)
													Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
													HX_STACK_LINE(850)
													Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
													HX_STACK_LINE(850)
													Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
													HX_STACK_LINE(850)
													Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
													HX_STACK_LINE(850)
													Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
													HX_STACK_LINE(850)
													Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
													HX_STACK_LINE(850)
													Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
													HX_STACK_LINE(850)
													Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
													HX_STACK_LINE(850)
													Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
													HX_STACK_LINE(850)
													Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
													HX_STACK_LINE(850)
													Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
													HX_STACK_LINE(850)
													Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
													HX_STACK_LINE(850)
													Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
													HX_STACK_LINE(850)
													Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
													HX_STACK_LINE(850)
													Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
													HX_STACK_LINE(850)
													Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
													HX_STACK_LINE(850)
													Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
													HX_STACK_LINE(850)
													Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
													HX_STACK_LINE(850)
													Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
													HX_STACK_LINE(850)
													Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
													HX_STACK_LINE(850)
													result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
													HX_STACK_LINE(850)
													result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
													HX_STACK_LINE(850)
													result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
													HX_STACK_LINE(850)
													result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
													HX_STACK_LINE(850)
													result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
													HX_STACK_LINE(850)
													result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
													HX_STACK_LINE(850)
													result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
													HX_STACK_LINE(850)
													result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
													HX_STACK_LINE(850)
													result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
													HX_STACK_LINE(850)
													result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
													HX_STACK_LINE(850)
													result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
													HX_STACK_LINE(850)
													result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
													HX_STACK_LINE(850)
													result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
													HX_STACK_LINE(850)
													result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
													HX_STACK_LINE(850)
													result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
													HX_STACK_LINE(850)
													result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
													HX_STACK_LINE(850)
													result;
												}
											}
											HX_STACK_LINE(850)
											if (((mesh->_boundingInfo != null()))){
												HX_STACK_LINE(850)
												Float _g29 = ::Math_obj::max(mesh->scaling->x,mesh->scaling->y);		HX_STACK_VAR(_g29,"_g29");
												HX_STACK_LINE(850)
												mesh->_scaleFactor = _g29;
												HX_STACK_LINE(850)
												Float _g30 = ::Math_obj::max(mesh->_scaleFactor,mesh->scaling->z);		HX_STACK_VAR(_g30,"_g30");
												HX_STACK_LINE(850)
												mesh->_scaleFactor = _g30;
												struct _Function_11_1{
													inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",850,0x7c8236a5)
														{
															HX_STACK_LINE(850)
															Dynamic _g31 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g31,"_g31");
															HX_STACK_LINE(850)
															return (_g31 != null());
														}
														return null();
													}
												};
												HX_STACK_LINE(850)
												if (((  (((mesh->parent != null()))) ? bool(_Function_11_1::Block(mesh)) : bool(false) ))){
													HX_STACK_LINE(850)
													Dynamic _g32 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g32,"_g32");
													HX_STACK_LINE(850)
													Float _g33 = (mesh->_scaleFactor * _g32);		HX_STACK_VAR(_g33,"_g33");
													HX_STACK_LINE(850)
													mesh->_scaleFactor = _g33;
												}
												HX_STACK_LINE(850)
												mesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
												HX_STACK_LINE(850)
												{
													HX_STACK_LINE(850)
													int _g12 = (int)0;		HX_STACK_VAR(_g12,"_g12");
													HX_STACK_LINE(850)
													int _g3 = mesh->subMeshes->length;		HX_STACK_VAR(_g3,"_g3");
													HX_STACK_LINE(850)
													while((true)){
														HX_STACK_LINE(850)
														if ((!(((_g12 < _g3))))){
															HX_STACK_LINE(850)
															break;
														}
														HX_STACK_LINE(850)
														int subIndex = (_g12)++;		HX_STACK_VAR(subIndex,"subIndex");
														HX_STACK_LINE(850)
														::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
														HX_STACK_LINE(850)
														subMesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
													}
												}
											}
											HX_STACK_LINE(850)
											{
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_absolutePosition;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(850)
												_this->x = mesh->_worldMatrix->m->__get((int)12);
												HX_STACK_LINE(850)
												_this->y = mesh->_worldMatrix->m->__get((int)13);
												HX_STACK_LINE(850)
												_this->z = mesh->_worldMatrix->m->__get((int)14);
											}
											HX_STACK_LINE(850)
											ret = mesh->_worldMatrix;
										}
										HX_STACK_LINE(850)
										ret;
									}
									HX_STACK_LINE(850)
									if (((  (((  (((  ((mesh->isEnabled())) ? bool(mesh->isVisible) : bool(false) ))) ? bool((mesh->visibility > (int)0)) : bool(false) ))) ? bool(mesh->isInFrustum(this->_frustumPlanes)) : bool(false) ))){
										HX_STACK_LINE(850)
										this->_activeMeshes->push(mesh);
										HX_STACK_LINE(850)
										if (((mesh->skeleton != null()))){
											HX_STACK_LINE(850)
											this->_activeSkeletons->pushNoDuplicate(mesh->skeleton);
										}
										HX_STACK_LINE(850)
										{
											HX_STACK_LINE(850)
											int _g3 = (int)0;		HX_STACK_VAR(_g3,"_g3");
											HX_STACK_LINE(850)
											int _g21 = mesh->subMeshes->length;		HX_STACK_VAR(_g21,"_g21");
											HX_STACK_LINE(850)
											while((true)){
												HX_STACK_LINE(850)
												if ((!(((_g3 < _g21))))){
													HX_STACK_LINE(850)
													break;
												}
												HX_STACK_LINE(850)
												int subIndex = (_g3)++;		HX_STACK_VAR(subIndex,"subIndex");
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
												HX_STACK_LINE(850)
												if (((  ((!(((mesh->subMeshes->length == (int)1))))) ? bool(subMesh->_boundingInfo->isInFrustrum(this->_frustumPlanes)) : bool(true) ))){
													HX_STACK_LINE(850)
													Dynamic material = subMesh->getMaterial();		HX_STACK_VAR(material,"material");
													HX_STACK_LINE(850)
													if (((material != null()))){
														HX_STACK_LINE(850)
														Dynamic _g34 = ::Reflect_obj::field(material,HX_CSTRING("getRenderTargetTextures"));		HX_STACK_VAR(_g34,"_g34");
														HX_STACK_LINE(850)
														if (((_g34 != null()))){
															HX_STACK_LINE(850)
															int _g35 = this->_processedMaterials->indexOf(material);		HX_STACK_VAR(_g35,"_g35");
															HX_STACK_LINE(850)
															if (((_g35 == (int)-1))){
																HX_STACK_LINE(850)
																this->_processedMaterials->push(material);
																HX_STACK_LINE(850)
																Dynamic _g36 = material->__Field(HX_CSTRING("getRenderTargetTextures"),true)();		HX_STACK_VAR(_g36,"_g36");
																HX_STACK_LINE(850)
																this->_renderTargets->concat(_g36);
															}
														}
														HX_STACK_LINE(850)
														hx::AddEq(this->_activeVertices,subMesh->verticesCount);
														HX_STACK_LINE(850)
														{
															HX_STACK_LINE(850)
															::com::gamestudiohx::babylonhx::rendering::RenderingManager _this = this->_renderingManager;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(850)
															::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh1 = subMesh->getMesh();		HX_STACK_VAR(mesh1,"mesh1");
															HX_STACK_LINE(850)
															int renderingGroupId = mesh1->renderingGroupId;		HX_STACK_VAR(renderingGroupId,"renderingGroupId");
															HX_STACK_LINE(850)
															if (((_this->_renderingGroups->length <= renderingGroupId))){
																HX_STACK_LINE(850)
																_this->_renderingGroups[renderingGroupId] = ::com::gamestudiohx::babylonhx::rendering::RenderingGroup_obj::__new(renderingGroupId,_this->_scene);
															}
															HX_STACK_LINE(850)
															_this->_renderingGroups->__get(renderingGroupId).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingGroup >()->dispatch(subMesh);
														}
													}
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(850)
							int beforeParticlesDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeParticlesDate,"beforeParticlesDate");
							HX_STACK_LINE(850)
							if ((this->particlesEnabled)){
								HX_STACK_LINE(850)
								int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(850)
								int _g2 = this->particleSystems->length;		HX_STACK_VAR(_g2,"_g2");
								HX_STACK_LINE(850)
								while((true)){
									HX_STACK_LINE(850)
									if ((!(((_g11 < _g2))))){
										HX_STACK_LINE(850)
										break;
									}
									HX_STACK_LINE(850)
									int particleIndex = (_g11)++;		HX_STACK_VAR(particleIndex,"particleIndex");
									HX_STACK_LINE(850)
									::com::gamestudiohx::babylonhx::particles::ParticleSystem particleSystem = this->particleSystems->__get(particleIndex).StaticCast< ::com::gamestudiohx::babylonhx::particles::ParticleSystem >();		HX_STACK_VAR(particleSystem,"particleSystem");
									struct _Function_8_1{
										inline static bool Block( ::com::gamestudiohx::babylonhx::particles::ParticleSystem &particleSystem){
											HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",850,0x7c8236a5)
											{
												HX_STACK_LINE(850)
												return (  ((particleSystem->emitter)) ? bool(particleSystem->emitter->__Field(HX_CSTRING("isEnabled"),true)()) : bool(false) );
											}
											return null();
										}
									};
									HX_STACK_LINE(850)
									if (((  ((!((!(particleSystem->emitter->__Field(HX_CSTRING("position"),true)))))) ? bool(_Function_8_1::Block(particleSystem)) : bool(true) ))){
										HX_STACK_LINE(850)
										this->_activeParticleSystems->push(particleSystem);
										HX_STACK_LINE(850)
										particleSystem->animate();
									}
								}
							}
							HX_STACK_LINE(850)
							int _g37 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g37,"_g37");
							HX_STACK_LINE(850)
							int _g38 = (_g37 - beforeParticlesDate);		HX_STACK_VAR(_g38,"_g38");
							HX_STACK_LINE(850)
							hx::AddEq(this->_particlesDuration,_g38);
						}
						HX_STACK_LINE(850)
						int _g39 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g39,"_g39");
						HX_STACK_LINE(850)
						int _g40 = (_g39 - beforeEvaluateActiveMeshesDate);		HX_STACK_VAR(_g40,"_g40");
						HX_STACK_LINE(850)
						hx::AddEq(this->_evaluateActiveMeshesDuration,_g40);
						HX_STACK_LINE(850)
						{
							HX_STACK_LINE(850)
							int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
							HX_STACK_LINE(850)
							int _g2 = this->_activeSkeletons->length;		HX_STACK_VAR(_g2,"_g2");
							HX_STACK_LINE(850)
							while((true)){
								HX_STACK_LINE(850)
								if ((!(((_g11 < _g2))))){
									HX_STACK_LINE(850)
									break;
								}
								HX_STACK_LINE(850)
								int skeletonIndex = (_g11)++;		HX_STACK_VAR(skeletonIndex,"skeletonIndex");
								HX_STACK_LINE(850)
								::com::gamestudiohx::babylonhx::bones::Skeleton skeleton = this->_activeSkeletons->data->__GetItem(skeletonIndex);		HX_STACK_VAR(skeleton,"skeleton");
								HX_STACK_LINE(850)
								skeleton->prepare();
							}
						}
						HX_STACK_LINE(850)
						{
							HX_STACK_LINE(850)
							int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
							HX_STACK_LINE(850)
							int _g2 = this->customRenderTargets->__Field(HX_CSTRING("length"),true);		HX_STACK_VAR(_g2,"_g2");
							HX_STACK_LINE(850)
							while((true)){
								HX_STACK_LINE(850)
								if ((!(((_g11 < _g2))))){
									HX_STACK_LINE(850)
									break;
								}
								HX_STACK_LINE(850)
								int customIndex = (_g11)++;		HX_STACK_VAR(customIndex,"customIndex");
								HX_STACK_LINE(850)
								this->_renderTargets->push(this->customRenderTargets->__GetItem(customIndex));
							}
						}
						HX_STACK_LINE(850)
						int beforeRenderTargetDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeRenderTargetDate,"beforeRenderTargetDate");
						HX_STACK_LINE(850)
						if ((this->renderTargetsEnabled)){
							HX_STACK_LINE(850)
							int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
							HX_STACK_LINE(850)
							int _g2 = this->_renderTargets->length;		HX_STACK_VAR(_g2,"_g2");
							HX_STACK_LINE(850)
							while((true)){
								HX_STACK_LINE(850)
								if ((!(((_g11 < _g2))))){
									HX_STACK_LINE(850)
									break;
								}
								HX_STACK_LINE(850)
								int renderIndex = (_g11)++;		HX_STACK_VAR(renderIndex,"renderIndex");
								HX_STACK_LINE(850)
								Dynamic renderTarget = this->_renderTargets->data->__GetItem(renderIndex);		HX_STACK_VAR(renderTarget,"renderTarget");
								HX_STACK_LINE(850)
								(this->_renderId)++;
								HX_STACK_LINE(850)
								renderTarget->__Field(HX_CSTRING("render"),true)();
							}
						}
						HX_STACK_LINE(850)
						if (((this->_renderTargets->length > (int)0))){
							HX_STACK_LINE(850)
							engine->restoreDefaultFramebuffer();
						}
						HX_STACK_LINE(850)
						int _g41 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g41,"_g41");
						HX_STACK_LINE(850)
						int _g42 = (_g41 - beforeRenderTargetDate);		HX_STACK_VAR(_g42,"_g42");
						HX_STACK_LINE(850)
						this->_renderTargetsDuration = _g42;
						HX_STACK_LINE(850)
						this->postProcessManager->_prepareFrame();
						HX_STACK_LINE(850)
						int beforeRenderDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeRenderDate,"beforeRenderDate");
						HX_STACK_LINE(850)
						if (((this->layers->length > (int)0))){
							HX_STACK_LINE(850)
							engine->setDepthBuffer(false);
							HX_STACK_LINE(850)
							::com::gamestudiohx::babylonhx::layer::Layer layer = null();		HX_STACK_VAR(layer,"layer");
							HX_STACK_LINE(850)
							{
								HX_STACK_LINE(850)
								int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(850)
								int _g2 = this->layers->length;		HX_STACK_VAR(_g2,"_g2");
								HX_STACK_LINE(850)
								while((true)){
									HX_STACK_LINE(850)
									if ((!(((_g11 < _g2))))){
										HX_STACK_LINE(850)
										break;
									}
									HX_STACK_LINE(850)
									int layerIndex = (_g11)++;		HX_STACK_VAR(layerIndex,"layerIndex");
									HX_STACK_LINE(850)
									layer = this->layers->__get(layerIndex).StaticCast< ::com::gamestudiohx::babylonhx::layer::Layer >();
									HX_STACK_LINE(850)
									if ((layer->isBackground)){
										HX_STACK_LINE(850)
										layer->render();
									}
								}
							}
							HX_STACK_LINE(850)
							engine->setDepthBuffer(true);
						}
						HX_STACK_LINE(850)
						{
							HX_STACK_LINE(850)
							::com::gamestudiohx::babylonhx::rendering::RenderingManager _this = this->_renderingManager;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(850)
							Array< ::Dynamic > _g2 = Array_obj< ::Dynamic >::__new().Add(_this);		HX_STACK_VAR(_g2,"_g2");
							HX_STACK_LINE(850)
							{
								HX_STACK_LINE(850)
								int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(850)
								int _g3 = ::com::gamestudiohx::babylonhx::rendering::RenderingManager_obj::MAX_RENDERINGGROUPS;		HX_STACK_VAR(_g3,"_g3");
								HX_STACK_LINE(850)
								while((true)){
									HX_STACK_LINE(850)
									if ((!(((_g11 < _g3))))){
										HX_STACK_LINE(850)
										break;
									}
									HX_STACK_LINE(850)
									Array< int > index = Array_obj< int >::__new().Add((_g11)++);		HX_STACK_VAR(index,"index");
									HX_STACK_LINE(850)
									_this->_depthBufferAlreadyCleaned = (index->__get((int)0) == (int)0);
									HX_STACK_LINE(850)
									::com::gamestudiohx::babylonhx::rendering::RenderingGroup renderingGroup = _this->_renderingGroups->__get(index->__get((int)0)).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingGroup >();		HX_STACK_VAR(renderingGroup,"renderingGroup");
									HX_STACK_LINE(850)
									if (((renderingGroup != null()))){
										HX_STACK_LINE(850)
										_this->_clearDepthBuffer();

										HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_Function_9_1,Array< int >,index,Array< ::Dynamic >,_g2)
										Void run(){
											HX_STACK_FRAME("*","_Function_9_1",0x5206ff3f,"*._Function_9_1","com/gamestudiohx/babylonhx/Scene.hx",850,0x7c8236a5)
											{
												HX_STACK_LINE(850)
												_g2->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingManager >()->_renderSprites(index->__get((int)0));
											}
											return null();
										}
										HX_END_LOCAL_FUNC0((void))

										HX_STACK_LINE(850)
										if ((!(renderingGroup->render(null(), Dynamic(new _Function_9_1(index,_g2)))))){
											HX_STACK_LINE(850)
											_this->_renderingGroups->splice(index->__get((int)0),(int)1);
										}
									}
									else{
										HX_STACK_LINE(850)
										_this->_renderSprites(index->__get((int)0));
									}
									HX_STACK_LINE(850)
									if (((_this->_scene->_activeParticleSystems->length != (int)0))){
										HX_STACK_LINE(850)
										int beforeParticlesDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeParticlesDate,"beforeParticlesDate");
										HX_STACK_LINE(850)
										{
											HX_STACK_LINE(850)
											int _g12 = (int)0;		HX_STACK_VAR(_g12,"_g12");
											HX_STACK_LINE(850)
											int _g4 = _this->_scene->_activeParticleSystems->length;		HX_STACK_VAR(_g4,"_g4");
											HX_STACK_LINE(850)
											while((true)){
												HX_STACK_LINE(850)
												if ((!(((_g12 < _g4))))){
													HX_STACK_LINE(850)
													break;
												}
												HX_STACK_LINE(850)
												int particleIndex = (_g12)++;		HX_STACK_VAR(particleIndex,"particleIndex");
												HX_STACK_LINE(850)
												::com::gamestudiohx::babylonhx::particles::ParticleSystem particleSystem = _this->_scene->_activeParticleSystems->data->__GetItem(particleIndex);		HX_STACK_VAR(particleSystem,"particleSystem");
												HX_STACK_LINE(850)
												if (((particleSystem->renderingGroupId == index->__get((int)0)))){
													HX_STACK_LINE(850)
													_this->_clearDepthBuffer();
													struct _Function_12_1{
														inline static bool Block( ::com::gamestudiohx::babylonhx::particles::ParticleSystem &particleSystem){
															HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",850,0x7c8236a5)
															{
																HX_STACK_LINE(850)
																int _g43 = ::Lambda_obj::indexOf(null(),particleSystem->emitter);		HX_STACK_VAR(_g43,"_g43");
																HX_STACK_LINE(850)
																return (_g43 != (int)-1);
															}
															return null();
														}
													};
													HX_STACK_LINE(850)
													if (((  ((!((!(particleSystem->emitter->__Field(HX_CSTRING("position"),true)))))) ? bool(_Function_12_1::Block(particleSystem)) : bool(true) ))){
														HX_STACK_LINE(850)
														int _g44 = particleSystem->render();		HX_STACK_VAR(_g44,"_g44");
														HX_STACK_LINE(850)
														hx::AddEq(_this->_scene->_activeParticles,_g44);
													}
												}
											}
										}
										HX_STACK_LINE(850)
										int _g45 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g45,"_g45");
										HX_STACK_LINE(850)
										int _g46 = (_g45 - beforeParticlesDate);		HX_STACK_VAR(_g46,"_g46");
										HX_STACK_LINE(850)
										hx::AddEq(_this->_scene->_particlesDuration,_g46);
									}
								}
							}
						}
						HX_STACK_LINE(850)
						{
							HX_STACK_LINE(850)
							int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
							HX_STACK_LINE(850)
							int _g2 = this->lensFlareSystems->length;		HX_STACK_VAR(_g2,"_g2");
							HX_STACK_LINE(850)
							while((true)){
								HX_STACK_LINE(850)
								if ((!(((_g11 < _g2))))){
									HX_STACK_LINE(850)
									break;
								}
								HX_STACK_LINE(850)
								int lensFlareSystemIndex = (_g11)++;		HX_STACK_VAR(lensFlareSystemIndex,"lensFlareSystemIndex");
								HX_STACK_LINE(850)
								this->lensFlareSystems->__get(lensFlareSystemIndex).StaticCast< ::com::gamestudiohx::babylonhx::lensflare::LensFlareSystem >()->render();
							}
						}
						HX_STACK_LINE(850)
						if (((this->layers->length > (int)0))){
							HX_STACK_LINE(850)
							engine->setDepthBuffer(false);
							HX_STACK_LINE(850)
							{
								HX_STACK_LINE(850)
								int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(850)
								int _g2 = this->layers->length;		HX_STACK_VAR(_g2,"_g2");
								HX_STACK_LINE(850)
								while((true)){
									HX_STACK_LINE(850)
									if ((!(((_g11 < _g2))))){
										HX_STACK_LINE(850)
										break;
									}
									HX_STACK_LINE(850)
									int layerIndex = (_g11)++;		HX_STACK_VAR(layerIndex,"layerIndex");
									HX_STACK_LINE(850)
									::com::gamestudiohx::babylonhx::layer::Layer layer = this->layers->__get(layerIndex).StaticCast< ::com::gamestudiohx::babylonhx::layer::Layer >();		HX_STACK_VAR(layer,"layer");
									HX_STACK_LINE(850)
									if ((!(layer->isBackground))){
										HX_STACK_LINE(850)
										layer->render();
									}
								}
							}
							HX_STACK_LINE(850)
							engine->setDepthBuffer(true);
						}
						HX_STACK_LINE(850)
						int _g47 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g47,"_g47");
						HX_STACK_LINE(850)
						int _g48 = (_g47 - beforeRenderDate);		HX_STACK_VAR(_g48,"_g48");
						HX_STACK_LINE(850)
						hx::AddEq(this->_renderDuration,_g48);
						HX_STACK_LINE(850)
						this->postProcessManager->_finalizeFrame();
						HX_STACK_LINE(850)
						this->activeCamera->_update();
						HX_STACK_LINE(850)
						this->_renderTargets->reset();
					}
				}
			}
		}
		else{
			HX_STACK_LINE(853)
			bool mustClearDepth = false;		HX_STACK_VAR(mustClearDepth,"mustClearDepth");
			HX_STACK_LINE(853)
			::com::gamestudiohx::babylonhx::Engine engine = this->_engine;		HX_STACK_VAR(engine,"engine");
			HX_STACK_LINE(853)
			this->activeCamera = this->activeCamera;
			HX_STACK_LINE(853)
			if (((this->activeCamera == null()))){
				HX_STACK_LINE(853)
				HX_STACK_DO_THROW(HX_CSTRING("Active camera not set"));
			}
			HX_STACK_LINE(853)
			engine->setViewport(this->activeCamera->viewport,null(),null());
			HX_STACK_LINE(853)
			if ((mustClearDepth)){
				HX_STACK_LINE(853)
				this->_engine->clear(this->clearColor,false,true);
			}
			HX_STACK_LINE(853)
			(this->_renderId)++;
			HX_STACK_LINE(853)
			{
				HX_STACK_LINE(853)
				::com::gamestudiohx::babylonhx::tools::math::Matrix view;		HX_STACK_VAR(view,"view");
				HX_STACK_LINE(853)
				{
					HX_STACK_LINE(853)
					::com::gamestudiohx::babylonhx::cameras::Camera _this = this->activeCamera;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(853)
					::com::gamestudiohx::babylonhx::tools::math::Matrix _g50;		HX_STACK_VAR(_g50,"_g50");
					HX_STACK_LINE(853)
					{
						HX_STACK_LINE(853)
						bool force = false;		HX_STACK_VAR(force,"force");
						HX_STACK_LINE(853)
						if ((!(((  ((!(force))) ? bool(_this->_isSynchronizedViewMatrix()) : bool(false) ))))){
							HX_STACK_LINE(853)
							_this->_syncChildFlag();
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _g49 = _this->_getViewMatrix();		HX_STACK_VAR(_g49,"_g49");
							HX_STACK_LINE(853)
							_this->_computedViewMatrix = _g49;
						}
						HX_STACK_LINE(853)
						_g50 = _this->_computedViewMatrix;
					}
					HX_STACK_LINE(853)
					_this->_computedViewMatrix = _g50;
					struct _Function_4_1{
						inline static bool Block( ::com::gamestudiohx::babylonhx::cameras::Camera _this){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",853,0x7c8236a5)
							{
								HX_STACK_LINE(853)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _g51 = _this->parent->getWorldMatrix();		HX_STACK_VAR(_g51,"_g51");
								HX_STACK_LINE(853)
								return (_g51 == null());
							}
							return null();
						}
					};
					struct _Function_4_2{
						inline static bool Block( ::com::gamestudiohx::babylonhx::cameras::Camera _this){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",853,0x7c8236a5)
							{
								HX_STACK_LINE(853)
								return (  ((!(_this->hasNewParent(null())))) ? bool(_this->parent->isSynchronized(null())) : bool(false) );
							}
							return null();
						}
					};
					HX_STACK_LINE(853)
					if ((!(((  ((!(((  ((!(((_this->parent == null()))))) ? bool(_Function_4_1::Block(_this)) : bool(true) ))))) ? bool(_Function_4_2::Block(_this)) : bool(true) ))))){
						HX_STACK_LINE(853)
						if (((_this->_worldMatrix == null()))){
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _g52;		HX_STACK_VAR(_g52,"_g52");
							HX_STACK_LINE(853)
							{
								HX_STACK_LINE(853)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = ::com::gamestudiohx::babylonhx::tools::math::Matrix_obj::__new();		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(853)
								result->m[(int)0] = 1.0;
								HX_STACK_LINE(853)
								result->m[(int)1] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)2] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)4] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)5] = 1.0;
								HX_STACK_LINE(853)
								result->m[(int)6] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)8] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)9] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)10] = 1.0;
								HX_STACK_LINE(853)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)12] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)13] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)14] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(853)
								_g52 = result;
							}
							HX_STACK_LINE(853)
							_this->_worldMatrix = _g52;
						}
						HX_STACK_LINE(853)
						{
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this1 = _this->_computedViewMatrix;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = _this->_worldMatrix;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(853)
							Float l1 = _this1->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
							HX_STACK_LINE(853)
							Float l2 = _this1->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
							HX_STACK_LINE(853)
							Float l3 = _this1->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
							HX_STACK_LINE(853)
							Float l4 = _this1->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
							HX_STACK_LINE(853)
							Float l5 = _this1->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
							HX_STACK_LINE(853)
							Float l6 = _this1->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
							HX_STACK_LINE(853)
							Float l7 = _this1->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
							HX_STACK_LINE(853)
							Float l8 = _this1->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
							HX_STACK_LINE(853)
							Float l9 = _this1->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
							HX_STACK_LINE(853)
							Float l10 = _this1->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
							HX_STACK_LINE(853)
							Float l11 = _this1->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
							HX_STACK_LINE(853)
							Float l12 = _this1->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
							HX_STACK_LINE(853)
							Float l13 = _this1->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
							HX_STACK_LINE(853)
							Float l14 = _this1->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
							HX_STACK_LINE(853)
							Float l15 = _this1->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
							HX_STACK_LINE(853)
							Float l16 = _this1->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
							HX_STACK_LINE(853)
							Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
							HX_STACK_LINE(853)
							Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
							HX_STACK_LINE(853)
							Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
							HX_STACK_LINE(853)
							Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
							HX_STACK_LINE(853)
							Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
							HX_STACK_LINE(853)
							Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
							HX_STACK_LINE(853)
							Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
							HX_STACK_LINE(853)
							Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
							HX_STACK_LINE(853)
							Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
							HX_STACK_LINE(853)
							Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
							HX_STACK_LINE(853)
							Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
							HX_STACK_LINE(853)
							Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
							HX_STACK_LINE(853)
							Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
							HX_STACK_LINE(853)
							Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
							HX_STACK_LINE(853)
							Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
							HX_STACK_LINE(853)
							Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
							HX_STACK_LINE(853)
							Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
							HX_STACK_LINE(853)
							Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
							HX_STACK_LINE(853)
							Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
							HX_STACK_LINE(853)
							Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
							HX_STACK_LINE(853)
							Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
							HX_STACK_LINE(853)
							Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
							HX_STACK_LINE(853)
							Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
							HX_STACK_LINE(853)
							other->m[(int)0] = (l23 * l27);
							HX_STACK_LINE(853)
							other->m[(int)4] = (l24 * l27);
							HX_STACK_LINE(853)
							other->m[(int)8] = (l25 * l27);
							HX_STACK_LINE(853)
							other->m[(int)12] = (l26 * l27);
							HX_STACK_LINE(853)
							other->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
							HX_STACK_LINE(853)
							other->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
							HX_STACK_LINE(853)
							other->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
							HX_STACK_LINE(853)
							other->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
							HX_STACK_LINE(853)
							other->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
							HX_STACK_LINE(853)
							other->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
							HX_STACK_LINE(853)
							other->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
							HX_STACK_LINE(853)
							other->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
							HX_STACK_LINE(853)
							other->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
							HX_STACK_LINE(853)
							other->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
							HX_STACK_LINE(853)
							other->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
							HX_STACK_LINE(853)
							other->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
						}
						HX_STACK_LINE(853)
						{
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this1 = _this->_worldMatrix;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = _this->parent->getWorldMatrix();		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(853)
							{
								HX_STACK_LINE(853)
								Array< Float > result = _this->_computedViewMatrix->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(853)
								Float tm0 = _this1->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(853)
								Float tm1 = _this1->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(853)
								Float tm2 = _this1->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(853)
								Float tm3 = _this1->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(853)
								Float tm4 = _this1->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(853)
								Float tm5 = _this1->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(853)
								Float tm6 = _this1->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(853)
								Float tm7 = _this1->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(853)
								Float tm8 = _this1->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(853)
								Float tm9 = _this1->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(853)
								Float tm10 = _this1->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(853)
								Float tm11 = _this1->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(853)
								Float tm12 = _this1->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(853)
								Float tm13 = _this1->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(853)
								Float tm14 = _this1->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(853)
								Float tm15 = _this1->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(853)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(853)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(853)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(853)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(853)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(853)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(853)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(853)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(853)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(853)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(853)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(853)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(853)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(853)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(853)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(853)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(853)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(853)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(853)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(853)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(853)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(853)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(853)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(853)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(853)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(853)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(853)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(853)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(853)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(853)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(853)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(853)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(853)
								result;
							}
						}
						HX_STACK_LINE(853)
						{
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this1 = _this->_computedViewMatrix;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(853)
							{
								HX_STACK_LINE(853)
								Float l1 = _this1->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
								HX_STACK_LINE(853)
								Float l2 = _this1->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
								HX_STACK_LINE(853)
								Float l3 = _this1->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
								HX_STACK_LINE(853)
								Float l4 = _this1->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
								HX_STACK_LINE(853)
								Float l5 = _this1->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
								HX_STACK_LINE(853)
								Float l6 = _this1->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
								HX_STACK_LINE(853)
								Float l7 = _this1->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
								HX_STACK_LINE(853)
								Float l8 = _this1->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
								HX_STACK_LINE(853)
								Float l9 = _this1->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
								HX_STACK_LINE(853)
								Float l10 = _this1->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
								HX_STACK_LINE(853)
								Float l11 = _this1->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
								HX_STACK_LINE(853)
								Float l12 = _this1->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
								HX_STACK_LINE(853)
								Float l13 = _this1->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
								HX_STACK_LINE(853)
								Float l14 = _this1->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
								HX_STACK_LINE(853)
								Float l15 = _this1->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
								HX_STACK_LINE(853)
								Float l16 = _this1->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
								HX_STACK_LINE(853)
								Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
								HX_STACK_LINE(853)
								Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
								HX_STACK_LINE(853)
								Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
								HX_STACK_LINE(853)
								Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
								HX_STACK_LINE(853)
								Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
								HX_STACK_LINE(853)
								Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
								HX_STACK_LINE(853)
								Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
								HX_STACK_LINE(853)
								Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
								HX_STACK_LINE(853)
								Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
								HX_STACK_LINE(853)
								Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
								HX_STACK_LINE(853)
								Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
								HX_STACK_LINE(853)
								Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
								HX_STACK_LINE(853)
								Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
								HX_STACK_LINE(853)
								Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
								HX_STACK_LINE(853)
								Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
								HX_STACK_LINE(853)
								Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
								HX_STACK_LINE(853)
								Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
								HX_STACK_LINE(853)
								Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
								HX_STACK_LINE(853)
								Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
								HX_STACK_LINE(853)
								Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
								HX_STACK_LINE(853)
								Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
								HX_STACK_LINE(853)
								Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
								HX_STACK_LINE(853)
								Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
								HX_STACK_LINE(853)
								_this1->m[(int)0] = (l23 * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)4] = (l24 * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)8] = (l25 * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)12] = (l26 * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
								HX_STACK_LINE(853)
								_this1->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
							}
						}
					}
					HX_STACK_LINE(853)
					view = _this->_computedViewMatrix;
				}
				HX_STACK_LINE(853)
				::com::gamestudiohx::babylonhx::tools::math::Matrix projection;		HX_STACK_VAR(projection,"projection");
				HX_STACK_LINE(853)
				{
					HX_STACK_LINE(853)
					::com::gamestudiohx::babylonhx::cameras::Camera _this = this->activeCamera;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(853)
					bool force = false;		HX_STACK_VAR(force,"force");
					HX_STACK_LINE(853)
					if ((!(((  ((!(force))) ? bool(_this->_isSynchronizedProjectionMatrix()) : bool(false) ))))){
						HX_STACK_LINE(853)
						::com::gamestudiohx::babylonhx::Engine engine1 = _this->_scene->getEngine();		HX_STACK_VAR(engine1,"engine1");
						HX_STACK_LINE(853)
						if (((_this->mode == ::com::gamestudiohx::babylonhx::cameras::Camera_obj::PERSPECTIVE_CAMERA))){
							HX_STACK_LINE(853)
							Float aspect = engine1->getAspectRatio(_this);		HX_STACK_VAR(aspect,"aspect");
							HX_STACK_LINE(853)
							Float znear = _this->minZ;		HX_STACK_VAR(znear,"znear");
							HX_STACK_LINE(853)
							Float zfar = _this->maxZ;		HX_STACK_VAR(zfar,"zfar");
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = _this->_projectionMatrix;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(853)
							Float _g53 = ::Math_obj::tan((_this->fov * 0.5));		HX_STACK_VAR(_g53,"_g53");
							HX_STACK_LINE(853)
							Float tan = (Float(1.0) / Float(_g53));		HX_STACK_VAR(tan,"tan");
							HX_STACK_LINE(853)
							result->m[(int)0] = (Float(tan) / Float(aspect));
							HX_STACK_LINE(853)
							result->m[(int)1] = result->m[(int)2] = result->m[(int)3] = 0.0;
							HX_STACK_LINE(853)
							result->m[(int)5] = tan;
							HX_STACK_LINE(853)
							result->m[(int)4] = result->m[(int)6] = result->m[(int)7] = 0.0;
							HX_STACK_LINE(853)
							result->m[(int)8] = result->m[(int)9] = 0.0;
							HX_STACK_LINE(853)
							result->m[(int)10] = (Float(-(zfar)) / Float(((znear - zfar))));
							HX_STACK_LINE(853)
							result->m[(int)11] = 1.0;
							HX_STACK_LINE(853)
							result->m[(int)12] = result->m[(int)13] = result->m[(int)15] = 0.0;
							HX_STACK_LINE(853)
							result->m[(int)14] = (Float((znear * zfar)) / Float(((znear - zfar))));
							HX_STACK_LINE(853)
							result;
						}
						else{
							HX_STACK_LINE(853)
							int _g54 = engine1->getRenderWidth();		HX_STACK_VAR(_g54,"_g54");
							HX_STACK_LINE(853)
							Float halfWidth = (Float(_g54) / Float(2.0));		HX_STACK_VAR(halfWidth,"halfWidth");
							HX_STACK_LINE(853)
							int _g55 = engine1->getRenderHeight();		HX_STACK_VAR(_g55,"_g55");
							HX_STACK_LINE(853)
							Float halfHeight = (Float(_g55) / Float(2.0));		HX_STACK_VAR(halfHeight,"halfHeight");
							HX_STACK_LINE(853)
							{
								HX_STACK_LINE(853)
								Float left;		HX_STACK_VAR(left,"left");
								HX_STACK_LINE(853)
								if (((_this->orthoLeft == null()))){
									HX_STACK_LINE(853)
									left = -(halfWidth);
								}
								else{
									HX_STACK_LINE(853)
									left = _this->orthoLeft;
								}
								HX_STACK_LINE(853)
								Float right;		HX_STACK_VAR(right,"right");
								HX_STACK_LINE(853)
								if (((_this->orthoRight == null()))){
									HX_STACK_LINE(853)
									right = halfWidth;
								}
								else{
									HX_STACK_LINE(853)
									right = _this->orthoRight;
								}
								HX_STACK_LINE(853)
								Float bottom;		HX_STACK_VAR(bottom,"bottom");
								HX_STACK_LINE(853)
								if (((_this->orthoBottom == null()))){
									HX_STACK_LINE(853)
									bottom = -(halfHeight);
								}
								else{
									HX_STACK_LINE(853)
									bottom = _this->orthoBottom;
								}
								HX_STACK_LINE(853)
								Float top;		HX_STACK_VAR(top,"top");
								HX_STACK_LINE(853)
								if (((_this->orthoTop == null()))){
									HX_STACK_LINE(853)
									top = halfHeight;
								}
								else{
									HX_STACK_LINE(853)
									top = _this->orthoTop;
								}
								HX_STACK_LINE(853)
								Float znear = _this->minZ;		HX_STACK_VAR(znear,"znear");
								HX_STACK_LINE(853)
								Float zfar = _this->maxZ;		HX_STACK_VAR(zfar,"zfar");
								HX_STACK_LINE(853)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = _this->_projectionMatrix;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(853)
								result->m[(int)0] = (Float(2.0) / Float(((right - left))));
								HX_STACK_LINE(853)
								result->m[(int)1] = result->m[(int)2] = result->m[(int)3] = result->m[(int)4] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)5] = (Float(2.0) / Float(((top - bottom))));
								HX_STACK_LINE(853)
								result->m[(int)6] = result->m[(int)7] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)8] = result->m[(int)9] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)10] = (Float((int)-1) / Float(((znear - zfar))));
								HX_STACK_LINE(853)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(853)
								result->m[(int)12] = (Float(((left + right))) / Float(((left - right))));
								HX_STACK_LINE(853)
								result->m[(int)13] = (Float(((top + bottom))) / Float(((bottom - top))));
								HX_STACK_LINE(853)
								result->m[(int)14] = (Float(znear) / Float(((znear - zfar))));
								HX_STACK_LINE(853)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(853)
								result;
							}
						}
					}
					HX_STACK_LINE(853)
					projection = _this->_projectionMatrix;
				}
				HX_STACK_LINE(853)
				this->_viewMatrix = view;
				HX_STACK_LINE(853)
				this->_projectionMatrix = projection;
				HX_STACK_LINE(853)
				{
					HX_STACK_LINE(853)
					::com::gamestudiohx::babylonhx::tools::math::Matrix _this = this->_viewMatrix;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(853)
					::com::gamestudiohx::babylonhx::tools::math::Matrix other = this->_projectionMatrix;		HX_STACK_VAR(other,"other");
					HX_STACK_LINE(853)
					{
						HX_STACK_LINE(853)
						Array< Float > result = this->_transformMatrix->m;		HX_STACK_VAR(result,"result");
						HX_STACK_LINE(853)
						Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
						HX_STACK_LINE(853)
						Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
						HX_STACK_LINE(853)
						Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
						HX_STACK_LINE(853)
						Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
						HX_STACK_LINE(853)
						Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
						HX_STACK_LINE(853)
						Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
						HX_STACK_LINE(853)
						Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
						HX_STACK_LINE(853)
						Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
						HX_STACK_LINE(853)
						Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
						HX_STACK_LINE(853)
						Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
						HX_STACK_LINE(853)
						Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
						HX_STACK_LINE(853)
						Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
						HX_STACK_LINE(853)
						Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
						HX_STACK_LINE(853)
						Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
						HX_STACK_LINE(853)
						Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
						HX_STACK_LINE(853)
						Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
						HX_STACK_LINE(853)
						Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
						HX_STACK_LINE(853)
						Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
						HX_STACK_LINE(853)
						Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
						HX_STACK_LINE(853)
						Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
						HX_STACK_LINE(853)
						Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
						HX_STACK_LINE(853)
						Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
						HX_STACK_LINE(853)
						Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
						HX_STACK_LINE(853)
						Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
						HX_STACK_LINE(853)
						Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
						HX_STACK_LINE(853)
						Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
						HX_STACK_LINE(853)
						Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
						HX_STACK_LINE(853)
						Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
						HX_STACK_LINE(853)
						Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
						HX_STACK_LINE(853)
						Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
						HX_STACK_LINE(853)
						Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
						HX_STACK_LINE(853)
						Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
						HX_STACK_LINE(853)
						result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
						HX_STACK_LINE(853)
						result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
						HX_STACK_LINE(853)
						result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
						HX_STACK_LINE(853)
						result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
						HX_STACK_LINE(853)
						result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
						HX_STACK_LINE(853)
						result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
						HX_STACK_LINE(853)
						result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
						HX_STACK_LINE(853)
						result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
						HX_STACK_LINE(853)
						result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
						HX_STACK_LINE(853)
						result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
						HX_STACK_LINE(853)
						result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
						HX_STACK_LINE(853)
						result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
						HX_STACK_LINE(853)
						result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
						HX_STACK_LINE(853)
						result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
						HX_STACK_LINE(853)
						result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
						HX_STACK_LINE(853)
						result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
						HX_STACK_LINE(853)
						result;
					}
				}
			}
			HX_STACK_LINE(853)
			int beforeEvaluateActiveMeshesDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeEvaluateActiveMeshesDate,"beforeEvaluateActiveMeshesDate");
			HX_STACK_LINE(853)
			{
				HX_STACK_LINE(853)
				this->_activeMeshes->reset();
				HX_STACK_LINE(853)
				this->_renderingManager->reset();
				HX_STACK_LINE(853)
				this->_processedMaterials->reset();
				HX_STACK_LINE(853)
				this->_activeParticleSystems->reset();
				HX_STACK_LINE(853)
				this->_activeSkeletons->reset();
				HX_STACK_LINE(853)
				if (((this->_frustumPlanes == null()))){
					HX_STACK_LINE(853)
					Array< ::Dynamic > _g56 = ::com::gamestudiohx::babylonhx::tools::math::Frustum_obj::GetPlanes(this->_transformMatrix);		HX_STACK_VAR(_g56,"_g56");
					HX_STACK_LINE(853)
					this->_frustumPlanes = _g56;
				}
				else{
					HX_STACK_LINE(853)
					Array< ::Dynamic > _g57;		HX_STACK_VAR(_g57,"_g57");
					HX_STACK_LINE(853)
					{
						HX_STACK_LINE(853)
						::com::gamestudiohx::babylonhx::tools::math::Matrix transform = this->_transformMatrix;		HX_STACK_VAR(transform,"transform");
						HX_STACK_LINE(853)
						Array< ::Dynamic > frustumPlanes = this->_frustumPlanes;		HX_STACK_VAR(frustumPlanes,"frustumPlanes");
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) + transform->m->__get((int)2));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) + transform->m->__get((int)6));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)10) + transform->m->__get((int)10));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) + transform->m->__get((int)14));
						HX_STACK_LINE(853)
						{
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(853)
							Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
							HX_STACK_LINE(853)
							Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
							HX_STACK_LINE(853)
							if (((norm != (int)0))){
								HX_STACK_LINE(853)
								magnitude = (Float(1.0) / Float(norm));
							}
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->x,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->y,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->z,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->d,magnitude);
						}
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) - transform->m->__get((int)2));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) - transform->m->__get((int)6));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) - transform->m->__get((int)10));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) - transform->m->__get((int)14));
						HX_STACK_LINE(853)
						{
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)1).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(853)
							Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
							HX_STACK_LINE(853)
							Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
							HX_STACK_LINE(853)
							if (((norm != (int)0))){
								HX_STACK_LINE(853)
								magnitude = (Float(1.0) / Float(norm));
							}
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->x,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->y,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->z,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->d,magnitude);
						}
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) + transform->m->__get((int)0));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) + transform->m->__get((int)4));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) + transform->m->__get((int)8));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) + transform->m->__get((int)12));
						HX_STACK_LINE(853)
						{
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)2).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(853)
							Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
							HX_STACK_LINE(853)
							Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
							HX_STACK_LINE(853)
							if (((norm != (int)0))){
								HX_STACK_LINE(853)
								magnitude = (Float(1.0) / Float(norm));
							}
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->x,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->y,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->z,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->d,magnitude);
						}
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) - transform->m->__get((int)0));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) - transform->m->__get((int)4));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) - transform->m->__get((int)8));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) - transform->m->__get((int)12));
						HX_STACK_LINE(853)
						{
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)3).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(853)
							Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
							HX_STACK_LINE(853)
							Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
							HX_STACK_LINE(853)
							if (((norm != (int)0))){
								HX_STACK_LINE(853)
								magnitude = (Float(1.0) / Float(norm));
							}
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->x,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->y,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->z,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->d,magnitude);
						}
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) - transform->m->__get((int)1));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) - transform->m->__get((int)5));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) - transform->m->__get((int)9));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) - transform->m->__get((int)13));
						HX_STACK_LINE(853)
						{
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)4).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(853)
							Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
							HX_STACK_LINE(853)
							Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
							HX_STACK_LINE(853)
							if (((norm != (int)0))){
								HX_STACK_LINE(853)
								magnitude = (Float(1.0) / Float(norm));
							}
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->x,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->y,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->z,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->d,magnitude);
						}
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->x = (transform->m->__get((int)3) + transform->m->__get((int)1));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->y = (transform->m->__get((int)7) + transform->m->__get((int)5));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->normal->z = (transform->m->__get((int)11) + transform->m->__get((int)9));
						HX_STACK_LINE(853)
						frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >()->d = (transform->m->__get((int)15) + transform->m->__get((int)13));
						HX_STACK_LINE(853)
						{
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Plane _this = frustumPlanes->__get((int)5).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Plane >();		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(853)
							Float norm = ::Math_obj::sqrt((((_this->normal->x * _this->normal->x) + (_this->normal->y * _this->normal->y)) + (_this->normal->z * _this->normal->z)));		HX_STACK_VAR(norm,"norm");
							HX_STACK_LINE(853)
							Float magnitude = (int)0;		HX_STACK_VAR(magnitude,"magnitude");
							HX_STACK_LINE(853)
							if (((norm != (int)0))){
								HX_STACK_LINE(853)
								magnitude = (Float(1.0) / Float(norm));
							}
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->x,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->y,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->normal->z,magnitude);
							HX_STACK_LINE(853)
							hx::MultEq(_this->d,magnitude);
						}
						HX_STACK_LINE(853)
						_g57 = frustumPlanes;
					}
					HX_STACK_LINE(853)
					this->_frustumPlanes = _g57;
				}
				HX_STACK_LINE(853)
				if (((this->_selectionOctree != null()))){
					HX_STACK_LINE(853)
					Array< ::Dynamic > selection = this->_selectionOctree->select(this->_frustumPlanes);		HX_STACK_VAR(selection,"selection");
					HX_STACK_LINE(853)
					{
						HX_STACK_LINE(853)
						int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
						HX_STACK_LINE(853)
						int _g = selection->length;		HX_STACK_VAR(_g,"_g");
						HX_STACK_LINE(853)
						while((true)){
							HX_STACK_LINE(853)
							if ((!(((_g1 < _g))))){
								HX_STACK_LINE(853)
								break;
							}
							HX_STACK_LINE(853)
							int blockIndex = (_g1)++;		HX_STACK_VAR(blockIndex,"blockIndex");
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::culling::octrees::OctreeBlock block = selection->__get(blockIndex).StaticCast< ::com::gamestudiohx::babylonhx::culling::octrees::OctreeBlock >();		HX_STACK_VAR(block,"block");
							HX_STACK_LINE(853)
							{
								HX_STACK_LINE(853)
								int _g3 = (int)0;		HX_STACK_VAR(_g3,"_g3");
								HX_STACK_LINE(853)
								int _g2 = block->meshes->length;		HX_STACK_VAR(_g2,"_g2");
								HX_STACK_LINE(853)
								while((true)){
									HX_STACK_LINE(853)
									if ((!(((_g3 < _g2))))){
										HX_STACK_LINE(853)
										break;
									}
									HX_STACK_LINE(853)
									int meshIndex = (_g3)++;		HX_STACK_VAR(meshIndex,"meshIndex");
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = block->meshes->__get(meshIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
									HX_STACK_LINE(853)
									if (((mesh->_renderId != this->_renderId))){
										HX_STACK_LINE(853)
										int _g58 = mesh->getTotalVertices();		HX_STACK_VAR(_g58,"_g58");
										HX_STACK_LINE(853)
										hx::AddEq(this->_totalVertices,_g58);
										HX_STACK_LINE(853)
										if ((!(mesh->isReady()))){
											HX_STACK_LINE(853)
											continue;
										}
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											bool force = false;		HX_STACK_VAR(force,"force");
											HX_STACK_LINE(853)
											::com::gamestudiohx::babylonhx::tools::math::Matrix ret = mesh->_worldMatrix;		HX_STACK_VAR(ret,"ret");
											struct _Function_10_1{
												inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
													HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",853,0x7c8236a5)
													{
														HX_STACK_LINE(853)
														int _g59 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g59,"_g59");
														HX_STACK_LINE(853)
														return (  ((!(((mesh->_currentRenderId == _g59))))) ? bool(mesh->isSynchronized(null())) : bool(true) );
													}
													return null();
												}
											};
											HX_STACK_LINE(853)
											if (((  ((!(force))) ? bool(_Function_10_1::Block(mesh)) : bool(false) ))){
												HX_STACK_LINE(853)
												mesh->_childrenFlag = (int)0;
											}
											else{
												HX_STACK_LINE(853)
												mesh->_childrenFlag = (int)1;
												HX_STACK_LINE(853)
												mesh->_cache->__Field(HX_CSTRING("position"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->position);
												HX_STACK_LINE(853)
												mesh->_cache->__Field(HX_CSTRING("scaling"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->scaling);
												HX_STACK_LINE(853)
												mesh->_cache->__FieldRef(HX_CSTRING("pivotMatrixUpdated")) = false;
												HX_STACK_LINE(853)
												int _g60 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g60,"_g60");
												HX_STACK_LINE(853)
												mesh->_currentRenderId = _g60;
												HX_STACK_LINE(853)
												{
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localScaling;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(853)
													result->m[(int)0] = mesh->scaling->x;
													HX_STACK_LINE(853)
													result->m[(int)1] = (int)0;
													HX_STACK_LINE(853)
													result->m[(int)2] = (int)0;
													HX_STACK_LINE(853)
													result->m[(int)3] = (int)0;
													HX_STACK_LINE(853)
													result->m[(int)4] = (int)0;
													HX_STACK_LINE(853)
													result->m[(int)5] = mesh->scaling->y;
													HX_STACK_LINE(853)
													result->m[(int)6] = (int)0;
													HX_STACK_LINE(853)
													result->m[(int)7] = (int)0;
													HX_STACK_LINE(853)
													result->m[(int)8] = (int)0;
													HX_STACK_LINE(853)
													result->m[(int)9] = (int)0;
													HX_STACK_LINE(853)
													result->m[(int)10] = mesh->scaling->z;
													HX_STACK_LINE(853)
													result->m[(int)11] = (int)0;
													HX_STACK_LINE(853)
													result->m[(int)12] = (int)0;
													HX_STACK_LINE(853)
													result->m[(int)13] = (int)0;
													HX_STACK_LINE(853)
													result->m[(int)14] = (int)0;
													HX_STACK_LINE(853)
													result->m[(int)15] = 1.0;
													HX_STACK_LINE(853)
													result;
												}
												HX_STACK_LINE(853)
												if (((mesh->rotationQuaternion != null()))){
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Quaternion _this = mesh->rotationQuaternion;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(853)
														Float xx = (_this->x * _this->x);		HX_STACK_VAR(xx,"xx");
														HX_STACK_LINE(853)
														Float yy = (_this->y * _this->y);		HX_STACK_VAR(yy,"yy");
														HX_STACK_LINE(853)
														Float zz = (_this->z * _this->z);		HX_STACK_VAR(zz,"zz");
														HX_STACK_LINE(853)
														Float xy = (_this->x * _this->y);		HX_STACK_VAR(xy,"xy");
														HX_STACK_LINE(853)
														Float zw = (_this->z * _this->w);		HX_STACK_VAR(zw,"zw");
														HX_STACK_LINE(853)
														Float zx = (_this->z * _this->x);		HX_STACK_VAR(zx,"zx");
														HX_STACK_LINE(853)
														Float yw = (_this->y * _this->w);		HX_STACK_VAR(yw,"yw");
														HX_STACK_LINE(853)
														Float yz = (_this->y * _this->z);		HX_STACK_VAR(yz,"yz");
														HX_STACK_LINE(853)
														Float xw = (_this->x * _this->w);		HX_STACK_VAR(xw,"xw");
														HX_STACK_LINE(853)
														result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
														HX_STACK_LINE(853)
														result->m[(int)1] = (2.0 * ((xy + zw)));
														HX_STACK_LINE(853)
														result->m[(int)2] = (2.0 * ((zx - yw)));
														HX_STACK_LINE(853)
														result->m[(int)3] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)4] = (2.0 * ((xy - zw)));
														HX_STACK_LINE(853)
														result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
														HX_STACK_LINE(853)
														result->m[(int)6] = (2.0 * ((yz + xw)));
														HX_STACK_LINE(853)
														result->m[(int)7] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)8] = (2.0 * ((zx + yw)));
														HX_STACK_LINE(853)
														result->m[(int)9] = (2.0 * ((yz - xw)));
														HX_STACK_LINE(853)
														result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
														HX_STACK_LINE(853)
														result->m[(int)11] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)12] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)13] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)14] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)15] = 1.0;
														HX_STACK_LINE(853)
														result;
													}
													HX_STACK_LINE(853)
													mesh->_cache->__Field(HX_CSTRING("rotationQuaternion"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotationQuaternion);
												}
												else{
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Quaternion tempQuaternion = ::com::gamestudiohx::babylonhx::tools::math::Quaternion_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tempQuaternion,"tempQuaternion");
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Quaternion _g61;		HX_STACK_VAR(_g61,"_g61");
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															Float halfRoll = (mesh->rotation->z * 0.5);		HX_STACK_VAR(halfRoll,"halfRoll");
															HX_STACK_LINE(853)
															Float halfPitch = (mesh->rotation->x * 0.5);		HX_STACK_VAR(halfPitch,"halfPitch");
															HX_STACK_LINE(853)
															Float halfYaw = (mesh->rotation->y * 0.5);		HX_STACK_VAR(halfYaw,"halfYaw");
															HX_STACK_LINE(853)
															Float sinRoll = ::Math_obj::sin(halfRoll);		HX_STACK_VAR(sinRoll,"sinRoll");
															HX_STACK_LINE(853)
															Float cosRoll = ::Math_obj::cos(halfRoll);		HX_STACK_VAR(cosRoll,"cosRoll");
															HX_STACK_LINE(853)
															Float sinPitch = ::Math_obj::sin(halfPitch);		HX_STACK_VAR(sinPitch,"sinPitch");
															HX_STACK_LINE(853)
															Float cosPitch = ::Math_obj::cos(halfPitch);		HX_STACK_VAR(cosPitch,"cosPitch");
															HX_STACK_LINE(853)
															Float sinYaw = ::Math_obj::sin(halfYaw);		HX_STACK_VAR(sinYaw,"sinYaw");
															HX_STACK_LINE(853)
															Float cosYaw = ::Math_obj::cos(halfYaw);		HX_STACK_VAR(cosYaw,"cosYaw");
															HX_STACK_LINE(853)
															tempQuaternion->x = (((cosYaw * sinPitch) * cosRoll) + ((sinYaw * cosPitch) * sinRoll));
															HX_STACK_LINE(853)
															tempQuaternion->y = (((sinYaw * cosPitch) * cosRoll) - ((cosYaw * sinPitch) * sinRoll));
															HX_STACK_LINE(853)
															tempQuaternion->z = (((cosYaw * cosPitch) * sinRoll) - ((sinYaw * sinPitch) * cosRoll));
															HX_STACK_LINE(853)
															tempQuaternion->w = (((cosYaw * cosPitch) * cosRoll) + ((sinYaw * sinPitch) * sinRoll));
															HX_STACK_LINE(853)
															_g61 = tempQuaternion;
														}
														HX_STACK_LINE(853)
														tempQuaternion = _g61;
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															Float xx = (tempQuaternion->x * tempQuaternion->x);		HX_STACK_VAR(xx,"xx");
															HX_STACK_LINE(853)
															Float yy = (tempQuaternion->y * tempQuaternion->y);		HX_STACK_VAR(yy,"yy");
															HX_STACK_LINE(853)
															Float zz = (tempQuaternion->z * tempQuaternion->z);		HX_STACK_VAR(zz,"zz");
															HX_STACK_LINE(853)
															Float xy = (tempQuaternion->x * tempQuaternion->y);		HX_STACK_VAR(xy,"xy");
															HX_STACK_LINE(853)
															Float zw = (tempQuaternion->z * tempQuaternion->w);		HX_STACK_VAR(zw,"zw");
															HX_STACK_LINE(853)
															Float zx = (tempQuaternion->z * tempQuaternion->x);		HX_STACK_VAR(zx,"zx");
															HX_STACK_LINE(853)
															Float yw = (tempQuaternion->y * tempQuaternion->w);		HX_STACK_VAR(yw,"yw");
															HX_STACK_LINE(853)
															Float yz = (tempQuaternion->y * tempQuaternion->z);		HX_STACK_VAR(yz,"yz");
															HX_STACK_LINE(853)
															Float xw = (tempQuaternion->x * tempQuaternion->w);		HX_STACK_VAR(xw,"xw");
															HX_STACK_LINE(853)
															result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
															HX_STACK_LINE(853)
															result->m[(int)1] = (2.0 * ((xy + zw)));
															HX_STACK_LINE(853)
															result->m[(int)2] = (2.0 * ((zx - yw)));
															HX_STACK_LINE(853)
															result->m[(int)3] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)4] = (2.0 * ((xy - zw)));
															HX_STACK_LINE(853)
															result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
															HX_STACK_LINE(853)
															result->m[(int)6] = (2.0 * ((yz + xw)));
															HX_STACK_LINE(853)
															result->m[(int)7] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)8] = (2.0 * ((zx + yw)));
															HX_STACK_LINE(853)
															result->m[(int)9] = (2.0 * ((yz - xw)));
															HX_STACK_LINE(853)
															result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
															HX_STACK_LINE(853)
															result->m[(int)11] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)12] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)13] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)14] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)15] = 1.0;
															HX_STACK_LINE(853)
															result;
														}
													}
													HX_STACK_LINE(853)
													mesh->_cache->__Field(HX_CSTRING("rotation"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotation);
												}
												HX_STACK_LINE(853)
												if ((mesh->infiniteDistance)){
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::cameras::Camera camera = mesh->_scene->activeCamera;		HX_STACK_VAR(camera,"camera");
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															result->m[(int)0] = 1.0;
															HX_STACK_LINE(853)
															result->m[(int)1] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)2] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)3] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)4] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)5] = 1.0;
															HX_STACK_LINE(853)
															result->m[(int)6] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)7] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)8] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)9] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)10] = 1.0;
															HX_STACK_LINE(853)
															result->m[(int)11] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)12] = (mesh->position->x + camera->position->x);
															HX_STACK_LINE(853)
															result->m[(int)13] = (mesh->position->y + camera->position->y);
															HX_STACK_LINE(853)
															result->m[(int)14] = (mesh->position->z + camera->position->z);
															HX_STACK_LINE(853)
															result->m[(int)15] = 1.0;
															HX_STACK_LINE(853)
															result;
														}
													}
												}
												else{
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														result->m[(int)0] = 1.0;
														HX_STACK_LINE(853)
														result->m[(int)1] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)2] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)3] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)4] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)5] = 1.0;
														HX_STACK_LINE(853)
														result->m[(int)6] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)7] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)8] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)9] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)10] = 1.0;
														HX_STACK_LINE(853)
														result->m[(int)11] = (int)0;
														HX_STACK_LINE(853)
														result->m[(int)12] = mesh->position->x;
														HX_STACK_LINE(853)
														result->m[(int)13] = mesh->position->y;
														HX_STACK_LINE(853)
														result->m[(int)14] = mesh->position->z;
														HX_STACK_LINE(853)
														result->m[(int)15] = 1.0;
														HX_STACK_LINE(853)
														result;
													}
												}
												HX_STACK_LINE(853)
												{
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_pivotMatrix;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localScaling;		HX_STACK_VAR(other,"other");
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														Array< Float > result = mesh->_localPivotScaling->m;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(853)
														Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
														HX_STACK_LINE(853)
														Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
														HX_STACK_LINE(853)
														Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
														HX_STACK_LINE(853)
														Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
														HX_STACK_LINE(853)
														Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
														HX_STACK_LINE(853)
														Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
														HX_STACK_LINE(853)
														Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
														HX_STACK_LINE(853)
														Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
														HX_STACK_LINE(853)
														Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
														HX_STACK_LINE(853)
														Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
														HX_STACK_LINE(853)
														Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
														HX_STACK_LINE(853)
														Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
														HX_STACK_LINE(853)
														Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
														HX_STACK_LINE(853)
														Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
														HX_STACK_LINE(853)
														Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
														HX_STACK_LINE(853)
														Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
														HX_STACK_LINE(853)
														Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
														HX_STACK_LINE(853)
														Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
														HX_STACK_LINE(853)
														Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
														HX_STACK_LINE(853)
														Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
														HX_STACK_LINE(853)
														Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
														HX_STACK_LINE(853)
														Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
														HX_STACK_LINE(853)
														Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
														HX_STACK_LINE(853)
														Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
														HX_STACK_LINE(853)
														Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
														HX_STACK_LINE(853)
														Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
														HX_STACK_LINE(853)
														Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
														HX_STACK_LINE(853)
														Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
														HX_STACK_LINE(853)
														Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
														HX_STACK_LINE(853)
														Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
														HX_STACK_LINE(853)
														Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
														HX_STACK_LINE(853)
														Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
														HX_STACK_LINE(853)
														result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
														HX_STACK_LINE(853)
														result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
														HX_STACK_LINE(853)
														result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
														HX_STACK_LINE(853)
														result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
														HX_STACK_LINE(853)
														result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
														HX_STACK_LINE(853)
														result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
														HX_STACK_LINE(853)
														result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
														HX_STACK_LINE(853)
														result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
														HX_STACK_LINE(853)
														result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
														HX_STACK_LINE(853)
														result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
														HX_STACK_LINE(853)
														result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
														HX_STACK_LINE(853)
														result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
														HX_STACK_LINE(853)
														result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
														HX_STACK_LINE(853)
														result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
														HX_STACK_LINE(853)
														result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
														HX_STACK_LINE(853)
														result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
														HX_STACK_LINE(853)
														result;
													}
												}
												HX_STACK_LINE(853)
												{
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScaling;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localRotation;		HX_STACK_VAR(other,"other");
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(853)
														Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
														HX_STACK_LINE(853)
														Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
														HX_STACK_LINE(853)
														Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
														HX_STACK_LINE(853)
														Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
														HX_STACK_LINE(853)
														Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
														HX_STACK_LINE(853)
														Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
														HX_STACK_LINE(853)
														Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
														HX_STACK_LINE(853)
														Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
														HX_STACK_LINE(853)
														Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
														HX_STACK_LINE(853)
														Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
														HX_STACK_LINE(853)
														Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
														HX_STACK_LINE(853)
														Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
														HX_STACK_LINE(853)
														Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
														HX_STACK_LINE(853)
														Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
														HX_STACK_LINE(853)
														Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
														HX_STACK_LINE(853)
														Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
														HX_STACK_LINE(853)
														Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
														HX_STACK_LINE(853)
														Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
														HX_STACK_LINE(853)
														Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
														HX_STACK_LINE(853)
														Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
														HX_STACK_LINE(853)
														Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
														HX_STACK_LINE(853)
														Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
														HX_STACK_LINE(853)
														Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
														HX_STACK_LINE(853)
														Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
														HX_STACK_LINE(853)
														Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
														HX_STACK_LINE(853)
														Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
														HX_STACK_LINE(853)
														Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
														HX_STACK_LINE(853)
														Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
														HX_STACK_LINE(853)
														Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
														HX_STACK_LINE(853)
														Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
														HX_STACK_LINE(853)
														Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
														HX_STACK_LINE(853)
														Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
														HX_STACK_LINE(853)
														result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
														HX_STACK_LINE(853)
														result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
														HX_STACK_LINE(853)
														result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
														HX_STACK_LINE(853)
														result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
														HX_STACK_LINE(853)
														result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
														HX_STACK_LINE(853)
														result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
														HX_STACK_LINE(853)
														result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
														HX_STACK_LINE(853)
														result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
														HX_STACK_LINE(853)
														result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
														HX_STACK_LINE(853)
														result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
														HX_STACK_LINE(853)
														result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
														HX_STACK_LINE(853)
														result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
														HX_STACK_LINE(853)
														result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
														HX_STACK_LINE(853)
														result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
														HX_STACK_LINE(853)
														result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
														HX_STACK_LINE(853)
														result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
														HX_STACK_LINE(853)
														result;
													}
												}
												HX_STACK_LINE(853)
												if (((mesh->billboardMode != ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE))){
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 localPosition;		HX_STACK_VAR(localPosition,"localPosition");
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->position;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(853)
														localPosition = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
													}
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 zero;		HX_STACK_VAR(zero,"zero");
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_scene->activeCamera->position;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(853)
														zero = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
													}
													HX_STACK_LINE(853)
													if (((bool((mesh->parent != null())) && bool((mesh->parent->position != null()))))){
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = mesh->parent->position;		HX_STACK_VAR(otherVector,"otherVector");
															HX_STACK_LINE(853)
															hx::AddEq(localPosition->x,otherVector->x);
															HX_STACK_LINE(853)
															hx::AddEq(localPosition->y,otherVector->y);
															HX_STACK_LINE(853)
															hx::AddEq(localPosition->z,otherVector->z);
														}
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
															HX_STACK_LINE(853)
															{
																HX_STACK_LINE(853)
																result->m[(int)0] = 1.0;
																HX_STACK_LINE(853)
																result->m[(int)1] = (int)0;
																HX_STACK_LINE(853)
																result->m[(int)2] = (int)0;
																HX_STACK_LINE(853)
																result->m[(int)3] = (int)0;
																HX_STACK_LINE(853)
																result->m[(int)4] = (int)0;
																HX_STACK_LINE(853)
																result->m[(int)5] = 1.0;
																HX_STACK_LINE(853)
																result->m[(int)6] = (int)0;
																HX_STACK_LINE(853)
																result->m[(int)7] = (int)0;
																HX_STACK_LINE(853)
																result->m[(int)8] = (int)0;
																HX_STACK_LINE(853)
																result->m[(int)9] = (int)0;
																HX_STACK_LINE(853)
																result->m[(int)10] = 1.0;
																HX_STACK_LINE(853)
																result->m[(int)11] = (int)0;
																HX_STACK_LINE(853)
																result->m[(int)12] = localPosition->x;
																HX_STACK_LINE(853)
																result->m[(int)13] = localPosition->y;
																HX_STACK_LINE(853)
																result->m[(int)14] = localPosition->z;
																HX_STACK_LINE(853)
																result->m[(int)15] = 1.0;
																HX_STACK_LINE(853)
																result;
															}
														}
													}
													HX_STACK_LINE(853)
													if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))) == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))){
														HX_STACK_LINE(853)
														zero = mesh->_scene->activeCamera->position;
													}
													else{
														HX_STACK_LINE(853)
														if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_X))) != (int)0))){
															HX_STACK_LINE(853)
															zero->x = (localPosition->x + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
														}
														HX_STACK_LINE(853)
														if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Y))) != (int)0))){
															HX_STACK_LINE(853)
															zero->y = (localPosition->y + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
														}
														HX_STACK_LINE(853)
														if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Z))) != (int)0))){
															HX_STACK_LINE(853)
															zero->z = (localPosition->z + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
														}
													}
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Vector3 up = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Up();		HX_STACK_VAR(up,"up");
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localBillboard;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Vector3 xAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(xAxis,"xAxis");
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Vector3 yAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(yAxis,"yAxis");
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Vector3 zAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(zAxis,"zAxis");
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															zAxis->x = (zero->x - localPosition->x);
															HX_STACK_LINE(853)
															zAxis->y = (zero->y - localPosition->y);
															HX_STACK_LINE(853)
															zAxis->z = (zero->z - localPosition->z);
														}
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															Float len = ::Math_obj::sqrt((((zAxis->x * zAxis->x) + (zAxis->y * zAxis->y)) + (zAxis->z * zAxis->z)));		HX_STACK_VAR(len,"len");
															HX_STACK_LINE(853)
															if (((len != (int)0))){
																HX_STACK_LINE(853)
																Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
																HX_STACK_LINE(853)
																hx::MultEq(zAxis->x,num);
																HX_STACK_LINE(853)
																hx::MultEq(zAxis->y,num);
																HX_STACK_LINE(853)
																hx::MultEq(zAxis->z,num);
															}
														}
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															xAxis->x = ((up->y * zAxis->z) - (up->z * zAxis->y));
															HX_STACK_LINE(853)
															xAxis->y = ((up->z * zAxis->x) - (up->x * zAxis->z));
															HX_STACK_LINE(853)
															xAxis->z = ((up->x * zAxis->y) - (up->y * zAxis->x));
														}
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															Float len = ::Math_obj::sqrt((((xAxis->x * xAxis->x) + (xAxis->y * xAxis->y)) + (xAxis->z * xAxis->z)));		HX_STACK_VAR(len,"len");
															HX_STACK_LINE(853)
															if (((len != (int)0))){
																HX_STACK_LINE(853)
																Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
																HX_STACK_LINE(853)
																hx::MultEq(xAxis->x,num);
																HX_STACK_LINE(853)
																hx::MultEq(xAxis->y,num);
																HX_STACK_LINE(853)
																hx::MultEq(xAxis->z,num);
															}
														}
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															yAxis->x = ((zAxis->y * xAxis->z) - (zAxis->z * xAxis->y));
															HX_STACK_LINE(853)
															yAxis->y = ((zAxis->z * xAxis->x) - (zAxis->x * xAxis->z));
															HX_STACK_LINE(853)
															yAxis->z = ((zAxis->x * xAxis->y) - (zAxis->y * xAxis->x));
														}
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															Float len = ::Math_obj::sqrt((((yAxis->x * yAxis->x) + (yAxis->y * yAxis->y)) + (yAxis->z * yAxis->z)));		HX_STACK_VAR(len,"len");
															HX_STACK_LINE(853)
															if (((len != (int)0))){
																HX_STACK_LINE(853)
																Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
																HX_STACK_LINE(853)
																hx::MultEq(yAxis->x,num);
																HX_STACK_LINE(853)
																hx::MultEq(yAxis->y,num);
																HX_STACK_LINE(853)
																hx::MultEq(yAxis->z,num);
															}
														}
														HX_STACK_LINE(853)
														Float ex = -(((((xAxis->x * localPosition->x) + (xAxis->y * localPosition->y)) + (xAxis->z * localPosition->z))));		HX_STACK_VAR(ex,"ex");
														HX_STACK_LINE(853)
														Float ey = -(((((yAxis->x * localPosition->x) + (yAxis->y * localPosition->y)) + (yAxis->z * localPosition->z))));		HX_STACK_VAR(ey,"ey");
														HX_STACK_LINE(853)
														Float ez = -(((((zAxis->x * localPosition->x) + (zAxis->y * localPosition->y)) + (zAxis->z * localPosition->z))));		HX_STACK_VAR(ez,"ez");
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															result->m[(int)0] = xAxis->x;
															HX_STACK_LINE(853)
															result->m[(int)1] = yAxis->x;
															HX_STACK_LINE(853)
															result->m[(int)2] = zAxis->x;
															HX_STACK_LINE(853)
															result->m[(int)3] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)4] = xAxis->y;
															HX_STACK_LINE(853)
															result->m[(int)5] = yAxis->y;
															HX_STACK_LINE(853)
															result->m[(int)6] = zAxis->y;
															HX_STACK_LINE(853)
															result->m[(int)7] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)8] = xAxis->z;
															HX_STACK_LINE(853)
															result->m[(int)9] = yAxis->z;
															HX_STACK_LINE(853)
															result->m[(int)10] = zAxis->z;
															HX_STACK_LINE(853)
															result->m[(int)11] = (int)0;
															HX_STACK_LINE(853)
															result->m[(int)12] = ex;
															HX_STACK_LINE(853)
															result->m[(int)13] = ey;
															HX_STACK_LINE(853)
															result->m[(int)14] = ez;
															HX_STACK_LINE(853)
															result->m[(int)15] = (int)1;
															HX_STACK_LINE(853)
															result;
														}
													}
													HX_STACK_LINE(853)
													mesh->_localBillboard->m[(int)12] = mesh->_localBillboard->m[(int)13] = mesh->_localBillboard->m[(int)14] = (int)0;
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localBillboard;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
															HX_STACK_LINE(853)
															Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
															HX_STACK_LINE(853)
															Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
															HX_STACK_LINE(853)
															Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
															HX_STACK_LINE(853)
															Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
															HX_STACK_LINE(853)
															Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
															HX_STACK_LINE(853)
															Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
															HX_STACK_LINE(853)
															Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
															HX_STACK_LINE(853)
															Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
															HX_STACK_LINE(853)
															Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
															HX_STACK_LINE(853)
															Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
															HX_STACK_LINE(853)
															Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
															HX_STACK_LINE(853)
															Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
															HX_STACK_LINE(853)
															Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
															HX_STACK_LINE(853)
															Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
															HX_STACK_LINE(853)
															Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
															HX_STACK_LINE(853)
															Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
															HX_STACK_LINE(853)
															Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
															HX_STACK_LINE(853)
															Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
															HX_STACK_LINE(853)
															Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
															HX_STACK_LINE(853)
															Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
															HX_STACK_LINE(853)
															Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
															HX_STACK_LINE(853)
															Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
															HX_STACK_LINE(853)
															Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
															HX_STACK_LINE(853)
															Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
															HX_STACK_LINE(853)
															Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
															HX_STACK_LINE(853)
															Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
															HX_STACK_LINE(853)
															Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
															HX_STACK_LINE(853)
															Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
															HX_STACK_LINE(853)
															Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
															HX_STACK_LINE(853)
															Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
															HX_STACK_LINE(853)
															Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
															HX_STACK_LINE(853)
															Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
															HX_STACK_LINE(853)
															Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
															HX_STACK_LINE(853)
															Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
															HX_STACK_LINE(853)
															Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
															HX_STACK_LINE(853)
															Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
															HX_STACK_LINE(853)
															Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
															HX_STACK_LINE(853)
															Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
															HX_STACK_LINE(853)
															_this->m[(int)0] = (l23 * l27);
															HX_STACK_LINE(853)
															_this->m[(int)4] = (l24 * l27);
															HX_STACK_LINE(853)
															_this->m[(int)8] = (l25 * l27);
															HX_STACK_LINE(853)
															_this->m[(int)12] = (l26 * l27);
															HX_STACK_LINE(853)
															_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
															HX_STACK_LINE(853)
															_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
															HX_STACK_LINE(853)
															_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
															HX_STACK_LINE(853)
															_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
															HX_STACK_LINE(853)
															_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
															HX_STACK_LINE(853)
															_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
															HX_STACK_LINE(853)
															_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
															HX_STACK_LINE(853)
															_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
															HX_STACK_LINE(853)
															_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
															HX_STACK_LINE(853)
															_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
															HX_STACK_LINE(853)
															_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
															HX_STACK_LINE(853)
															_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
														}
													}
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localBillboard;		HX_STACK_VAR(other,"other");
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
															HX_STACK_LINE(853)
															Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
															HX_STACK_LINE(853)
															Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
															HX_STACK_LINE(853)
															Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
															HX_STACK_LINE(853)
															Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
															HX_STACK_LINE(853)
															Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
															HX_STACK_LINE(853)
															Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
															HX_STACK_LINE(853)
															Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
															HX_STACK_LINE(853)
															Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
															HX_STACK_LINE(853)
															Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
															HX_STACK_LINE(853)
															Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
															HX_STACK_LINE(853)
															Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
															HX_STACK_LINE(853)
															Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
															HX_STACK_LINE(853)
															Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
															HX_STACK_LINE(853)
															Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
															HX_STACK_LINE(853)
															Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
															HX_STACK_LINE(853)
															Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
															HX_STACK_LINE(853)
															Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
															HX_STACK_LINE(853)
															Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
															HX_STACK_LINE(853)
															Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
															HX_STACK_LINE(853)
															Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
															HX_STACK_LINE(853)
															Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
															HX_STACK_LINE(853)
															Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
															HX_STACK_LINE(853)
															Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
															HX_STACK_LINE(853)
															Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
															HX_STACK_LINE(853)
															Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
															HX_STACK_LINE(853)
															Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
															HX_STACK_LINE(853)
															Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
															HX_STACK_LINE(853)
															Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
															HX_STACK_LINE(853)
															Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
															HX_STACK_LINE(853)
															Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
															HX_STACK_LINE(853)
															Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
															HX_STACK_LINE(853)
															Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
															HX_STACK_LINE(853)
															result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
															HX_STACK_LINE(853)
															result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
															HX_STACK_LINE(853)
															result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
															HX_STACK_LINE(853)
															result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
															HX_STACK_LINE(853)
															result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
															HX_STACK_LINE(853)
															result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
															HX_STACK_LINE(853)
															result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
															HX_STACK_LINE(853)
															result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
															HX_STACK_LINE(853)
															result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
															HX_STACK_LINE(853)
															result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
															HX_STACK_LINE(853)
															result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
															HX_STACK_LINE(853)
															result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
															HX_STACK_LINE(853)
															result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
															HX_STACK_LINE(853)
															result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
															HX_STACK_LINE(853)
															result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
															HX_STACK_LINE(853)
															result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
															HX_STACK_LINE(853)
															result;
														}
													}
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_rotateYByPI;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localWorld;		HX_STACK_VAR(other,"other");
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
															HX_STACK_LINE(853)
															Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
															HX_STACK_LINE(853)
															Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
															HX_STACK_LINE(853)
															Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
															HX_STACK_LINE(853)
															Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
															HX_STACK_LINE(853)
															Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
															HX_STACK_LINE(853)
															Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
															HX_STACK_LINE(853)
															Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
															HX_STACK_LINE(853)
															Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
															HX_STACK_LINE(853)
															Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
															HX_STACK_LINE(853)
															Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
															HX_STACK_LINE(853)
															Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
															HX_STACK_LINE(853)
															Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
															HX_STACK_LINE(853)
															Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
															HX_STACK_LINE(853)
															Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
															HX_STACK_LINE(853)
															Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
															HX_STACK_LINE(853)
															Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
															HX_STACK_LINE(853)
															Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
															HX_STACK_LINE(853)
															Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
															HX_STACK_LINE(853)
															Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
															HX_STACK_LINE(853)
															Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
															HX_STACK_LINE(853)
															Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
															HX_STACK_LINE(853)
															Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
															HX_STACK_LINE(853)
															Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
															HX_STACK_LINE(853)
															Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
															HX_STACK_LINE(853)
															Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
															HX_STACK_LINE(853)
															Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
															HX_STACK_LINE(853)
															Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
															HX_STACK_LINE(853)
															Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
															HX_STACK_LINE(853)
															Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
															HX_STACK_LINE(853)
															Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
															HX_STACK_LINE(853)
															Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
															HX_STACK_LINE(853)
															Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
															HX_STACK_LINE(853)
															result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
															HX_STACK_LINE(853)
															result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
															HX_STACK_LINE(853)
															result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
															HX_STACK_LINE(853)
															result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
															HX_STACK_LINE(853)
															result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
															HX_STACK_LINE(853)
															result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
															HX_STACK_LINE(853)
															result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
															HX_STACK_LINE(853)
															result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
															HX_STACK_LINE(853)
															result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
															HX_STACK_LINE(853)
															result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
															HX_STACK_LINE(853)
															result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
															HX_STACK_LINE(853)
															result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
															HX_STACK_LINE(853)
															result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
															HX_STACK_LINE(853)
															result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
															HX_STACK_LINE(853)
															result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
															HX_STACK_LINE(853)
															result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
															HX_STACK_LINE(853)
															result;
														}
													}
												}
												struct _Function_11_1{
													inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",853,0x7c8236a5)
														{
															HX_STACK_LINE(853)
															::com::gamestudiohx::babylonhx::tools::math::Matrix _g62 = mesh->parent->getWorldMatrix();		HX_STACK_VAR(_g62,"_g62");
															HX_STACK_LINE(853)
															return (_g62 != null());
														}
														return null();
													}
												};
												HX_STACK_LINE(853)
												if (((  (((  (((mesh->parent != null()))) ? bool(_Function_11_1::Block(mesh)) : bool(false) ))) ? bool((mesh->billboardMode == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE)) : bool(false) ))){
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
															HX_STACK_LINE(853)
															Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
															HX_STACK_LINE(853)
															Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
															HX_STACK_LINE(853)
															Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
															HX_STACK_LINE(853)
															Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
															HX_STACK_LINE(853)
															Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
															HX_STACK_LINE(853)
															Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
															HX_STACK_LINE(853)
															Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
															HX_STACK_LINE(853)
															Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
															HX_STACK_LINE(853)
															Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
															HX_STACK_LINE(853)
															Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
															HX_STACK_LINE(853)
															Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
															HX_STACK_LINE(853)
															Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
															HX_STACK_LINE(853)
															Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
															HX_STACK_LINE(853)
															Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
															HX_STACK_LINE(853)
															Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
															HX_STACK_LINE(853)
															Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
															HX_STACK_LINE(853)
															Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
															HX_STACK_LINE(853)
															Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
															HX_STACK_LINE(853)
															Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
															HX_STACK_LINE(853)
															Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
															HX_STACK_LINE(853)
															Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
															HX_STACK_LINE(853)
															Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
															HX_STACK_LINE(853)
															Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
															HX_STACK_LINE(853)
															Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
															HX_STACK_LINE(853)
															Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
															HX_STACK_LINE(853)
															Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
															HX_STACK_LINE(853)
															Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
															HX_STACK_LINE(853)
															Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
															HX_STACK_LINE(853)
															Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
															HX_STACK_LINE(853)
															Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
															HX_STACK_LINE(853)
															Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
															HX_STACK_LINE(853)
															Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
															HX_STACK_LINE(853)
															result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
															HX_STACK_LINE(853)
															result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
															HX_STACK_LINE(853)
															result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
															HX_STACK_LINE(853)
															result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
															HX_STACK_LINE(853)
															result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
															HX_STACK_LINE(853)
															result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
															HX_STACK_LINE(853)
															result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
															HX_STACK_LINE(853)
															result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
															HX_STACK_LINE(853)
															result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
															HX_STACK_LINE(853)
															result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
															HX_STACK_LINE(853)
															result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
															HX_STACK_LINE(853)
															result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
															HX_STACK_LINE(853)
															result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
															HX_STACK_LINE(853)
															result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
															HX_STACK_LINE(853)
															result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
															HX_STACK_LINE(853)
															result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
															HX_STACK_LINE(853)
															result;
														}
													}
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::tools::math::Matrix parentWorld = mesh->parent->getWorldMatrix();		HX_STACK_VAR(parentWorld,"parentWorld");
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localWorld;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
															HX_STACK_LINE(853)
															Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
															HX_STACK_LINE(853)
															Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
															HX_STACK_LINE(853)
															Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
															HX_STACK_LINE(853)
															Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
															HX_STACK_LINE(853)
															Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
															HX_STACK_LINE(853)
															Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
															HX_STACK_LINE(853)
															Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
															HX_STACK_LINE(853)
															Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
															HX_STACK_LINE(853)
															Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
															HX_STACK_LINE(853)
															Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
															HX_STACK_LINE(853)
															Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
															HX_STACK_LINE(853)
															Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
															HX_STACK_LINE(853)
															Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
															HX_STACK_LINE(853)
															Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
															HX_STACK_LINE(853)
															Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
															HX_STACK_LINE(853)
															Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
															HX_STACK_LINE(853)
															Float om0 = parentWorld->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
															HX_STACK_LINE(853)
															Float om1 = parentWorld->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
															HX_STACK_LINE(853)
															Float om2 = parentWorld->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
															HX_STACK_LINE(853)
															Float om3 = parentWorld->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
															HX_STACK_LINE(853)
															Float om4 = parentWorld->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
															HX_STACK_LINE(853)
															Float om5 = parentWorld->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
															HX_STACK_LINE(853)
															Float om6 = parentWorld->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
															HX_STACK_LINE(853)
															Float om7 = parentWorld->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
															HX_STACK_LINE(853)
															Float om8 = parentWorld->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
															HX_STACK_LINE(853)
															Float om9 = parentWorld->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
															HX_STACK_LINE(853)
															Float om10 = parentWorld->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
															HX_STACK_LINE(853)
															Float om11 = parentWorld->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
															HX_STACK_LINE(853)
															Float om12 = parentWorld->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
															HX_STACK_LINE(853)
															Float om13 = parentWorld->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
															HX_STACK_LINE(853)
															Float om14 = parentWorld->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
															HX_STACK_LINE(853)
															Float om15 = parentWorld->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
															HX_STACK_LINE(853)
															result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
															HX_STACK_LINE(853)
															result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
															HX_STACK_LINE(853)
															result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
															HX_STACK_LINE(853)
															result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
															HX_STACK_LINE(853)
															result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
															HX_STACK_LINE(853)
															result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
															HX_STACK_LINE(853)
															result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
															HX_STACK_LINE(853)
															result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
															HX_STACK_LINE(853)
															result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
															HX_STACK_LINE(853)
															result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
															HX_STACK_LINE(853)
															result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
															HX_STACK_LINE(853)
															result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
															HX_STACK_LINE(853)
															result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
															HX_STACK_LINE(853)
															result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
															HX_STACK_LINE(853)
															result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
															HX_STACK_LINE(853)
															result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
															HX_STACK_LINE(853)
															result;
														}
													}
												}
												else{
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
														HX_STACK_LINE(853)
														Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
														HX_STACK_LINE(853)
														Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
														HX_STACK_LINE(853)
														Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
														HX_STACK_LINE(853)
														Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
														HX_STACK_LINE(853)
														Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
														HX_STACK_LINE(853)
														Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
														HX_STACK_LINE(853)
														Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
														HX_STACK_LINE(853)
														Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
														HX_STACK_LINE(853)
														Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
														HX_STACK_LINE(853)
														Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
														HX_STACK_LINE(853)
														Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
														HX_STACK_LINE(853)
														Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
														HX_STACK_LINE(853)
														Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
														HX_STACK_LINE(853)
														Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
														HX_STACK_LINE(853)
														Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
														HX_STACK_LINE(853)
														Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
														HX_STACK_LINE(853)
														Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
														HX_STACK_LINE(853)
														Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
														HX_STACK_LINE(853)
														Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
														HX_STACK_LINE(853)
														Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
														HX_STACK_LINE(853)
														Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
														HX_STACK_LINE(853)
														Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
														HX_STACK_LINE(853)
														Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
														HX_STACK_LINE(853)
														Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
														HX_STACK_LINE(853)
														Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
														HX_STACK_LINE(853)
														Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
														HX_STACK_LINE(853)
														Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
														HX_STACK_LINE(853)
														Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
														HX_STACK_LINE(853)
														Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
														HX_STACK_LINE(853)
														Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
														HX_STACK_LINE(853)
														Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
														HX_STACK_LINE(853)
														Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
														HX_STACK_LINE(853)
														result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
														HX_STACK_LINE(853)
														result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
														HX_STACK_LINE(853)
														result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
														HX_STACK_LINE(853)
														result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
														HX_STACK_LINE(853)
														result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
														HX_STACK_LINE(853)
														result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
														HX_STACK_LINE(853)
														result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
														HX_STACK_LINE(853)
														result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
														HX_STACK_LINE(853)
														result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
														HX_STACK_LINE(853)
														result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
														HX_STACK_LINE(853)
														result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
														HX_STACK_LINE(853)
														result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
														HX_STACK_LINE(853)
														result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
														HX_STACK_LINE(853)
														result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
														HX_STACK_LINE(853)
														result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
														HX_STACK_LINE(853)
														result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
														HX_STACK_LINE(853)
														result;
													}
												}
												HX_STACK_LINE(853)
												if (((mesh->_boundingInfo != null()))){
													HX_STACK_LINE(853)
													Float _g63 = ::Math_obj::max(mesh->scaling->x,mesh->scaling->y);		HX_STACK_VAR(_g63,"_g63");
													HX_STACK_LINE(853)
													mesh->_scaleFactor = _g63;
													HX_STACK_LINE(853)
													Float _g64 = ::Math_obj::max(mesh->_scaleFactor,mesh->scaling->z);		HX_STACK_VAR(_g64,"_g64");
													HX_STACK_LINE(853)
													mesh->_scaleFactor = _g64;
													struct _Function_12_1{
														inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
															HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",853,0x7c8236a5)
															{
																HX_STACK_LINE(853)
																Dynamic _g65 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g65,"_g65");
																HX_STACK_LINE(853)
																return (_g65 != null());
															}
															return null();
														}
													};
													HX_STACK_LINE(853)
													if (((  (((mesh->parent != null()))) ? bool(_Function_12_1::Block(mesh)) : bool(false) ))){
														HX_STACK_LINE(853)
														Dynamic _g66 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g66,"_g66");
														HX_STACK_LINE(853)
														Float _g67 = (mesh->_scaleFactor * _g66);		HX_STACK_VAR(_g67,"_g67");
														HX_STACK_LINE(853)
														mesh->_scaleFactor = _g67;
													}
													HX_STACK_LINE(853)
													mesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
													HX_STACK_LINE(853)
													{
														HX_STACK_LINE(853)
														int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
														HX_STACK_LINE(853)
														int _g4 = mesh->subMeshes->length;		HX_STACK_VAR(_g4,"_g4");
														HX_STACK_LINE(853)
														while((true)){
															HX_STACK_LINE(853)
															if ((!(((_g11 < _g4))))){
																HX_STACK_LINE(853)
																break;
															}
															HX_STACK_LINE(853)
															int subIndex = (_g11)++;		HX_STACK_VAR(subIndex,"subIndex");
															HX_STACK_LINE(853)
															::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
															HX_STACK_LINE(853)
															subMesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
														}
													}
												}
												HX_STACK_LINE(853)
												{
													HX_STACK_LINE(853)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_absolutePosition;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(853)
													_this->x = mesh->_worldMatrix->m->__get((int)12);
													HX_STACK_LINE(853)
													_this->y = mesh->_worldMatrix->m->__get((int)13);
													HX_STACK_LINE(853)
													_this->z = mesh->_worldMatrix->m->__get((int)14);
												}
												HX_STACK_LINE(853)
												ret = mesh->_worldMatrix;
											}
											HX_STACK_LINE(853)
											ret;
										}
										HX_STACK_LINE(853)
										mesh->_renderId = (int)0;
									}
									struct _Function_8_1{
										inline static bool Block( hx::ObjectPtr< ::com::gamestudiohx::babylonhx::Scene_obj > __this,::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
											HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",853,0x7c8236a5)
											{
												HX_STACK_LINE(853)
												return (  (((  (((  (((  (((mesh->_renderId == (int)0))) ? bool(mesh->isEnabled()) : bool(false) ))) ? bool(mesh->isVisible) : bool(false) ))) ? bool((mesh->visibility > (int)0)) : bool(false) ))) ? bool(mesh->isInFrustum(__this->_frustumPlanes)) : bool(false) );
											}
											return null();
										}
									};
									HX_STACK_LINE(853)
									if (((  ((!(((mesh->_renderId == this->_renderId))))) ? bool(_Function_8_1::Block(this,mesh)) : bool(true) ))){
										HX_STACK_LINE(853)
										if (((mesh->_renderId == (int)0))){
											HX_STACK_LINE(853)
											this->_activeMeshes->push(mesh);
										}
										HX_STACK_LINE(853)
										mesh->_renderId = this->_renderId;
										HX_STACK_LINE(853)
										if (((mesh->skeleton != null()))){
											HX_STACK_LINE(853)
											int _g68 = this->_activeSkeletons->indexOf(mesh->skeleton);		HX_STACK_VAR(_g68,"_g68");
											HX_STACK_LINE(853)
											if (((_g68 != (int)-1))){
												HX_STACK_LINE(853)
												this->_activeSkeletons->pushNoDuplicate(mesh->skeleton);
											}
										}
										HX_STACK_LINE(853)
										Array< ::Dynamic > subMeshes = block->subMeshes->__get(meshIndex).StaticCast< Array< ::Dynamic > >();		HX_STACK_VAR(subMeshes,"subMeshes");
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											int _g5 = (int)0;		HX_STACK_VAR(_g5,"_g5");
											HX_STACK_LINE(853)
											int _g4 = subMeshes->length;		HX_STACK_VAR(_g4,"_g4");
											HX_STACK_LINE(853)
											while((true)){
												HX_STACK_LINE(853)
												if ((!(((_g5 < _g4))))){
													HX_STACK_LINE(853)
													break;
												}
												HX_STACK_LINE(853)
												int subIndex = (_g5)++;		HX_STACK_VAR(subIndex,"subIndex");
												HX_STACK_LINE(853)
												::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
												HX_STACK_LINE(853)
												if (((subMesh->_renderId == this->_renderId))){
													HX_STACK_LINE(853)
													continue;
												}
												HX_STACK_LINE(853)
												subMesh->_renderId = this->_renderId;
												HX_STACK_LINE(853)
												if (((  ((!(((mesh->subMeshes->length == (int)1))))) ? bool(subMesh->_boundingInfo->isInFrustrum(this->_frustumPlanes)) : bool(true) ))){
													HX_STACK_LINE(853)
													Dynamic material = subMesh->getMaterial();		HX_STACK_VAR(material,"material");
													HX_STACK_LINE(853)
													if (((material != null()))){
														HX_STACK_LINE(853)
														Dynamic _g69 = ::Reflect_obj::field(material,HX_CSTRING("getRenderTargetTextures"));		HX_STACK_VAR(_g69,"_g69");
														HX_STACK_LINE(853)
														if (((_g69 != null()))){
															HX_STACK_LINE(853)
															int _g70 = this->_processedMaterials->indexOf(material);		HX_STACK_VAR(_g70,"_g70");
															HX_STACK_LINE(853)
															if (((_g70 == (int)-1))){
																HX_STACK_LINE(853)
																this->_processedMaterials->push(material);
																HX_STACK_LINE(853)
																Dynamic _g71 = material->__Field(HX_CSTRING("getRenderTargetTextures"),true)();		HX_STACK_VAR(_g71,"_g71");
																HX_STACK_LINE(853)
																this->_renderTargets->concat(_g71);
															}
														}
														HX_STACK_LINE(853)
														hx::AddEq(this->_activeVertices,subMesh->verticesCount);
														HX_STACK_LINE(853)
														{
															HX_STACK_LINE(853)
															::com::gamestudiohx::babylonhx::rendering::RenderingManager _this = this->_renderingManager;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(853)
															::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh1 = subMesh->getMesh();		HX_STACK_VAR(mesh1,"mesh1");
															HX_STACK_LINE(853)
															int renderingGroupId = mesh1->renderingGroupId;		HX_STACK_VAR(renderingGroupId,"renderingGroupId");
															HX_STACK_LINE(853)
															if (((_this->_renderingGroups->length <= renderingGroupId))){
																HX_STACK_LINE(853)
																_this->_renderingGroups[renderingGroupId] = ::com::gamestudiohx::babylonhx::rendering::RenderingGroup_obj::__new(renderingGroupId,_this->_scene);
															}
															HX_STACK_LINE(853)
															_this->_renderingGroups->__get(renderingGroupId).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingGroup >()->dispatch(subMesh);
														}
													}
												}
											}
										}
									}
									else{
										HX_STACK_LINE(853)
										mesh->_renderId = -(this->_renderId);
									}
								}
							}
						}
					}
				}
				else{
					HX_STACK_LINE(853)
					int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
					HX_STACK_LINE(853)
					int _g = this->meshes->length;		HX_STACK_VAR(_g,"_g");
					HX_STACK_LINE(853)
					while((true)){
						HX_STACK_LINE(853)
						if ((!(((_g1 < _g))))){
							HX_STACK_LINE(853)
							break;
						}
						HX_STACK_LINE(853)
						int meshIndex = (_g1)++;		HX_STACK_VAR(meshIndex,"meshIndex");
						HX_STACK_LINE(853)
						::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = this->meshes->__get(meshIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
						HX_STACK_LINE(853)
						int _g72 = mesh->getTotalVertices();		HX_STACK_VAR(_g72,"_g72");
						HX_STACK_LINE(853)
						hx::AddEq(this->_totalVertices,_g72);
						HX_STACK_LINE(853)
						if ((!(mesh->isReady()))){
							HX_STACK_LINE(853)
							continue;
						}
						HX_STACK_LINE(853)
						{
							HX_STACK_LINE(853)
							bool force = false;		HX_STACK_VAR(force,"force");
							HX_STACK_LINE(853)
							::com::gamestudiohx::babylonhx::tools::math::Matrix ret = mesh->_worldMatrix;		HX_STACK_VAR(ret,"ret");
							struct _Function_6_1{
								inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
									HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",853,0x7c8236a5)
									{
										HX_STACK_LINE(853)
										int _g73 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g73,"_g73");
										HX_STACK_LINE(853)
										return (  ((!(((mesh->_currentRenderId == _g73))))) ? bool(mesh->isSynchronized(null())) : bool(true) );
									}
									return null();
								}
							};
							HX_STACK_LINE(853)
							if (((  ((!(force))) ? bool(_Function_6_1::Block(mesh)) : bool(false) ))){
								HX_STACK_LINE(853)
								mesh->_childrenFlag = (int)0;
							}
							else{
								HX_STACK_LINE(853)
								mesh->_childrenFlag = (int)1;
								HX_STACK_LINE(853)
								mesh->_cache->__Field(HX_CSTRING("position"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->position);
								HX_STACK_LINE(853)
								mesh->_cache->__Field(HX_CSTRING("scaling"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->scaling);
								HX_STACK_LINE(853)
								mesh->_cache->__FieldRef(HX_CSTRING("pivotMatrixUpdated")) = false;
								HX_STACK_LINE(853)
								int _g74 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g74,"_g74");
								HX_STACK_LINE(853)
								mesh->_currentRenderId = _g74;
								HX_STACK_LINE(853)
								{
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localScaling;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(853)
									result->m[(int)0] = mesh->scaling->x;
									HX_STACK_LINE(853)
									result->m[(int)1] = (int)0;
									HX_STACK_LINE(853)
									result->m[(int)2] = (int)0;
									HX_STACK_LINE(853)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(853)
									result->m[(int)4] = (int)0;
									HX_STACK_LINE(853)
									result->m[(int)5] = mesh->scaling->y;
									HX_STACK_LINE(853)
									result->m[(int)6] = (int)0;
									HX_STACK_LINE(853)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(853)
									result->m[(int)8] = (int)0;
									HX_STACK_LINE(853)
									result->m[(int)9] = (int)0;
									HX_STACK_LINE(853)
									result->m[(int)10] = mesh->scaling->z;
									HX_STACK_LINE(853)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(853)
									result->m[(int)12] = (int)0;
									HX_STACK_LINE(853)
									result->m[(int)13] = (int)0;
									HX_STACK_LINE(853)
									result->m[(int)14] = (int)0;
									HX_STACK_LINE(853)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(853)
									result;
								}
								HX_STACK_LINE(853)
								if (((mesh->rotationQuaternion != null()))){
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Quaternion _this = mesh->rotationQuaternion;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(853)
										Float xx = (_this->x * _this->x);		HX_STACK_VAR(xx,"xx");
										HX_STACK_LINE(853)
										Float yy = (_this->y * _this->y);		HX_STACK_VAR(yy,"yy");
										HX_STACK_LINE(853)
										Float zz = (_this->z * _this->z);		HX_STACK_VAR(zz,"zz");
										HX_STACK_LINE(853)
										Float xy = (_this->x * _this->y);		HX_STACK_VAR(xy,"xy");
										HX_STACK_LINE(853)
										Float zw = (_this->z * _this->w);		HX_STACK_VAR(zw,"zw");
										HX_STACK_LINE(853)
										Float zx = (_this->z * _this->x);		HX_STACK_VAR(zx,"zx");
										HX_STACK_LINE(853)
										Float yw = (_this->y * _this->w);		HX_STACK_VAR(yw,"yw");
										HX_STACK_LINE(853)
										Float yz = (_this->y * _this->z);		HX_STACK_VAR(yz,"yz");
										HX_STACK_LINE(853)
										Float xw = (_this->x * _this->w);		HX_STACK_VAR(xw,"xw");
										HX_STACK_LINE(853)
										result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
										HX_STACK_LINE(853)
										result->m[(int)1] = (2.0 * ((xy + zw)));
										HX_STACK_LINE(853)
										result->m[(int)2] = (2.0 * ((zx - yw)));
										HX_STACK_LINE(853)
										result->m[(int)3] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)4] = (2.0 * ((xy - zw)));
										HX_STACK_LINE(853)
										result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
										HX_STACK_LINE(853)
										result->m[(int)6] = (2.0 * ((yz + xw)));
										HX_STACK_LINE(853)
										result->m[(int)7] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)8] = (2.0 * ((zx + yw)));
										HX_STACK_LINE(853)
										result->m[(int)9] = (2.0 * ((yz - xw)));
										HX_STACK_LINE(853)
										result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
										HX_STACK_LINE(853)
										result->m[(int)11] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)12] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)13] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)14] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)15] = 1.0;
										HX_STACK_LINE(853)
										result;
									}
									HX_STACK_LINE(853)
									mesh->_cache->__Field(HX_CSTRING("rotationQuaternion"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotationQuaternion);
								}
								else{
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Quaternion tempQuaternion = ::com::gamestudiohx::babylonhx::tools::math::Quaternion_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tempQuaternion,"tempQuaternion");
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Quaternion _g75;		HX_STACK_VAR(_g75,"_g75");
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											Float halfRoll = (mesh->rotation->z * 0.5);		HX_STACK_VAR(halfRoll,"halfRoll");
											HX_STACK_LINE(853)
											Float halfPitch = (mesh->rotation->x * 0.5);		HX_STACK_VAR(halfPitch,"halfPitch");
											HX_STACK_LINE(853)
											Float halfYaw = (mesh->rotation->y * 0.5);		HX_STACK_VAR(halfYaw,"halfYaw");
											HX_STACK_LINE(853)
											Float sinRoll = ::Math_obj::sin(halfRoll);		HX_STACK_VAR(sinRoll,"sinRoll");
											HX_STACK_LINE(853)
											Float cosRoll = ::Math_obj::cos(halfRoll);		HX_STACK_VAR(cosRoll,"cosRoll");
											HX_STACK_LINE(853)
											Float sinPitch = ::Math_obj::sin(halfPitch);		HX_STACK_VAR(sinPitch,"sinPitch");
											HX_STACK_LINE(853)
											Float cosPitch = ::Math_obj::cos(halfPitch);		HX_STACK_VAR(cosPitch,"cosPitch");
											HX_STACK_LINE(853)
											Float sinYaw = ::Math_obj::sin(halfYaw);		HX_STACK_VAR(sinYaw,"sinYaw");
											HX_STACK_LINE(853)
											Float cosYaw = ::Math_obj::cos(halfYaw);		HX_STACK_VAR(cosYaw,"cosYaw");
											HX_STACK_LINE(853)
											tempQuaternion->x = (((cosYaw * sinPitch) * cosRoll) + ((sinYaw * cosPitch) * sinRoll));
											HX_STACK_LINE(853)
											tempQuaternion->y = (((sinYaw * cosPitch) * cosRoll) - ((cosYaw * sinPitch) * sinRoll));
											HX_STACK_LINE(853)
											tempQuaternion->z = (((cosYaw * cosPitch) * sinRoll) - ((sinYaw * sinPitch) * cosRoll));
											HX_STACK_LINE(853)
											tempQuaternion->w = (((cosYaw * cosPitch) * cosRoll) + ((sinYaw * sinPitch) * sinRoll));
											HX_STACK_LINE(853)
											_g75 = tempQuaternion;
										}
										HX_STACK_LINE(853)
										tempQuaternion = _g75;
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											Float xx = (tempQuaternion->x * tempQuaternion->x);		HX_STACK_VAR(xx,"xx");
											HX_STACK_LINE(853)
											Float yy = (tempQuaternion->y * tempQuaternion->y);		HX_STACK_VAR(yy,"yy");
											HX_STACK_LINE(853)
											Float zz = (tempQuaternion->z * tempQuaternion->z);		HX_STACK_VAR(zz,"zz");
											HX_STACK_LINE(853)
											Float xy = (tempQuaternion->x * tempQuaternion->y);		HX_STACK_VAR(xy,"xy");
											HX_STACK_LINE(853)
											Float zw = (tempQuaternion->z * tempQuaternion->w);		HX_STACK_VAR(zw,"zw");
											HX_STACK_LINE(853)
											Float zx = (tempQuaternion->z * tempQuaternion->x);		HX_STACK_VAR(zx,"zx");
											HX_STACK_LINE(853)
											Float yw = (tempQuaternion->y * tempQuaternion->w);		HX_STACK_VAR(yw,"yw");
											HX_STACK_LINE(853)
											Float yz = (tempQuaternion->y * tempQuaternion->z);		HX_STACK_VAR(yz,"yz");
											HX_STACK_LINE(853)
											Float xw = (tempQuaternion->x * tempQuaternion->w);		HX_STACK_VAR(xw,"xw");
											HX_STACK_LINE(853)
											result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
											HX_STACK_LINE(853)
											result->m[(int)1] = (2.0 * ((xy + zw)));
											HX_STACK_LINE(853)
											result->m[(int)2] = (2.0 * ((zx - yw)));
											HX_STACK_LINE(853)
											result->m[(int)3] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)4] = (2.0 * ((xy - zw)));
											HX_STACK_LINE(853)
											result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
											HX_STACK_LINE(853)
											result->m[(int)6] = (2.0 * ((yz + xw)));
											HX_STACK_LINE(853)
											result->m[(int)7] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)8] = (2.0 * ((zx + yw)));
											HX_STACK_LINE(853)
											result->m[(int)9] = (2.0 * ((yz - xw)));
											HX_STACK_LINE(853)
											result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
											HX_STACK_LINE(853)
											result->m[(int)11] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)12] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)13] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)14] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)15] = 1.0;
											HX_STACK_LINE(853)
											result;
										}
									}
									HX_STACK_LINE(853)
									mesh->_cache->__Field(HX_CSTRING("rotation"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotation);
								}
								HX_STACK_LINE(853)
								if ((mesh->infiniteDistance)){
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::cameras::Camera camera = mesh->_scene->activeCamera;		HX_STACK_VAR(camera,"camera");
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											result->m[(int)0] = 1.0;
											HX_STACK_LINE(853)
											result->m[(int)1] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)2] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)3] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)4] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)5] = 1.0;
											HX_STACK_LINE(853)
											result->m[(int)6] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)7] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)8] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)9] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)10] = 1.0;
											HX_STACK_LINE(853)
											result->m[(int)11] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)12] = (mesh->position->x + camera->position->x);
											HX_STACK_LINE(853)
											result->m[(int)13] = (mesh->position->y + camera->position->y);
											HX_STACK_LINE(853)
											result->m[(int)14] = (mesh->position->z + camera->position->z);
											HX_STACK_LINE(853)
											result->m[(int)15] = 1.0;
											HX_STACK_LINE(853)
											result;
										}
									}
								}
								else{
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										result->m[(int)0] = 1.0;
										HX_STACK_LINE(853)
										result->m[(int)1] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)2] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)3] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)4] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)5] = 1.0;
										HX_STACK_LINE(853)
										result->m[(int)6] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)7] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)8] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)9] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)10] = 1.0;
										HX_STACK_LINE(853)
										result->m[(int)11] = (int)0;
										HX_STACK_LINE(853)
										result->m[(int)12] = mesh->position->x;
										HX_STACK_LINE(853)
										result->m[(int)13] = mesh->position->y;
										HX_STACK_LINE(853)
										result->m[(int)14] = mesh->position->z;
										HX_STACK_LINE(853)
										result->m[(int)15] = 1.0;
										HX_STACK_LINE(853)
										result;
									}
								}
								HX_STACK_LINE(853)
								{
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_pivotMatrix;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localScaling;		HX_STACK_VAR(other,"other");
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										Array< Float > result = mesh->_localPivotScaling->m;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(853)
										Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
										HX_STACK_LINE(853)
										Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
										HX_STACK_LINE(853)
										Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
										HX_STACK_LINE(853)
										Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
										HX_STACK_LINE(853)
										Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
										HX_STACK_LINE(853)
										Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
										HX_STACK_LINE(853)
										Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
										HX_STACK_LINE(853)
										Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
										HX_STACK_LINE(853)
										Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
										HX_STACK_LINE(853)
										Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
										HX_STACK_LINE(853)
										Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
										HX_STACK_LINE(853)
										Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
										HX_STACK_LINE(853)
										Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
										HX_STACK_LINE(853)
										Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
										HX_STACK_LINE(853)
										Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
										HX_STACK_LINE(853)
										Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
										HX_STACK_LINE(853)
										Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
										HX_STACK_LINE(853)
										Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
										HX_STACK_LINE(853)
										Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
										HX_STACK_LINE(853)
										Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
										HX_STACK_LINE(853)
										Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
										HX_STACK_LINE(853)
										Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
										HX_STACK_LINE(853)
										Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
										HX_STACK_LINE(853)
										Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
										HX_STACK_LINE(853)
										Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
										HX_STACK_LINE(853)
										Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
										HX_STACK_LINE(853)
										Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
										HX_STACK_LINE(853)
										Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
										HX_STACK_LINE(853)
										Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
										HX_STACK_LINE(853)
										Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
										HX_STACK_LINE(853)
										Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
										HX_STACK_LINE(853)
										Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
										HX_STACK_LINE(853)
										result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
										HX_STACK_LINE(853)
										result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
										HX_STACK_LINE(853)
										result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
										HX_STACK_LINE(853)
										result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
										HX_STACK_LINE(853)
										result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
										HX_STACK_LINE(853)
										result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
										HX_STACK_LINE(853)
										result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
										HX_STACK_LINE(853)
										result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
										HX_STACK_LINE(853)
										result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
										HX_STACK_LINE(853)
										result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
										HX_STACK_LINE(853)
										result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
										HX_STACK_LINE(853)
										result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
										HX_STACK_LINE(853)
										result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
										HX_STACK_LINE(853)
										result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
										HX_STACK_LINE(853)
										result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
										HX_STACK_LINE(853)
										result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
										HX_STACK_LINE(853)
										result;
									}
								}
								HX_STACK_LINE(853)
								{
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScaling;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localRotation;		HX_STACK_VAR(other,"other");
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(853)
										Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
										HX_STACK_LINE(853)
										Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
										HX_STACK_LINE(853)
										Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
										HX_STACK_LINE(853)
										Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
										HX_STACK_LINE(853)
										Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
										HX_STACK_LINE(853)
										Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
										HX_STACK_LINE(853)
										Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
										HX_STACK_LINE(853)
										Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
										HX_STACK_LINE(853)
										Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
										HX_STACK_LINE(853)
										Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
										HX_STACK_LINE(853)
										Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
										HX_STACK_LINE(853)
										Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
										HX_STACK_LINE(853)
										Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
										HX_STACK_LINE(853)
										Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
										HX_STACK_LINE(853)
										Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
										HX_STACK_LINE(853)
										Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
										HX_STACK_LINE(853)
										Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
										HX_STACK_LINE(853)
										Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
										HX_STACK_LINE(853)
										Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
										HX_STACK_LINE(853)
										Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
										HX_STACK_LINE(853)
										Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
										HX_STACK_LINE(853)
										Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
										HX_STACK_LINE(853)
										Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
										HX_STACK_LINE(853)
										Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
										HX_STACK_LINE(853)
										Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
										HX_STACK_LINE(853)
										Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
										HX_STACK_LINE(853)
										Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
										HX_STACK_LINE(853)
										Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
										HX_STACK_LINE(853)
										Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
										HX_STACK_LINE(853)
										Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
										HX_STACK_LINE(853)
										Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
										HX_STACK_LINE(853)
										Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
										HX_STACK_LINE(853)
										result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
										HX_STACK_LINE(853)
										result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
										HX_STACK_LINE(853)
										result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
										HX_STACK_LINE(853)
										result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
										HX_STACK_LINE(853)
										result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
										HX_STACK_LINE(853)
										result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
										HX_STACK_LINE(853)
										result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
										HX_STACK_LINE(853)
										result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
										HX_STACK_LINE(853)
										result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
										HX_STACK_LINE(853)
										result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
										HX_STACK_LINE(853)
										result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
										HX_STACK_LINE(853)
										result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
										HX_STACK_LINE(853)
										result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
										HX_STACK_LINE(853)
										result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
										HX_STACK_LINE(853)
										result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
										HX_STACK_LINE(853)
										result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
										HX_STACK_LINE(853)
										result;
									}
								}
								HX_STACK_LINE(853)
								if (((mesh->billboardMode != ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE))){
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 localPosition;		HX_STACK_VAR(localPosition,"localPosition");
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->position;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(853)
										localPosition = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
									}
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 zero;		HX_STACK_VAR(zero,"zero");
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_scene->activeCamera->position;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(853)
										zero = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
									}
									HX_STACK_LINE(853)
									if (((bool((mesh->parent != null())) && bool((mesh->parent->position != null()))))){
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = mesh->parent->position;		HX_STACK_VAR(otherVector,"otherVector");
											HX_STACK_LINE(853)
											hx::AddEq(localPosition->x,otherVector->x);
											HX_STACK_LINE(853)
											hx::AddEq(localPosition->y,otherVector->y);
											HX_STACK_LINE(853)
											hx::AddEq(localPosition->z,otherVector->z);
										}
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
											HX_STACK_LINE(853)
											{
												HX_STACK_LINE(853)
												result->m[(int)0] = 1.0;
												HX_STACK_LINE(853)
												result->m[(int)1] = (int)0;
												HX_STACK_LINE(853)
												result->m[(int)2] = (int)0;
												HX_STACK_LINE(853)
												result->m[(int)3] = (int)0;
												HX_STACK_LINE(853)
												result->m[(int)4] = (int)0;
												HX_STACK_LINE(853)
												result->m[(int)5] = 1.0;
												HX_STACK_LINE(853)
												result->m[(int)6] = (int)0;
												HX_STACK_LINE(853)
												result->m[(int)7] = (int)0;
												HX_STACK_LINE(853)
												result->m[(int)8] = (int)0;
												HX_STACK_LINE(853)
												result->m[(int)9] = (int)0;
												HX_STACK_LINE(853)
												result->m[(int)10] = 1.0;
												HX_STACK_LINE(853)
												result->m[(int)11] = (int)0;
												HX_STACK_LINE(853)
												result->m[(int)12] = localPosition->x;
												HX_STACK_LINE(853)
												result->m[(int)13] = localPosition->y;
												HX_STACK_LINE(853)
												result->m[(int)14] = localPosition->z;
												HX_STACK_LINE(853)
												result->m[(int)15] = 1.0;
												HX_STACK_LINE(853)
												result;
											}
										}
									}
									HX_STACK_LINE(853)
									if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))) == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))){
										HX_STACK_LINE(853)
										zero = mesh->_scene->activeCamera->position;
									}
									else{
										HX_STACK_LINE(853)
										if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_X))) != (int)0))){
											HX_STACK_LINE(853)
											zero->x = (localPosition->x + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
										}
										HX_STACK_LINE(853)
										if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Y))) != (int)0))){
											HX_STACK_LINE(853)
											zero->y = (localPosition->y + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
										}
										HX_STACK_LINE(853)
										if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Z))) != (int)0))){
											HX_STACK_LINE(853)
											zero->z = (localPosition->z + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
										}
									}
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Vector3 up = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Up();		HX_STACK_VAR(up,"up");
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localBillboard;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Vector3 xAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(xAxis,"xAxis");
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Vector3 yAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(yAxis,"yAxis");
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Vector3 zAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(zAxis,"zAxis");
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											zAxis->x = (zero->x - localPosition->x);
											HX_STACK_LINE(853)
											zAxis->y = (zero->y - localPosition->y);
											HX_STACK_LINE(853)
											zAxis->z = (zero->z - localPosition->z);
										}
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											Float len = ::Math_obj::sqrt((((zAxis->x * zAxis->x) + (zAxis->y * zAxis->y)) + (zAxis->z * zAxis->z)));		HX_STACK_VAR(len,"len");
											HX_STACK_LINE(853)
											if (((len != (int)0))){
												HX_STACK_LINE(853)
												Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
												HX_STACK_LINE(853)
												hx::MultEq(zAxis->x,num);
												HX_STACK_LINE(853)
												hx::MultEq(zAxis->y,num);
												HX_STACK_LINE(853)
												hx::MultEq(zAxis->z,num);
											}
										}
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											xAxis->x = ((up->y * zAxis->z) - (up->z * zAxis->y));
											HX_STACK_LINE(853)
											xAxis->y = ((up->z * zAxis->x) - (up->x * zAxis->z));
											HX_STACK_LINE(853)
											xAxis->z = ((up->x * zAxis->y) - (up->y * zAxis->x));
										}
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											Float len = ::Math_obj::sqrt((((xAxis->x * xAxis->x) + (xAxis->y * xAxis->y)) + (xAxis->z * xAxis->z)));		HX_STACK_VAR(len,"len");
											HX_STACK_LINE(853)
											if (((len != (int)0))){
												HX_STACK_LINE(853)
												Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
												HX_STACK_LINE(853)
												hx::MultEq(xAxis->x,num);
												HX_STACK_LINE(853)
												hx::MultEq(xAxis->y,num);
												HX_STACK_LINE(853)
												hx::MultEq(xAxis->z,num);
											}
										}
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											yAxis->x = ((zAxis->y * xAxis->z) - (zAxis->z * xAxis->y));
											HX_STACK_LINE(853)
											yAxis->y = ((zAxis->z * xAxis->x) - (zAxis->x * xAxis->z));
											HX_STACK_LINE(853)
											yAxis->z = ((zAxis->x * xAxis->y) - (zAxis->y * xAxis->x));
										}
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											Float len = ::Math_obj::sqrt((((yAxis->x * yAxis->x) + (yAxis->y * yAxis->y)) + (yAxis->z * yAxis->z)));		HX_STACK_VAR(len,"len");
											HX_STACK_LINE(853)
											if (((len != (int)0))){
												HX_STACK_LINE(853)
												Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
												HX_STACK_LINE(853)
												hx::MultEq(yAxis->x,num);
												HX_STACK_LINE(853)
												hx::MultEq(yAxis->y,num);
												HX_STACK_LINE(853)
												hx::MultEq(yAxis->z,num);
											}
										}
										HX_STACK_LINE(853)
										Float ex = -(((((xAxis->x * localPosition->x) + (xAxis->y * localPosition->y)) + (xAxis->z * localPosition->z))));		HX_STACK_VAR(ex,"ex");
										HX_STACK_LINE(853)
										Float ey = -(((((yAxis->x * localPosition->x) + (yAxis->y * localPosition->y)) + (yAxis->z * localPosition->z))));		HX_STACK_VAR(ey,"ey");
										HX_STACK_LINE(853)
										Float ez = -(((((zAxis->x * localPosition->x) + (zAxis->y * localPosition->y)) + (zAxis->z * localPosition->z))));		HX_STACK_VAR(ez,"ez");
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											result->m[(int)0] = xAxis->x;
											HX_STACK_LINE(853)
											result->m[(int)1] = yAxis->x;
											HX_STACK_LINE(853)
											result->m[(int)2] = zAxis->x;
											HX_STACK_LINE(853)
											result->m[(int)3] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)4] = xAxis->y;
											HX_STACK_LINE(853)
											result->m[(int)5] = yAxis->y;
											HX_STACK_LINE(853)
											result->m[(int)6] = zAxis->y;
											HX_STACK_LINE(853)
											result->m[(int)7] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)8] = xAxis->z;
											HX_STACK_LINE(853)
											result->m[(int)9] = yAxis->z;
											HX_STACK_LINE(853)
											result->m[(int)10] = zAxis->z;
											HX_STACK_LINE(853)
											result->m[(int)11] = (int)0;
											HX_STACK_LINE(853)
											result->m[(int)12] = ex;
											HX_STACK_LINE(853)
											result->m[(int)13] = ey;
											HX_STACK_LINE(853)
											result->m[(int)14] = ez;
											HX_STACK_LINE(853)
											result->m[(int)15] = (int)1;
											HX_STACK_LINE(853)
											result;
										}
									}
									HX_STACK_LINE(853)
									mesh->_localBillboard->m[(int)12] = mesh->_localBillboard->m[(int)13] = mesh->_localBillboard->m[(int)14] = (int)0;
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localBillboard;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
											HX_STACK_LINE(853)
											Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
											HX_STACK_LINE(853)
											Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
											HX_STACK_LINE(853)
											Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
											HX_STACK_LINE(853)
											Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
											HX_STACK_LINE(853)
											Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
											HX_STACK_LINE(853)
											Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
											HX_STACK_LINE(853)
											Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
											HX_STACK_LINE(853)
											Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
											HX_STACK_LINE(853)
											Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
											HX_STACK_LINE(853)
											Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
											HX_STACK_LINE(853)
											Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
											HX_STACK_LINE(853)
											Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
											HX_STACK_LINE(853)
											Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
											HX_STACK_LINE(853)
											Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
											HX_STACK_LINE(853)
											Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
											HX_STACK_LINE(853)
											Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
											HX_STACK_LINE(853)
											Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
											HX_STACK_LINE(853)
											Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
											HX_STACK_LINE(853)
											Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
											HX_STACK_LINE(853)
											Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
											HX_STACK_LINE(853)
											Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
											HX_STACK_LINE(853)
											Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
											HX_STACK_LINE(853)
											Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
											HX_STACK_LINE(853)
											Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
											HX_STACK_LINE(853)
											Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
											HX_STACK_LINE(853)
											Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
											HX_STACK_LINE(853)
											Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
											HX_STACK_LINE(853)
											Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
											HX_STACK_LINE(853)
											Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
											HX_STACK_LINE(853)
											Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
											HX_STACK_LINE(853)
											Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
											HX_STACK_LINE(853)
											Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
											HX_STACK_LINE(853)
											Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
											HX_STACK_LINE(853)
											Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
											HX_STACK_LINE(853)
											Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
											HX_STACK_LINE(853)
											Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
											HX_STACK_LINE(853)
											Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
											HX_STACK_LINE(853)
											Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
											HX_STACK_LINE(853)
											_this->m[(int)0] = (l23 * l27);
											HX_STACK_LINE(853)
											_this->m[(int)4] = (l24 * l27);
											HX_STACK_LINE(853)
											_this->m[(int)8] = (l25 * l27);
											HX_STACK_LINE(853)
											_this->m[(int)12] = (l26 * l27);
											HX_STACK_LINE(853)
											_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
											HX_STACK_LINE(853)
											_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
											HX_STACK_LINE(853)
											_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
											HX_STACK_LINE(853)
											_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
											HX_STACK_LINE(853)
											_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
											HX_STACK_LINE(853)
											_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
											HX_STACK_LINE(853)
											_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
											HX_STACK_LINE(853)
											_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
											HX_STACK_LINE(853)
											_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
											HX_STACK_LINE(853)
											_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
											HX_STACK_LINE(853)
											_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
											HX_STACK_LINE(853)
											_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
										}
									}
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localBillboard;		HX_STACK_VAR(other,"other");
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
											HX_STACK_LINE(853)
											Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
											HX_STACK_LINE(853)
											Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
											HX_STACK_LINE(853)
											Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
											HX_STACK_LINE(853)
											Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
											HX_STACK_LINE(853)
											Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
											HX_STACK_LINE(853)
											Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
											HX_STACK_LINE(853)
											Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
											HX_STACK_LINE(853)
											Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
											HX_STACK_LINE(853)
											Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
											HX_STACK_LINE(853)
											Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
											HX_STACK_LINE(853)
											Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
											HX_STACK_LINE(853)
											Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
											HX_STACK_LINE(853)
											Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
											HX_STACK_LINE(853)
											Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
											HX_STACK_LINE(853)
											Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
											HX_STACK_LINE(853)
											Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
											HX_STACK_LINE(853)
											Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
											HX_STACK_LINE(853)
											Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
											HX_STACK_LINE(853)
											Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
											HX_STACK_LINE(853)
											Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
											HX_STACK_LINE(853)
											Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
											HX_STACK_LINE(853)
											Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
											HX_STACK_LINE(853)
											Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
											HX_STACK_LINE(853)
											Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
											HX_STACK_LINE(853)
											Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
											HX_STACK_LINE(853)
											Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
											HX_STACK_LINE(853)
											Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
											HX_STACK_LINE(853)
											Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
											HX_STACK_LINE(853)
											Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
											HX_STACK_LINE(853)
											Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
											HX_STACK_LINE(853)
											Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
											HX_STACK_LINE(853)
											Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
											HX_STACK_LINE(853)
											result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
											HX_STACK_LINE(853)
											result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
											HX_STACK_LINE(853)
											result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
											HX_STACK_LINE(853)
											result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
											HX_STACK_LINE(853)
											result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
											HX_STACK_LINE(853)
											result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
											HX_STACK_LINE(853)
											result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
											HX_STACK_LINE(853)
											result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
											HX_STACK_LINE(853)
											result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
											HX_STACK_LINE(853)
											result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
											HX_STACK_LINE(853)
											result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
											HX_STACK_LINE(853)
											result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
											HX_STACK_LINE(853)
											result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
											HX_STACK_LINE(853)
											result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
											HX_STACK_LINE(853)
											result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
											HX_STACK_LINE(853)
											result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
											HX_STACK_LINE(853)
											result;
										}
									}
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_rotateYByPI;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localWorld;		HX_STACK_VAR(other,"other");
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
											HX_STACK_LINE(853)
											Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
											HX_STACK_LINE(853)
											Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
											HX_STACK_LINE(853)
											Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
											HX_STACK_LINE(853)
											Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
											HX_STACK_LINE(853)
											Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
											HX_STACK_LINE(853)
											Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
											HX_STACK_LINE(853)
											Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
											HX_STACK_LINE(853)
											Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
											HX_STACK_LINE(853)
											Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
											HX_STACK_LINE(853)
											Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
											HX_STACK_LINE(853)
											Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
											HX_STACK_LINE(853)
											Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
											HX_STACK_LINE(853)
											Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
											HX_STACK_LINE(853)
											Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
											HX_STACK_LINE(853)
											Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
											HX_STACK_LINE(853)
											Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
											HX_STACK_LINE(853)
											Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
											HX_STACK_LINE(853)
											Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
											HX_STACK_LINE(853)
											Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
											HX_STACK_LINE(853)
											Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
											HX_STACK_LINE(853)
											Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
											HX_STACK_LINE(853)
											Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
											HX_STACK_LINE(853)
											Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
											HX_STACK_LINE(853)
											Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
											HX_STACK_LINE(853)
											Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
											HX_STACK_LINE(853)
											Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
											HX_STACK_LINE(853)
											Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
											HX_STACK_LINE(853)
											Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
											HX_STACK_LINE(853)
											Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
											HX_STACK_LINE(853)
											Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
											HX_STACK_LINE(853)
											Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
											HX_STACK_LINE(853)
											Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
											HX_STACK_LINE(853)
											result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
											HX_STACK_LINE(853)
											result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
											HX_STACK_LINE(853)
											result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
											HX_STACK_LINE(853)
											result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
											HX_STACK_LINE(853)
											result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
											HX_STACK_LINE(853)
											result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
											HX_STACK_LINE(853)
											result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
											HX_STACK_LINE(853)
											result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
											HX_STACK_LINE(853)
											result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
											HX_STACK_LINE(853)
											result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
											HX_STACK_LINE(853)
											result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
											HX_STACK_LINE(853)
											result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
											HX_STACK_LINE(853)
											result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
											HX_STACK_LINE(853)
											result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
											HX_STACK_LINE(853)
											result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
											HX_STACK_LINE(853)
											result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
											HX_STACK_LINE(853)
											result;
										}
									}
								}
								struct _Function_7_1{
									inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
										HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",853,0x7c8236a5)
										{
											HX_STACK_LINE(853)
											::com::gamestudiohx::babylonhx::tools::math::Matrix _g76 = mesh->parent->getWorldMatrix();		HX_STACK_VAR(_g76,"_g76");
											HX_STACK_LINE(853)
											return (_g76 != null());
										}
										return null();
									}
								};
								HX_STACK_LINE(853)
								if (((  (((  (((mesh->parent != null()))) ? bool(_Function_7_1::Block(mesh)) : bool(false) ))) ? bool((mesh->billboardMode == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE)) : bool(false) ))){
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
											HX_STACK_LINE(853)
											Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
											HX_STACK_LINE(853)
											Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
											HX_STACK_LINE(853)
											Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
											HX_STACK_LINE(853)
											Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
											HX_STACK_LINE(853)
											Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
											HX_STACK_LINE(853)
											Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
											HX_STACK_LINE(853)
											Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
											HX_STACK_LINE(853)
											Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
											HX_STACK_LINE(853)
											Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
											HX_STACK_LINE(853)
											Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
											HX_STACK_LINE(853)
											Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
											HX_STACK_LINE(853)
											Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
											HX_STACK_LINE(853)
											Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
											HX_STACK_LINE(853)
											Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
											HX_STACK_LINE(853)
											Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
											HX_STACK_LINE(853)
											Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
											HX_STACK_LINE(853)
											Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
											HX_STACK_LINE(853)
											Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
											HX_STACK_LINE(853)
											Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
											HX_STACK_LINE(853)
											Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
											HX_STACK_LINE(853)
											Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
											HX_STACK_LINE(853)
											Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
											HX_STACK_LINE(853)
											Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
											HX_STACK_LINE(853)
											Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
											HX_STACK_LINE(853)
											Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
											HX_STACK_LINE(853)
											Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
											HX_STACK_LINE(853)
											Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
											HX_STACK_LINE(853)
											Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
											HX_STACK_LINE(853)
											Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
											HX_STACK_LINE(853)
											Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
											HX_STACK_LINE(853)
											Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
											HX_STACK_LINE(853)
											Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
											HX_STACK_LINE(853)
											result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
											HX_STACK_LINE(853)
											result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
											HX_STACK_LINE(853)
											result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
											HX_STACK_LINE(853)
											result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
											HX_STACK_LINE(853)
											result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
											HX_STACK_LINE(853)
											result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
											HX_STACK_LINE(853)
											result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
											HX_STACK_LINE(853)
											result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
											HX_STACK_LINE(853)
											result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
											HX_STACK_LINE(853)
											result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
											HX_STACK_LINE(853)
											result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
											HX_STACK_LINE(853)
											result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
											HX_STACK_LINE(853)
											result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
											HX_STACK_LINE(853)
											result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
											HX_STACK_LINE(853)
											result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
											HX_STACK_LINE(853)
											result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
											HX_STACK_LINE(853)
											result;
										}
									}
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::tools::math::Matrix parentWorld = mesh->parent->getWorldMatrix();		HX_STACK_VAR(parentWorld,"parentWorld");
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localWorld;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(853)
										{
											HX_STACK_LINE(853)
											Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
											HX_STACK_LINE(853)
											Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
											HX_STACK_LINE(853)
											Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
											HX_STACK_LINE(853)
											Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
											HX_STACK_LINE(853)
											Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
											HX_STACK_LINE(853)
											Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
											HX_STACK_LINE(853)
											Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
											HX_STACK_LINE(853)
											Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
											HX_STACK_LINE(853)
											Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
											HX_STACK_LINE(853)
											Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
											HX_STACK_LINE(853)
											Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
											HX_STACK_LINE(853)
											Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
											HX_STACK_LINE(853)
											Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
											HX_STACK_LINE(853)
											Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
											HX_STACK_LINE(853)
											Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
											HX_STACK_LINE(853)
											Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
											HX_STACK_LINE(853)
											Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
											HX_STACK_LINE(853)
											Float om0 = parentWorld->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
											HX_STACK_LINE(853)
											Float om1 = parentWorld->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
											HX_STACK_LINE(853)
											Float om2 = parentWorld->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
											HX_STACK_LINE(853)
											Float om3 = parentWorld->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
											HX_STACK_LINE(853)
											Float om4 = parentWorld->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
											HX_STACK_LINE(853)
											Float om5 = parentWorld->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
											HX_STACK_LINE(853)
											Float om6 = parentWorld->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
											HX_STACK_LINE(853)
											Float om7 = parentWorld->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
											HX_STACK_LINE(853)
											Float om8 = parentWorld->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
											HX_STACK_LINE(853)
											Float om9 = parentWorld->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
											HX_STACK_LINE(853)
											Float om10 = parentWorld->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
											HX_STACK_LINE(853)
											Float om11 = parentWorld->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
											HX_STACK_LINE(853)
											Float om12 = parentWorld->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
											HX_STACK_LINE(853)
											Float om13 = parentWorld->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
											HX_STACK_LINE(853)
											Float om14 = parentWorld->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
											HX_STACK_LINE(853)
											Float om15 = parentWorld->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
											HX_STACK_LINE(853)
											result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
											HX_STACK_LINE(853)
											result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
											HX_STACK_LINE(853)
											result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
											HX_STACK_LINE(853)
											result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
											HX_STACK_LINE(853)
											result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
											HX_STACK_LINE(853)
											result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
											HX_STACK_LINE(853)
											result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
											HX_STACK_LINE(853)
											result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
											HX_STACK_LINE(853)
											result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
											HX_STACK_LINE(853)
											result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
											HX_STACK_LINE(853)
											result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
											HX_STACK_LINE(853)
											result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
											HX_STACK_LINE(853)
											result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
											HX_STACK_LINE(853)
											result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
											HX_STACK_LINE(853)
											result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
											HX_STACK_LINE(853)
											result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
											HX_STACK_LINE(853)
											result;
										}
									}
								}
								else{
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(853)
										Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
										HX_STACK_LINE(853)
										Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
										HX_STACK_LINE(853)
										Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
										HX_STACK_LINE(853)
										Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
										HX_STACK_LINE(853)
										Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
										HX_STACK_LINE(853)
										Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
										HX_STACK_LINE(853)
										Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
										HX_STACK_LINE(853)
										Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
										HX_STACK_LINE(853)
										Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
										HX_STACK_LINE(853)
										Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
										HX_STACK_LINE(853)
										Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
										HX_STACK_LINE(853)
										Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
										HX_STACK_LINE(853)
										Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
										HX_STACK_LINE(853)
										Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
										HX_STACK_LINE(853)
										Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
										HX_STACK_LINE(853)
										Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
										HX_STACK_LINE(853)
										Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
										HX_STACK_LINE(853)
										Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
										HX_STACK_LINE(853)
										Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
										HX_STACK_LINE(853)
										Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
										HX_STACK_LINE(853)
										Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
										HX_STACK_LINE(853)
										Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
										HX_STACK_LINE(853)
										Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
										HX_STACK_LINE(853)
										Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
										HX_STACK_LINE(853)
										Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
										HX_STACK_LINE(853)
										Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
										HX_STACK_LINE(853)
										Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
										HX_STACK_LINE(853)
										Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
										HX_STACK_LINE(853)
										Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
										HX_STACK_LINE(853)
										Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
										HX_STACK_LINE(853)
										Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
										HX_STACK_LINE(853)
										Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
										HX_STACK_LINE(853)
										result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
										HX_STACK_LINE(853)
										result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
										HX_STACK_LINE(853)
										result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
										HX_STACK_LINE(853)
										result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
										HX_STACK_LINE(853)
										result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
										HX_STACK_LINE(853)
										result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
										HX_STACK_LINE(853)
										result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
										HX_STACK_LINE(853)
										result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
										HX_STACK_LINE(853)
										result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
										HX_STACK_LINE(853)
										result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
										HX_STACK_LINE(853)
										result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
										HX_STACK_LINE(853)
										result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
										HX_STACK_LINE(853)
										result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
										HX_STACK_LINE(853)
										result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
										HX_STACK_LINE(853)
										result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
										HX_STACK_LINE(853)
										result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
										HX_STACK_LINE(853)
										result;
									}
								}
								HX_STACK_LINE(853)
								if (((mesh->_boundingInfo != null()))){
									HX_STACK_LINE(853)
									Float _g77 = ::Math_obj::max(mesh->scaling->x,mesh->scaling->y);		HX_STACK_VAR(_g77,"_g77");
									HX_STACK_LINE(853)
									mesh->_scaleFactor = _g77;
									HX_STACK_LINE(853)
									Float _g78 = ::Math_obj::max(mesh->_scaleFactor,mesh->scaling->z);		HX_STACK_VAR(_g78,"_g78");
									HX_STACK_LINE(853)
									mesh->_scaleFactor = _g78;
									struct _Function_8_1{
										inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
											HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",853,0x7c8236a5)
											{
												HX_STACK_LINE(853)
												Dynamic _g79 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g79,"_g79");
												HX_STACK_LINE(853)
												return (_g79 != null());
											}
											return null();
										}
									};
									HX_STACK_LINE(853)
									if (((  (((mesh->parent != null()))) ? bool(_Function_8_1::Block(mesh)) : bool(false) ))){
										HX_STACK_LINE(853)
										Dynamic _g80 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g80,"_g80");
										HX_STACK_LINE(853)
										Float _g81 = (mesh->_scaleFactor * _g80);		HX_STACK_VAR(_g81,"_g81");
										HX_STACK_LINE(853)
										mesh->_scaleFactor = _g81;
									}
									HX_STACK_LINE(853)
									mesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
									HX_STACK_LINE(853)
									{
										HX_STACK_LINE(853)
										int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
										HX_STACK_LINE(853)
										int _g2 = mesh->subMeshes->length;		HX_STACK_VAR(_g2,"_g2");
										HX_STACK_LINE(853)
										while((true)){
											HX_STACK_LINE(853)
											if ((!(((_g11 < _g2))))){
												HX_STACK_LINE(853)
												break;
											}
											HX_STACK_LINE(853)
											int subIndex = (_g11)++;		HX_STACK_VAR(subIndex,"subIndex");
											HX_STACK_LINE(853)
											::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
											HX_STACK_LINE(853)
											subMesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
										}
									}
								}
								HX_STACK_LINE(853)
								{
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_absolutePosition;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(853)
									_this->x = mesh->_worldMatrix->m->__get((int)12);
									HX_STACK_LINE(853)
									_this->y = mesh->_worldMatrix->m->__get((int)13);
									HX_STACK_LINE(853)
									_this->z = mesh->_worldMatrix->m->__get((int)14);
								}
								HX_STACK_LINE(853)
								ret = mesh->_worldMatrix;
							}
							HX_STACK_LINE(853)
							ret;
						}
						HX_STACK_LINE(853)
						if (((  (((  (((  ((mesh->isEnabled())) ? bool(mesh->isVisible) : bool(false) ))) ? bool((mesh->visibility > (int)0)) : bool(false) ))) ? bool(mesh->isInFrustum(this->_frustumPlanes)) : bool(false) ))){
							HX_STACK_LINE(853)
							this->_activeMeshes->push(mesh);
							HX_STACK_LINE(853)
							if (((mesh->skeleton != null()))){
								HX_STACK_LINE(853)
								this->_activeSkeletons->pushNoDuplicate(mesh->skeleton);
							}
							HX_STACK_LINE(853)
							{
								HX_STACK_LINE(853)
								int _g3 = (int)0;		HX_STACK_VAR(_g3,"_g3");
								HX_STACK_LINE(853)
								int _g2 = mesh->subMeshes->length;		HX_STACK_VAR(_g2,"_g2");
								HX_STACK_LINE(853)
								while((true)){
									HX_STACK_LINE(853)
									if ((!(((_g3 < _g2))))){
										HX_STACK_LINE(853)
										break;
									}
									HX_STACK_LINE(853)
									int subIndex = (_g3)++;		HX_STACK_VAR(subIndex,"subIndex");
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
									HX_STACK_LINE(853)
									if (((  ((!(((mesh->subMeshes->length == (int)1))))) ? bool(subMesh->_boundingInfo->isInFrustrum(this->_frustumPlanes)) : bool(true) ))){
										HX_STACK_LINE(853)
										Dynamic material = subMesh->getMaterial();		HX_STACK_VAR(material,"material");
										HX_STACK_LINE(853)
										if (((material != null()))){
											HX_STACK_LINE(853)
											Dynamic _g82 = ::Reflect_obj::field(material,HX_CSTRING("getRenderTargetTextures"));		HX_STACK_VAR(_g82,"_g82");
											HX_STACK_LINE(853)
											if (((_g82 != null()))){
												HX_STACK_LINE(853)
												int _g83 = this->_processedMaterials->indexOf(material);		HX_STACK_VAR(_g83,"_g83");
												HX_STACK_LINE(853)
												if (((_g83 == (int)-1))){
													HX_STACK_LINE(853)
													this->_processedMaterials->push(material);
													HX_STACK_LINE(853)
													Dynamic _g84 = material->__Field(HX_CSTRING("getRenderTargetTextures"),true)();		HX_STACK_VAR(_g84,"_g84");
													HX_STACK_LINE(853)
													this->_renderTargets->concat(_g84);
												}
											}
											HX_STACK_LINE(853)
											hx::AddEq(this->_activeVertices,subMesh->verticesCount);
											HX_STACK_LINE(853)
											{
												HX_STACK_LINE(853)
												::com::gamestudiohx::babylonhx::rendering::RenderingManager _this = this->_renderingManager;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(853)
												::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh1 = subMesh->getMesh();		HX_STACK_VAR(mesh1,"mesh1");
												HX_STACK_LINE(853)
												int renderingGroupId = mesh1->renderingGroupId;		HX_STACK_VAR(renderingGroupId,"renderingGroupId");
												HX_STACK_LINE(853)
												if (((_this->_renderingGroups->length <= renderingGroupId))){
													HX_STACK_LINE(853)
													_this->_renderingGroups[renderingGroupId] = ::com::gamestudiohx::babylonhx::rendering::RenderingGroup_obj::__new(renderingGroupId,_this->_scene);
												}
												HX_STACK_LINE(853)
												_this->_renderingGroups->__get(renderingGroupId).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingGroup >()->dispatch(subMesh);
											}
										}
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(853)
				int beforeParticlesDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeParticlesDate,"beforeParticlesDate");
				HX_STACK_LINE(853)
				if ((this->particlesEnabled)){
					HX_STACK_LINE(853)
					int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
					HX_STACK_LINE(853)
					int _g = this->particleSystems->length;		HX_STACK_VAR(_g,"_g");
					HX_STACK_LINE(853)
					while((true)){
						HX_STACK_LINE(853)
						if ((!(((_g1 < _g))))){
							HX_STACK_LINE(853)
							break;
						}
						HX_STACK_LINE(853)
						int particleIndex = (_g1)++;		HX_STACK_VAR(particleIndex,"particleIndex");
						HX_STACK_LINE(853)
						::com::gamestudiohx::babylonhx::particles::ParticleSystem particleSystem = this->particleSystems->__get(particleIndex).StaticCast< ::com::gamestudiohx::babylonhx::particles::ParticleSystem >();		HX_STACK_VAR(particleSystem,"particleSystem");
						struct _Function_5_1{
							inline static bool Block( ::com::gamestudiohx::babylonhx::particles::ParticleSystem &particleSystem){
								HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",853,0x7c8236a5)
								{
									HX_STACK_LINE(853)
									return (  ((particleSystem->emitter)) ? bool(particleSystem->emitter->__Field(HX_CSTRING("isEnabled"),true)()) : bool(false) );
								}
								return null();
							}
						};
						HX_STACK_LINE(853)
						if (((  ((!((!(particleSystem->emitter->__Field(HX_CSTRING("position"),true)))))) ? bool(_Function_5_1::Block(particleSystem)) : bool(true) ))){
							HX_STACK_LINE(853)
							this->_activeParticleSystems->push(particleSystem);
							HX_STACK_LINE(853)
							particleSystem->animate();
						}
					}
				}
				HX_STACK_LINE(853)
				int _g85 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g85,"_g85");
				HX_STACK_LINE(853)
				int _g86 = (_g85 - beforeParticlesDate);		HX_STACK_VAR(_g86,"_g86");
				HX_STACK_LINE(853)
				hx::AddEq(this->_particlesDuration,_g86);
			}
			HX_STACK_LINE(853)
			int _g87 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g87,"_g87");
			HX_STACK_LINE(853)
			int _g88 = (_g87 - beforeEvaluateActiveMeshesDate);		HX_STACK_VAR(_g88,"_g88");
			HX_STACK_LINE(853)
			hx::AddEq(this->_evaluateActiveMeshesDuration,_g88);
			HX_STACK_LINE(853)
			{
				HX_STACK_LINE(853)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(853)
				int _g = this->_activeSkeletons->length;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(853)
				while((true)){
					HX_STACK_LINE(853)
					if ((!(((_g1 < _g))))){
						HX_STACK_LINE(853)
						break;
					}
					HX_STACK_LINE(853)
					int skeletonIndex = (_g1)++;		HX_STACK_VAR(skeletonIndex,"skeletonIndex");
					HX_STACK_LINE(853)
					::com::gamestudiohx::babylonhx::bones::Skeleton skeleton = this->_activeSkeletons->data->__GetItem(skeletonIndex);		HX_STACK_VAR(skeleton,"skeleton");
					HX_STACK_LINE(853)
					skeleton->prepare();
				}
			}
			HX_STACK_LINE(853)
			{
				HX_STACK_LINE(853)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(853)
				int _g = this->customRenderTargets->__Field(HX_CSTRING("length"),true);		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(853)
				while((true)){
					HX_STACK_LINE(853)
					if ((!(((_g1 < _g))))){
						HX_STACK_LINE(853)
						break;
					}
					HX_STACK_LINE(853)
					int customIndex = (_g1)++;		HX_STACK_VAR(customIndex,"customIndex");
					HX_STACK_LINE(853)
					this->_renderTargets->push(this->customRenderTargets->__GetItem(customIndex));
				}
			}
			HX_STACK_LINE(853)
			int beforeRenderTargetDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeRenderTargetDate,"beforeRenderTargetDate");
			HX_STACK_LINE(853)
			if ((this->renderTargetsEnabled)){
				HX_STACK_LINE(853)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(853)
				int _g = this->_renderTargets->length;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(853)
				while((true)){
					HX_STACK_LINE(853)
					if ((!(((_g1 < _g))))){
						HX_STACK_LINE(853)
						break;
					}
					HX_STACK_LINE(853)
					int renderIndex = (_g1)++;		HX_STACK_VAR(renderIndex,"renderIndex");
					HX_STACK_LINE(853)
					Dynamic renderTarget = this->_renderTargets->data->__GetItem(renderIndex);		HX_STACK_VAR(renderTarget,"renderTarget");
					HX_STACK_LINE(853)
					(this->_renderId)++;
					HX_STACK_LINE(853)
					renderTarget->__Field(HX_CSTRING("render"),true)();
				}
			}
			HX_STACK_LINE(853)
			if (((this->_renderTargets->length > (int)0))){
				HX_STACK_LINE(853)
				engine->restoreDefaultFramebuffer();
			}
			HX_STACK_LINE(853)
			int _g89 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g89,"_g89");
			HX_STACK_LINE(853)
			int _g90 = (_g89 - beforeRenderTargetDate);		HX_STACK_VAR(_g90,"_g90");
			HX_STACK_LINE(853)
			this->_renderTargetsDuration = _g90;
			HX_STACK_LINE(853)
			this->postProcessManager->_prepareFrame();
			HX_STACK_LINE(853)
			int beforeRenderDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeRenderDate,"beforeRenderDate");
			HX_STACK_LINE(853)
			if (((this->layers->length > (int)0))){
				HX_STACK_LINE(853)
				engine->setDepthBuffer(false);
				HX_STACK_LINE(853)
				::com::gamestudiohx::babylonhx::layer::Layer layer = null();		HX_STACK_VAR(layer,"layer");
				HX_STACK_LINE(853)
				{
					HX_STACK_LINE(853)
					int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
					HX_STACK_LINE(853)
					int _g = this->layers->length;		HX_STACK_VAR(_g,"_g");
					HX_STACK_LINE(853)
					while((true)){
						HX_STACK_LINE(853)
						if ((!(((_g1 < _g))))){
							HX_STACK_LINE(853)
							break;
						}
						HX_STACK_LINE(853)
						int layerIndex = (_g1)++;		HX_STACK_VAR(layerIndex,"layerIndex");
						HX_STACK_LINE(853)
						layer = this->layers->__get(layerIndex).StaticCast< ::com::gamestudiohx::babylonhx::layer::Layer >();
						HX_STACK_LINE(853)
						if ((layer->isBackground)){
							HX_STACK_LINE(853)
							layer->render();
						}
					}
				}
				HX_STACK_LINE(853)
				engine->setDepthBuffer(true);
			}
			HX_STACK_LINE(853)
			{
				HX_STACK_LINE(853)
				::com::gamestudiohx::babylonhx::rendering::RenderingManager _this = this->_renderingManager;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(853)
				Array< ::Dynamic > _g2 = Array_obj< ::Dynamic >::__new().Add(_this);		HX_STACK_VAR(_g2,"_g2");
				HX_STACK_LINE(853)
				{
					HX_STACK_LINE(853)
					int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
					HX_STACK_LINE(853)
					int _g = ::com::gamestudiohx::babylonhx::rendering::RenderingManager_obj::MAX_RENDERINGGROUPS;		HX_STACK_VAR(_g,"_g");
					HX_STACK_LINE(853)
					while((true)){
						HX_STACK_LINE(853)
						if ((!(((_g1 < _g))))){
							HX_STACK_LINE(853)
							break;
						}
						HX_STACK_LINE(853)
						Array< int > index = Array_obj< int >::__new().Add((_g1)++);		HX_STACK_VAR(index,"index");
						HX_STACK_LINE(853)
						_this->_depthBufferAlreadyCleaned = (index->__get((int)0) == (int)0);
						HX_STACK_LINE(853)
						::com::gamestudiohx::babylonhx::rendering::RenderingGroup renderingGroup = _this->_renderingGroups->__get(index->__get((int)0)).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingGroup >();		HX_STACK_VAR(renderingGroup,"renderingGroup");
						HX_STACK_LINE(853)
						if (((renderingGroup != null()))){
							HX_STACK_LINE(853)
							_this->_clearDepthBuffer();

							HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_Function_6_1,Array< int >,index,Array< ::Dynamic >,_g2)
							Void run(){
								HX_STACK_FRAME("*","_Function_6_1",0x5204b87c,"*._Function_6_1","com/gamestudiohx/babylonhx/Scene.hx",853,0x7c8236a5)
								{
									HX_STACK_LINE(853)
									_g2->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::rendering::RenderingManager >()->_renderSprites(index->__get((int)0));
								}
								return null();
							}
							HX_END_LOCAL_FUNC0((void))

							HX_STACK_LINE(853)
							if ((!(renderingGroup->render(null(), Dynamic(new _Function_6_1(index,_g2)))))){
								HX_STACK_LINE(853)
								_this->_renderingGroups->splice(index->__get((int)0),(int)1);
							}
						}
						else{
							HX_STACK_LINE(853)
							_this->_renderSprites(index->__get((int)0));
						}
						HX_STACK_LINE(853)
						if (((_this->_scene->_activeParticleSystems->length != (int)0))){
							HX_STACK_LINE(853)
							int beforeParticlesDate = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(beforeParticlesDate,"beforeParticlesDate");
							HX_STACK_LINE(853)
							{
								HX_STACK_LINE(853)
								int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(853)
								int _g3 = _this->_scene->_activeParticleSystems->length;		HX_STACK_VAR(_g3,"_g3");
								HX_STACK_LINE(853)
								while((true)){
									HX_STACK_LINE(853)
									if ((!(((_g11 < _g3))))){
										HX_STACK_LINE(853)
										break;
									}
									HX_STACK_LINE(853)
									int particleIndex = (_g11)++;		HX_STACK_VAR(particleIndex,"particleIndex");
									HX_STACK_LINE(853)
									::com::gamestudiohx::babylonhx::particles::ParticleSystem particleSystem = _this->_scene->_activeParticleSystems->data->__GetItem(particleIndex);		HX_STACK_VAR(particleSystem,"particleSystem");
									HX_STACK_LINE(853)
									if (((particleSystem->renderingGroupId == index->__get((int)0)))){
										HX_STACK_LINE(853)
										_this->_clearDepthBuffer();
										struct _Function_9_1{
											inline static bool Block( ::com::gamestudiohx::babylonhx::particles::ParticleSystem &particleSystem){
												HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",853,0x7c8236a5)
												{
													HX_STACK_LINE(853)
													int _g91 = ::Lambda_obj::indexOf(null(),particleSystem->emitter);		HX_STACK_VAR(_g91,"_g91");
													HX_STACK_LINE(853)
													return (_g91 != (int)-1);
												}
												return null();
											}
										};
										HX_STACK_LINE(853)
										if (((  ((!((!(particleSystem->emitter->__Field(HX_CSTRING("position"),true)))))) ? bool(_Function_9_1::Block(particleSystem)) : bool(true) ))){
											HX_STACK_LINE(853)
											int _g92 = particleSystem->render();		HX_STACK_VAR(_g92,"_g92");
											HX_STACK_LINE(853)
											hx::AddEq(_this->_scene->_activeParticles,_g92);
										}
									}
								}
							}
							HX_STACK_LINE(853)
							int _g93 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g93,"_g93");
							HX_STACK_LINE(853)
							int _g94 = (_g93 - beforeParticlesDate);		HX_STACK_VAR(_g94,"_g94");
							HX_STACK_LINE(853)
							hx::AddEq(_this->_scene->_particlesDuration,_g94);
						}
					}
				}
			}
			HX_STACK_LINE(853)
			{
				HX_STACK_LINE(853)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(853)
				int _g = this->lensFlareSystems->length;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(853)
				while((true)){
					HX_STACK_LINE(853)
					if ((!(((_g1 < _g))))){
						HX_STACK_LINE(853)
						break;
					}
					HX_STACK_LINE(853)
					int lensFlareSystemIndex = (_g1)++;		HX_STACK_VAR(lensFlareSystemIndex,"lensFlareSystemIndex");
					HX_STACK_LINE(853)
					this->lensFlareSystems->__get(lensFlareSystemIndex).StaticCast< ::com::gamestudiohx::babylonhx::lensflare::LensFlareSystem >()->render();
				}
			}
			HX_STACK_LINE(853)
			if (((this->layers->length > (int)0))){
				HX_STACK_LINE(853)
				engine->setDepthBuffer(false);
				HX_STACK_LINE(853)
				{
					HX_STACK_LINE(853)
					int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
					HX_STACK_LINE(853)
					int _g = this->layers->length;		HX_STACK_VAR(_g,"_g");
					HX_STACK_LINE(853)
					while((true)){
						HX_STACK_LINE(853)
						if ((!(((_g1 < _g))))){
							HX_STACK_LINE(853)
							break;
						}
						HX_STACK_LINE(853)
						int layerIndex = (_g1)++;		HX_STACK_VAR(layerIndex,"layerIndex");
						HX_STACK_LINE(853)
						::com::gamestudiohx::babylonhx::layer::Layer layer = this->layers->__get(layerIndex).StaticCast< ::com::gamestudiohx::babylonhx::layer::Layer >();		HX_STACK_VAR(layer,"layer");
						HX_STACK_LINE(853)
						if ((!(layer->isBackground))){
							HX_STACK_LINE(853)
							layer->render();
						}
					}
				}
				HX_STACK_LINE(853)
				engine->setDepthBuffer(true);
			}
			HX_STACK_LINE(853)
			int _g95 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g95,"_g95");
			HX_STACK_LINE(853)
			int _g96 = (_g95 - beforeRenderDate);		HX_STACK_VAR(_g96,"_g96");
			HX_STACK_LINE(853)
			hx::AddEq(this->_renderDuration,_g96);
			HX_STACK_LINE(853)
			this->postProcessManager->_finalizeFrame();
			HX_STACK_LINE(853)
			this->activeCamera->_update();
			HX_STACK_LINE(853)
			this->_renderTargets->reset();
		}
		HX_STACK_LINE(857)
		if (((this->afterRender_dyn() != null()))){
			HX_STACK_LINE(858)
			this->afterRender();
		}
		HX_STACK_LINE(862)
		{
			HX_STACK_LINE(862)
			int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(862)
			int _g = this->_toBeDisposed->length;		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(862)
			while((true)){
				HX_STACK_LINE(862)
				if ((!(((_g1 < _g))))){
					HX_STACK_LINE(862)
					break;
				}
				HX_STACK_LINE(862)
				int index = (_g1)++;		HX_STACK_VAR(index,"index");
				HX_STACK_LINE(863)
				this->_toBeDisposed->data->__GetItem(index)->__Field(HX_CSTRING("dispose"),true)();
			}
		}
		HX_STACK_LINE(866)
		this->_toBeDisposed->reset();
		HX_STACK_LINE(869)
		::openfl::gl::GL_obj::lime_gl_disable((int)2884);
		HX_STACK_LINE(870)
		::openfl::gl::GL_obj::lime_gl_bind_buffer((int)34962,null());
		HX_STACK_LINE(872)
		int _g97 = ::openfl::Lib_obj::getTimer();		HX_STACK_VAR(_g97,"_g97");
		HX_STACK_LINE(872)
		int _g98 = (_g97 - startDate);		HX_STACK_VAR(_g98,"_g98");
		HX_STACK_LINE(872)
		this->_lastFrameDuration = _g98;
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,render,(void))

Void Scene_obj::dispose( ){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","dispose",0xfd3f1ceb,"com.gamestudiohx.babylonhx.Scene.dispose","com/gamestudiohx/babylonhx/Scene.hx",875,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_LINE(876)
		this->beforeRender = null();
		HX_STACK_LINE(877)
		this->afterRender = null();
		HX_STACK_LINE(879)
		this->skeletons = Array_obj< ::Dynamic >::__new();
		HX_STACK_LINE(890)
		while((true)){
			HX_STACK_LINE(890)
			if ((!(((this->lights->length > (int)0))))){
				HX_STACK_LINE(890)
				break;
			}
			HX_STACK_LINE(891)
			this->lights->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::lights::Light >()->dispose();
			HX_STACK_LINE(892)
			this->lights->remove(this->lights->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::lights::Light >());
		}
		HX_STACK_LINE(896)
		while((true)){
			HX_STACK_LINE(896)
			if ((!(((this->meshes->length > (int)0))))){
				HX_STACK_LINE(896)
				break;
			}
			HX_STACK_LINE(897)
			this->meshes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >()->dispose(true);
			HX_STACK_LINE(898)
			this->meshes->remove(this->meshes->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >());
		}
		HX_STACK_LINE(902)
		while((true)){
			HX_STACK_LINE(902)
			if ((!(((this->cameras->length > (int)0))))){
				HX_STACK_LINE(902)
				break;
			}
			HX_STACK_LINE(903)
			this->cameras->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::cameras::Camera >()->dispose();
			HX_STACK_LINE(904)
			this->cameras->remove(this->cameras->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::cameras::Camera >());
		}
		HX_STACK_LINE(908)
		while((true)){
			HX_STACK_LINE(908)
			if ((!(((this->materials->length > (int)0))))){
				HX_STACK_LINE(908)
				break;
			}
			HX_STACK_LINE(909)
			this->materials->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::materials::Material >()->dispose();
			HX_STACK_LINE(910)
			this->materials->remove(this->materials->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::materials::Material >());
		}
		HX_STACK_LINE(914)
		while((true)){
			HX_STACK_LINE(914)
			if ((!(((this->particleSystems->length > (int)0))))){
				HX_STACK_LINE(914)
				break;
			}
			HX_STACK_LINE(915)
			this->particleSystems->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::particles::ParticleSystem >()->dispose();
			HX_STACK_LINE(916)
			this->particleSystems->remove(this->particleSystems->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::particles::ParticleSystem >());
		}
		HX_STACK_LINE(920)
		while((true)){
			HX_STACK_LINE(920)
			if ((!(((this->spriteManagers->length > (int)0))))){
				HX_STACK_LINE(920)
				break;
			}
			HX_STACK_LINE(921)
			this->spriteManagers->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::sprites::SpriteManager >()->dispose();
			HX_STACK_LINE(922)
			this->spriteManagers->remove(this->spriteManagers->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::sprites::SpriteManager >());
		}
		HX_STACK_LINE(926)
		while((true)){
			HX_STACK_LINE(926)
			if ((!(((this->layers->length > (int)0))))){
				HX_STACK_LINE(926)
				break;
			}
			HX_STACK_LINE(927)
			this->layers->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::layer::Layer >()->dispose();
			HX_STACK_LINE(928)
			this->layers->remove(this->layers->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::layer::Layer >());
		}
		HX_STACK_LINE(932)
		while((true)){
			HX_STACK_LINE(932)
			if ((!(((this->textures->length > (int)0))))){
				HX_STACK_LINE(932)
				break;
			}
			HX_STACK_LINE(933)
			this->textures->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::materials::textures::BaseTexture >()->dispose();
			HX_STACK_LINE(934)
			this->textures->remove(this->textures->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::materials::textures::BaseTexture >());
		}
		HX_STACK_LINE(938)
		this->postProcessManager->dispose();
		HX_STACK_LINE(949)
		this->_engine->scenes->remove(hx::ObjectPtr<OBJ_>(this));
		HX_STACK_LINE(951)
		this->_engine->wipeCaches();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,dispose,(void))

::com::gamestudiohx::babylonhx::mesh::Geometry Scene_obj::getGeometryByID( ::String id){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","getGeometryByID",0xb4258746,"com.gamestudiohx.babylonhx.Scene.getGeometryByID","com/gamestudiohx/babylonhx/Scene.hx",954,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(id,"id")
	HX_STACK_LINE(955)
	{
		HX_STACK_LINE(955)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(955)
		int _g = this->_geometries->length;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(955)
		while((true)){
			HX_STACK_LINE(955)
			if ((!(((_g1 < _g))))){
				HX_STACK_LINE(955)
				break;
			}
			HX_STACK_LINE(955)
			int index = (_g1)++;		HX_STACK_VAR(index,"index");
			HX_STACK_LINE(956)
			if (((this->_geometries->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::Geometry >()->id == id))){
				HX_STACK_LINE(957)
				return this->_geometries->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::Geometry >();
			}
		}
	}
	HX_STACK_LINE(961)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getGeometryByID,return )

bool Scene_obj::pushGeometry( ::com::gamestudiohx::babylonhx::mesh::Geometry geometry,hx::Null< bool >  __o_force){
bool force = __o_force.Default(false);
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","pushGeometry",0xe97f8ae0,"com.gamestudiohx.babylonhx.Scene.pushGeometry","com/gamestudiohx/babylonhx/Scene.hx",964,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(geometry,"geometry")
	HX_STACK_ARG(force,"force")
{
		struct _Function_1_1{
			inline static bool Block( hx::ObjectPtr< ::com::gamestudiohx::babylonhx::Scene_obj > __this,::com::gamestudiohx::babylonhx::mesh::Geometry &geometry){
				HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",965,0x7c8236a5)
				{
					HX_STACK_LINE(965)
					::com::gamestudiohx::babylonhx::mesh::Geometry _g = __this->getGeometryByID(geometry->id);		HX_STACK_VAR(_g,"_g");
					HX_STACK_LINE(965)
					return (_g != null());
				}
				return null();
			}
		};
		HX_STACK_LINE(965)
		if (((  ((!(force))) ? bool(_Function_1_1::Block(this,geometry)) : bool(false) ))){
			HX_STACK_LINE(966)
			return false;
		}
		HX_STACK_LINE(969)
		this->_geometries->push(geometry);
		HX_STACK_LINE(971)
		return true;
	}
}


HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,pushGeometry,return )

Void Scene_obj::_getNewPosition( ::com::gamestudiohx::babylonhx::tools::math::Vector3 position,::com::gamestudiohx::babylonhx::tools::math::Vector3 velocity,::com::gamestudiohx::babylonhx::collisions::Collider collider,int maximumRetry,::com::gamestudiohx::babylonhx::tools::math::Vector3 finalPosition){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","_getNewPosition",0x006ff11e,"com.gamestudiohx.babylonhx.Scene._getNewPosition","com/gamestudiohx/babylonhx/Scene.hx",974,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_ARG(position,"position")
		HX_STACK_ARG(velocity,"velocity")
		HX_STACK_ARG(collider,"collider")
		HX_STACK_ARG(maximumRetry,"maximumRetry")
		HX_STACK_ARG(finalPosition,"finalPosition")
		HX_STACK_LINE(975)
		{
			HX_STACK_LINE(975)
			::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->radius;		HX_STACK_VAR(otherVector,"otherVector");
			HX_STACK_LINE(975)
			::com::gamestudiohx::babylonhx::tools::math::Vector3 result = this->_scaledPosition;		HX_STACK_VAR(result,"result");
			HX_STACK_LINE(975)
			result->x = (Float(position->x) / Float(otherVector->x));
			HX_STACK_LINE(975)
			result->y = (Float(position->y) / Float(otherVector->y));
			HX_STACK_LINE(975)
			result->z = (Float(position->z) / Float(otherVector->z));
		}
		HX_STACK_LINE(976)
		{
			HX_STACK_LINE(976)
			::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->radius;		HX_STACK_VAR(otherVector,"otherVector");
			HX_STACK_LINE(976)
			::com::gamestudiohx::babylonhx::tools::math::Vector3 result = this->_scaledVelocity;		HX_STACK_VAR(result,"result");
			HX_STACK_LINE(976)
			result->x = (Float(velocity->x) / Float(otherVector->x));
			HX_STACK_LINE(976)
			result->y = (Float(velocity->y) / Float(otherVector->y));
			HX_STACK_LINE(976)
			result->z = (Float(velocity->z) / Float(otherVector->z));
		}
		HX_STACK_LINE(978)
		collider->retry = (int)0;
		HX_STACK_LINE(979)
		collider->initialVelocity = this->_scaledVelocity;
		HX_STACK_LINE(980)
		collider->initialPosition = this->_scaledPosition;
		HX_STACK_LINE(981)
		{
			HX_STACK_LINE(981)
			::com::gamestudiohx::babylonhx::tools::math::Vector3 position1 = this->_scaledPosition;		HX_STACK_VAR(position1,"position1");
			HX_STACK_LINE(981)
			::com::gamestudiohx::babylonhx::tools::math::Vector3 velocity1 = this->_scaledVelocity;		HX_STACK_VAR(velocity1,"velocity1");
			HX_STACK_LINE(981)
			Float closeDistance = (::com::gamestudiohx::babylonhx::Engine_obj::collisionsEpsilon * 10.0);		HX_STACK_VAR(closeDistance,"closeDistance");
			HX_STACK_LINE(981)
			if (((collider->retry >= maximumRetry))){
				HX_STACK_LINE(981)
				finalPosition->x = position1->x;
				HX_STACK_LINE(981)
				finalPosition->y = position1->y;
				HX_STACK_LINE(981)
				finalPosition->z = position1->z;
			}
			else{
				HX_STACK_LINE(981)
				collider->_initialize(position1,velocity1,closeDistance);
				HX_STACK_LINE(981)
				{
					HX_STACK_LINE(981)
					int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
					HX_STACK_LINE(981)
					int _g = this->meshes->length;		HX_STACK_VAR(_g,"_g");
					HX_STACK_LINE(981)
					while((true)){
						HX_STACK_LINE(981)
						if ((!(((_g1 < _g))))){
							HX_STACK_LINE(981)
							break;
						}
						HX_STACK_LINE(981)
						int index = (_g1)++;		HX_STACK_VAR(index,"index");
						HX_STACK_LINE(981)
						::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = this->meshes->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
						HX_STACK_LINE(981)
						if (((  ((mesh->isEnabled())) ? bool(mesh->checkCollisions) : bool(false) ))){
							HX_STACK_LINE(981)
							if ((mesh->_boundingInfo->_checkCollision(collider))){
								HX_STACK_LINE(981)
								{
									HX_STACK_LINE(981)
									::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_collisionsScalingMatrix;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(981)
									result->m[(int)0] = (Float(1.0) / Float(collider->radius->x));
									HX_STACK_LINE(981)
									result->m[(int)1] = (int)0;
									HX_STACK_LINE(981)
									result->m[(int)2] = (int)0;
									HX_STACK_LINE(981)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(981)
									result->m[(int)4] = (int)0;
									HX_STACK_LINE(981)
									result->m[(int)5] = (Float(1.0) / Float(collider->radius->y));
									HX_STACK_LINE(981)
									result->m[(int)6] = (int)0;
									HX_STACK_LINE(981)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(981)
									result->m[(int)8] = (int)0;
									HX_STACK_LINE(981)
									result->m[(int)9] = (int)0;
									HX_STACK_LINE(981)
									result->m[(int)10] = (Float(1.0) / Float(collider->radius->z));
									HX_STACK_LINE(981)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(981)
									result->m[(int)12] = (int)0;
									HX_STACK_LINE(981)
									result->m[(int)13] = (int)0;
									HX_STACK_LINE(981)
									result->m[(int)14] = (int)0;
									HX_STACK_LINE(981)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(981)
									result;
								}
								HX_STACK_LINE(981)
								{
									HX_STACK_LINE(981)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_worldMatrix;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(981)
									::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_collisionsScalingMatrix;		HX_STACK_VAR(other,"other");
									HX_STACK_LINE(981)
									{
										HX_STACK_LINE(981)
										Array< Float > result = mesh->_collisionsTransformMatrix->m;		HX_STACK_VAR(result,"result");
										HX_STACK_LINE(981)
										Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
										HX_STACK_LINE(981)
										Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
										HX_STACK_LINE(981)
										Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
										HX_STACK_LINE(981)
										Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
										HX_STACK_LINE(981)
										Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
										HX_STACK_LINE(981)
										Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
										HX_STACK_LINE(981)
										Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
										HX_STACK_LINE(981)
										Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
										HX_STACK_LINE(981)
										Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
										HX_STACK_LINE(981)
										Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
										HX_STACK_LINE(981)
										Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
										HX_STACK_LINE(981)
										Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
										HX_STACK_LINE(981)
										Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
										HX_STACK_LINE(981)
										Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
										HX_STACK_LINE(981)
										Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
										HX_STACK_LINE(981)
										Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
										HX_STACK_LINE(981)
										Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
										HX_STACK_LINE(981)
										Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
										HX_STACK_LINE(981)
										Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
										HX_STACK_LINE(981)
										Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
										HX_STACK_LINE(981)
										Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
										HX_STACK_LINE(981)
										Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
										HX_STACK_LINE(981)
										Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
										HX_STACK_LINE(981)
										Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
										HX_STACK_LINE(981)
										Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
										HX_STACK_LINE(981)
										Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
										HX_STACK_LINE(981)
										Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
										HX_STACK_LINE(981)
										Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
										HX_STACK_LINE(981)
										Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
										HX_STACK_LINE(981)
										Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
										HX_STACK_LINE(981)
										Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
										HX_STACK_LINE(981)
										Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
										HX_STACK_LINE(981)
										result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
										HX_STACK_LINE(981)
										result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
										HX_STACK_LINE(981)
										result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
										HX_STACK_LINE(981)
										result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
										HX_STACK_LINE(981)
										result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
										HX_STACK_LINE(981)
										result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
										HX_STACK_LINE(981)
										result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
										HX_STACK_LINE(981)
										result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
										HX_STACK_LINE(981)
										result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
										HX_STACK_LINE(981)
										result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
										HX_STACK_LINE(981)
										result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
										HX_STACK_LINE(981)
										result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
										HX_STACK_LINE(981)
										result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
										HX_STACK_LINE(981)
										result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
										HX_STACK_LINE(981)
										result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
										HX_STACK_LINE(981)
										result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
										HX_STACK_LINE(981)
										result;
									}
								}
								HX_STACK_LINE(981)
								{
									HX_STACK_LINE(981)
									::com::gamestudiohx::babylonhx::tools::math::Matrix transformMatrix = mesh->_collisionsTransformMatrix;		HX_STACK_VAR(transformMatrix,"transformMatrix");
									HX_STACK_LINE(981)
									{
										HX_STACK_LINE(981)
										int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
										HX_STACK_LINE(981)
										int _g2 = mesh->subMeshes->length;		HX_STACK_VAR(_g2,"_g2");
										HX_STACK_LINE(981)
										while((true)){
											HX_STACK_LINE(981)
											if ((!(((_g11 < _g2))))){
												HX_STACK_LINE(981)
												break;
											}
											HX_STACK_LINE(981)
											int index1 = (_g11)++;		HX_STACK_VAR(index1,"index1");
											HX_STACK_LINE(981)
											::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(index1).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
											HX_STACK_LINE(981)
											if (((  (((mesh->subMeshes->length > (int)1))) ? bool(!(subMesh->_boundingInfo->_checkCollision(collider))) : bool(false) ))){
												HX_STACK_LINE(981)
												continue;
											}
											HX_STACK_LINE(981)
											{
												HX_STACK_LINE(981)
												mesh->_generatePointsArray();
												struct _Function_11_1{
													inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::SubMesh &subMesh,::com::gamestudiohx::babylonhx::tools::math::Matrix &transformMatrix){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",981,0x7c8236a5)
														{
															HX_STACK_LINE(981)
															::com::gamestudiohx::babylonhx::tools::math::Matrix _this = subMesh->_lastColliderTransformMatrix;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(981)
															return (bool((bool((bool((bool((bool((bool((bool((bool((bool((bool((bool((bool((bool((bool((bool((_this->m->__get((int)0) == transformMatrix->m->__get((int)0))) && bool((_this->m->__get((int)1) == transformMatrix->m->__get((int)1))))) && bool((_this->m->__get((int)2) == transformMatrix->m->__get((int)2))))) && bool((_this->m->__get((int)3) == transformMatrix->m->__get((int)3))))) && bool((_this->m->__get((int)4) == transformMatrix->m->__get((int)4))))) && bool((_this->m->__get((int)5) == transformMatrix->m->__get((int)5))))) && bool((_this->m->__get((int)6) == transformMatrix->m->__get((int)6))))) && bool((_this->m->__get((int)7) == transformMatrix->m->__get((int)7))))) && bool((_this->m->__get((int)8) == transformMatrix->m->__get((int)8))))) && bool((_this->m->__get((int)9) == transformMatrix->m->__get((int)9))))) && bool((_this->m->__get((int)10) == transformMatrix->m->__get((int)10))))) && bool((_this->m->__get((int)11) == transformMatrix->m->__get((int)11))))) && bool((_this->m->__get((int)12) == transformMatrix->m->__get((int)12))))) && bool((_this->m->__get((int)13) == transformMatrix->m->__get((int)13))))) && bool((_this->m->__get((int)14) == transformMatrix->m->__get((int)14))))) && bool((_this->m->__get((int)15) == transformMatrix->m->__get((int)15))));
														}
														return null();
													}
												};
												HX_STACK_LINE(981)
												if (((bool((subMesh->_lastColliderWorldVertices == null())) || bool(!(_Function_11_1::Block(subMesh,transformMatrix)))))){
													HX_STACK_LINE(981)
													subMesh->_lastColliderTransformMatrix = transformMatrix;
													HX_STACK_LINE(981)
													subMesh->_lastColliderWorldVertices = Array_obj< ::Dynamic >::__new();
													HX_STACK_LINE(981)
													int start = subMesh->verticesStart;		HX_STACK_VAR(start,"start");
													HX_STACK_LINE(981)
													int end = (subMesh->verticesStart + subMesh->verticesCount);		HX_STACK_VAR(end,"end");
													HX_STACK_LINE(981)
													{
														HX_STACK_LINE(981)
														int _g3 = start;		HX_STACK_VAR(_g3,"_g3");
														HX_STACK_LINE(981)
														while((true)){
															HX_STACK_LINE(981)
															if ((!(((_g3 < end))))){
																HX_STACK_LINE(981)
																break;
															}
															HX_STACK_LINE(981)
															int i = (_g3)++;		HX_STACK_VAR(i,"i");
															HX_STACK_LINE(981)
															::com::gamestudiohx::babylonhx::tools::math::Vector3 _g4;		HX_STACK_VAR(_g4,"_g4");
															HX_STACK_LINE(981)
															{
																HX_STACK_LINE(981)
																::com::gamestudiohx::babylonhx::tools::math::Vector3 vector = mesh->_positions->__get(i).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Vector3 >();		HX_STACK_VAR(vector,"vector");
																HX_STACK_LINE(981)
																::com::gamestudiohx::babylonhx::tools::math::Vector3 result = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(result,"result");
																HX_STACK_LINE(981)
																{
																	HX_STACK_LINE(981)
																	Float x = ((((vector->x * transformMatrix->m->__get((int)0)) + (vector->y * transformMatrix->m->__get((int)4))) + (vector->z * transformMatrix->m->__get((int)8))) + transformMatrix->m->__get((int)12));		HX_STACK_VAR(x,"x");
																	HX_STACK_LINE(981)
																	Float y = ((((vector->x * transformMatrix->m->__get((int)1)) + (vector->y * transformMatrix->m->__get((int)5))) + (vector->z * transformMatrix->m->__get((int)9))) + transformMatrix->m->__get((int)13));		HX_STACK_VAR(y,"y");
																	HX_STACK_LINE(981)
																	Float z = ((((vector->x * transformMatrix->m->__get((int)2)) + (vector->y * transformMatrix->m->__get((int)6))) + (vector->z * transformMatrix->m->__get((int)10))) + transformMatrix->m->__get((int)14));		HX_STACK_VAR(z,"z");
																	HX_STACK_LINE(981)
																	Float w = ((((vector->x * transformMatrix->m->__get((int)3)) + (vector->y * transformMatrix->m->__get((int)7))) + (vector->z * transformMatrix->m->__get((int)11))) + transformMatrix->m->__get((int)15));		HX_STACK_VAR(w,"w");
																	HX_STACK_LINE(981)
																	result->x = (Float(x) / Float(w));
																	HX_STACK_LINE(981)
																	result->y = (Float(y) / Float(w));
																	HX_STACK_LINE(981)
																	result->z = (Float(z) / Float(w));
																}
																HX_STACK_LINE(981)
																_g4 = result;
															}
															HX_STACK_LINE(981)
															subMesh->_lastColliderWorldVertices->push(_g4);
														}
													}
												}
												HX_STACK_LINE(981)
												{
													HX_STACK_LINE(981)
													Array< ::Dynamic > pts = subMesh->_lastColliderWorldVertices;		HX_STACK_VAR(pts,"pts");
													HX_STACK_LINE(981)
													Array< int > indices = mesh->_indices;		HX_STACK_VAR(indices,"indices");
													HX_STACK_LINE(981)
													int decal = subMesh->verticesStart;		HX_STACK_VAR(decal,"decal");
													HX_STACK_LINE(981)
													int i = subMesh->indexStart;		HX_STACK_VAR(i,"i");
													HX_STACK_LINE(981)
													while((true)){
														HX_STACK_LINE(981)
														if ((!(((i < (subMesh->indexStart + subMesh->indexCount)))))){
															HX_STACK_LINE(981)
															break;
														}
														HX_STACK_LINE(981)
														::com::gamestudiohx::babylonhx::tools::math::Vector3 p1 = pts->__get((indices->__get(i) - decal)).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Vector3 >();		HX_STACK_VAR(p1,"p1");
														HX_STACK_LINE(981)
														::com::gamestudiohx::babylonhx::tools::math::Vector3 p2 = pts->__get((indices->__get((i + (int)1)) - decal)).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Vector3 >();		HX_STACK_VAR(p2,"p2");
														HX_STACK_LINE(981)
														::com::gamestudiohx::babylonhx::tools::math::Vector3 p3 = pts->__get((indices->__get((i + (int)2)) - decal)).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Vector3 >();		HX_STACK_VAR(p3,"p3");
														HX_STACK_LINE(981)
														collider->_testTriangle(i,subMesh,p3,p2,p1);
														HX_STACK_LINE(981)
														hx::AddEq(i,(int)3);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(981)
				if ((!(collider->collisionFound))){
					HX_STACK_LINE(981)
					finalPosition->x = (position1->x + velocity1->x);
					HX_STACK_LINE(981)
					finalPosition->y = (position1->y + velocity1->y);
					HX_STACK_LINE(981)
					finalPosition->z = (position1->z + velocity1->z);
					HX_STACK_LINE(981)
					finalPosition;
				}
				else{
					HX_STACK_LINE(981)
					if (((bool((bool((velocity1->x != (int)0)) || bool((velocity1->y != (int)0)))) || bool((velocity1->z != (int)0))))){
						HX_STACK_LINE(981)
						{
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 result = collider->_destinationPoint;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(981)
							result->x = (position1->x + velocity1->x);
							HX_STACK_LINE(981)
							result->y = (position1->y + velocity1->y);
							HX_STACK_LINE(981)
							result->z = (position1->z + velocity1->z);
							HX_STACK_LINE(981)
							result;
						}
						HX_STACK_LINE(981)
						{
							HX_STACK_LINE(981)
							Float _g1 = ::Math_obj::sqrt((((velocity1->x * velocity1->x) + (velocity1->y * velocity1->y)) + (velocity1->z * velocity1->z)));		HX_STACK_VAR(_g1,"_g1");
							HX_STACK_LINE(981)
							Float scale = (Float(collider->nearestDistance) / Float(_g1));		HX_STACK_VAR(scale,"scale");
							HX_STACK_LINE(981)
							hx::MultEq(velocity1->x,scale);
							HX_STACK_LINE(981)
							hx::MultEq(velocity1->y,scale);
							HX_STACK_LINE(981)
							hx::MultEq(velocity1->z,scale);
						}
						HX_STACK_LINE(981)
						{
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->basePoint;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(981)
							position1->x = (_this->x + velocity1->x);
							HX_STACK_LINE(981)
							position1->y = (_this->y + velocity1->y);
							HX_STACK_LINE(981)
							position1->z = (_this->z + velocity1->z);
							HX_STACK_LINE(981)
							position1;
						}
						HX_STACK_LINE(981)
						{
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->intersectionPoint;		HX_STACK_VAR(otherVector,"otherVector");
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 result = collider->_slidePlaneNormal;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(981)
							result->x = (position1->x - otherVector->x);
							HX_STACK_LINE(981)
							result->y = (position1->y - otherVector->y);
							HX_STACK_LINE(981)
							result->z = (position1->z - otherVector->z);
						}
						HX_STACK_LINE(981)
						{
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->_slidePlaneNormal;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(981)
							Float len = ::Math_obj::sqrt((((_this->x * _this->x) + (_this->y * _this->y)) + (_this->z * _this->z)));		HX_STACK_VAR(len,"len");
							HX_STACK_LINE(981)
							if (((len != (int)0))){
								HX_STACK_LINE(981)
								Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
								HX_STACK_LINE(981)
								hx::MultEq(_this->x,num);
								HX_STACK_LINE(981)
								hx::MultEq(_this->y,num);
								HX_STACK_LINE(981)
								hx::MultEq(_this->z,num);
							}
						}
						HX_STACK_LINE(981)
						{
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->_slidePlaneNormal;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(981)
							Float scale = collider->epsilon;		HX_STACK_VAR(scale,"scale");
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 result = collider->_displacementVector;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(981)
							result->x = (_this->x * scale);
							HX_STACK_LINE(981)
							result->y = (_this->y * scale);
							HX_STACK_LINE(981)
							result->z = (_this->z * scale);
						}
						HX_STACK_LINE(981)
						{
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->_displacementVector;		HX_STACK_VAR(otherVector,"otherVector");
							HX_STACK_LINE(981)
							hx::AddEq(position1->x,otherVector->x);
							HX_STACK_LINE(981)
							hx::AddEq(position1->y,otherVector->y);
							HX_STACK_LINE(981)
							hx::AddEq(position1->z,otherVector->z);
						}
						HX_STACK_LINE(981)
						{
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->intersectionPoint;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->_displacementVector;		HX_STACK_VAR(otherVector,"otherVector");
							HX_STACK_LINE(981)
							hx::AddEq(_this->x,otherVector->x);
							HX_STACK_LINE(981)
							hx::AddEq(_this->y,otherVector->y);
							HX_STACK_LINE(981)
							hx::AddEq(_this->z,otherVector->z);
						}
						HX_STACK_LINE(981)
						{
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->_slidePlaneNormal;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(981)
							Float scale;		HX_STACK_VAR(scale,"scale");
							HX_STACK_LINE(981)
							{
								HX_STACK_LINE(981)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 origin = collider->intersectionPoint;		HX_STACK_VAR(origin,"origin");
								HX_STACK_LINE(981)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 normal = collider->_slidePlaneNormal;		HX_STACK_VAR(normal,"normal");
								HX_STACK_LINE(981)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 point = collider->_destinationPoint;		HX_STACK_VAR(point,"point");
								HX_STACK_LINE(981)
								Float d = -(((((normal->x * origin->x) + (normal->y * origin->y)) + (normal->z * origin->z))));		HX_STACK_VAR(d,"d");
								HX_STACK_LINE(981)
								scale = ((((point->x * normal->x) + (point->y * normal->y)) + (point->z * normal->z)) + d);
							}
							HX_STACK_LINE(981)
							hx::MultEq(_this->x,scale);
							HX_STACK_LINE(981)
							hx::MultEq(_this->y,scale);
							HX_STACK_LINE(981)
							hx::MultEq(_this->z,scale);
						}
						HX_STACK_LINE(981)
						{
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->_destinationPoint;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->_slidePlaneNormal;		HX_STACK_VAR(otherVector,"otherVector");
							HX_STACK_LINE(981)
							hx::SubEq(_this->x,otherVector->x);
							HX_STACK_LINE(981)
							hx::SubEq(_this->y,otherVector->y);
							HX_STACK_LINE(981)
							hx::SubEq(_this->z,otherVector->z);
						}
						HX_STACK_LINE(981)
						{
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->_destinationPoint;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(981)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->intersectionPoint;		HX_STACK_VAR(otherVector,"otherVector");
							HX_STACK_LINE(981)
							velocity1->x = (_this->x - otherVector->x);
							HX_STACK_LINE(981)
							velocity1->y = (_this->y - otherVector->y);
							HX_STACK_LINE(981)
							velocity1->z = (_this->z - otherVector->z);
						}
					}
					HX_STACK_LINE(981)
					Float _g2 = ::Math_obj::sqrt((((velocity1->x * velocity1->x) + (velocity1->y * velocity1->y)) + (velocity1->z * velocity1->z)));		HX_STACK_VAR(_g2,"_g2");
					HX_STACK_LINE(981)
					if (((_g2 <= closeDistance))){
						HX_STACK_LINE(981)
						finalPosition->x = position1->x;
						HX_STACK_LINE(981)
						finalPosition->y = position1->y;
						HX_STACK_LINE(981)
						finalPosition->z = position1->z;
					}
					else{
						HX_STACK_LINE(981)
						(collider->retry)++;
						HX_STACK_LINE(981)
						this->_collideWithWorld(position1,velocity1,collider,maximumRetry,finalPosition);
					}
				}
			}
		}
		HX_STACK_LINE(983)
		{
			HX_STACK_LINE(983)
			::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->radius;		HX_STACK_VAR(otherVector,"otherVector");
			HX_STACK_LINE(983)
			hx::MultEq(finalPosition->x,otherVector->x);
			HX_STACK_LINE(983)
			hx::MultEq(finalPosition->y,otherVector->y);
			HX_STACK_LINE(983)
			hx::MultEq(finalPosition->z,otherVector->z);
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC5(Scene_obj,_getNewPosition,(void))

Void Scene_obj::_collideWithWorld( ::com::gamestudiohx::babylonhx::tools::math::Vector3 position,::com::gamestudiohx::babylonhx::tools::math::Vector3 velocity,::com::gamestudiohx::babylonhx::collisions::Collider collider,int maximumRetry,::com::gamestudiohx::babylonhx::tools::math::Vector3 finalPosition){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","_collideWithWorld",0x974aacb9,"com.gamestudiohx.babylonhx.Scene._collideWithWorld","com/gamestudiohx/babylonhx/Scene.hx",986,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_ARG(position,"position")
		HX_STACK_ARG(velocity,"velocity")
		HX_STACK_ARG(collider,"collider")
		HX_STACK_ARG(maximumRetry,"maximumRetry")
		HX_STACK_ARG(finalPosition,"finalPosition")
		HX_STACK_LINE(987)
		Float closeDistance = (::com::gamestudiohx::babylonhx::Engine_obj::collisionsEpsilon * 10.0);		HX_STACK_VAR(closeDistance,"closeDistance");
		HX_STACK_LINE(989)
		if (((collider->retry >= maximumRetry))){
			HX_STACK_LINE(990)
			finalPosition->x = position->x;
			HX_STACK_LINE(990)
			finalPosition->y = position->y;
			HX_STACK_LINE(990)
			finalPosition->z = position->z;
		}
		else{
			HX_STACK_LINE(994)
			collider->_initialize(position,velocity,closeDistance);
			HX_STACK_LINE(997)
			{
				HX_STACK_LINE(997)
				int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(997)
				int _g = this->meshes->length;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(997)
				while((true)){
					HX_STACK_LINE(997)
					if ((!(((_g1 < _g))))){
						HX_STACK_LINE(997)
						break;
					}
					HX_STACK_LINE(997)
					int index = (_g1)++;		HX_STACK_VAR(index,"index");
					HX_STACK_LINE(998)
					::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = this->meshes->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
					HX_STACK_LINE(999)
					if (((  ((mesh->isEnabled())) ? bool(mesh->checkCollisions) : bool(false) ))){
						HX_STACK_LINE(1000)
						if ((mesh->_boundingInfo->_checkCollision(collider))){
							HX_STACK_LINE(1000)
							{
								HX_STACK_LINE(1000)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_collisionsScalingMatrix;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1000)
								result->m[(int)0] = (Float(1.0) / Float(collider->radius->x));
								HX_STACK_LINE(1000)
								result->m[(int)1] = (int)0;
								HX_STACK_LINE(1000)
								result->m[(int)2] = (int)0;
								HX_STACK_LINE(1000)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(1000)
								result->m[(int)4] = (int)0;
								HX_STACK_LINE(1000)
								result->m[(int)5] = (Float(1.0) / Float(collider->radius->y));
								HX_STACK_LINE(1000)
								result->m[(int)6] = (int)0;
								HX_STACK_LINE(1000)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(1000)
								result->m[(int)8] = (int)0;
								HX_STACK_LINE(1000)
								result->m[(int)9] = (int)0;
								HX_STACK_LINE(1000)
								result->m[(int)10] = (Float(1.0) / Float(collider->radius->z));
								HX_STACK_LINE(1000)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(1000)
								result->m[(int)12] = (int)0;
								HX_STACK_LINE(1000)
								result->m[(int)13] = (int)0;
								HX_STACK_LINE(1000)
								result->m[(int)14] = (int)0;
								HX_STACK_LINE(1000)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(1000)
								result;
							}
							HX_STACK_LINE(1000)
							{
								HX_STACK_LINE(1000)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_worldMatrix;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1000)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_collisionsScalingMatrix;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1000)
								{
									HX_STACK_LINE(1000)
									Array< Float > result = mesh->_collisionsTransformMatrix->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1000)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1000)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1000)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1000)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1000)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1000)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1000)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1000)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1000)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1000)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1000)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1000)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1000)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1000)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1000)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1000)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1000)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1000)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1000)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1000)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1000)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1000)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1000)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1000)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1000)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1000)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1000)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1000)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1000)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1000)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1000)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1000)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1000)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1000)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1000)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1000)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1000)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1000)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1000)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1000)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1000)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1000)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1000)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1000)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1000)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1000)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1000)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1000)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1000)
									result;
								}
							}
							HX_STACK_LINE(1000)
							{
								HX_STACK_LINE(1000)
								::com::gamestudiohx::babylonhx::tools::math::Matrix transformMatrix = mesh->_collisionsTransformMatrix;		HX_STACK_VAR(transformMatrix,"transformMatrix");
								HX_STACK_LINE(1000)
								{
									HX_STACK_LINE(1000)
									int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
									HX_STACK_LINE(1000)
									int _g2 = mesh->subMeshes->length;		HX_STACK_VAR(_g2,"_g2");
									HX_STACK_LINE(1000)
									while((true)){
										HX_STACK_LINE(1000)
										if ((!(((_g11 < _g2))))){
											HX_STACK_LINE(1000)
											break;
										}
										HX_STACK_LINE(1000)
										int index1 = (_g11)++;		HX_STACK_VAR(index1,"index1");
										HX_STACK_LINE(1000)
										::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(index1).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
										HX_STACK_LINE(1000)
										if (((  (((mesh->subMeshes->length > (int)1))) ? bool(!(subMesh->_boundingInfo->_checkCollision(collider))) : bool(false) ))){
											HX_STACK_LINE(1000)
											continue;
										}
										HX_STACK_LINE(1000)
										{
											HX_STACK_LINE(1000)
											mesh->_generatePointsArray();
											struct _Function_10_1{
												inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::SubMesh &subMesh,::com::gamestudiohx::babylonhx::tools::math::Matrix &transformMatrix){
													HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1000,0x7c8236a5)
													{
														HX_STACK_LINE(1000)
														::com::gamestudiohx::babylonhx::tools::math::Matrix _this = subMesh->_lastColliderTransformMatrix;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(1000)
														return (bool((bool((bool((bool((bool((bool((bool((bool((bool((bool((bool((bool((bool((bool((bool((_this->m->__get((int)0) == transformMatrix->m->__get((int)0))) && bool((_this->m->__get((int)1) == transformMatrix->m->__get((int)1))))) && bool((_this->m->__get((int)2) == transformMatrix->m->__get((int)2))))) && bool((_this->m->__get((int)3) == transformMatrix->m->__get((int)3))))) && bool((_this->m->__get((int)4) == transformMatrix->m->__get((int)4))))) && bool((_this->m->__get((int)5) == transformMatrix->m->__get((int)5))))) && bool((_this->m->__get((int)6) == transformMatrix->m->__get((int)6))))) && bool((_this->m->__get((int)7) == transformMatrix->m->__get((int)7))))) && bool((_this->m->__get((int)8) == transformMatrix->m->__get((int)8))))) && bool((_this->m->__get((int)9) == transformMatrix->m->__get((int)9))))) && bool((_this->m->__get((int)10) == transformMatrix->m->__get((int)10))))) && bool((_this->m->__get((int)11) == transformMatrix->m->__get((int)11))))) && bool((_this->m->__get((int)12) == transformMatrix->m->__get((int)12))))) && bool((_this->m->__get((int)13) == transformMatrix->m->__get((int)13))))) && bool((_this->m->__get((int)14) == transformMatrix->m->__get((int)14))))) && bool((_this->m->__get((int)15) == transformMatrix->m->__get((int)15))));
													}
													return null();
												}
											};
											HX_STACK_LINE(1000)
											if (((bool((subMesh->_lastColliderWorldVertices == null())) || bool(!(_Function_10_1::Block(subMesh,transformMatrix)))))){
												HX_STACK_LINE(1000)
												subMesh->_lastColliderTransformMatrix = transformMatrix;
												HX_STACK_LINE(1000)
												subMesh->_lastColliderWorldVertices = Array_obj< ::Dynamic >::__new();
												HX_STACK_LINE(1000)
												int start = subMesh->verticesStart;		HX_STACK_VAR(start,"start");
												HX_STACK_LINE(1000)
												int end = (subMesh->verticesStart + subMesh->verticesCount);		HX_STACK_VAR(end,"end");
												HX_STACK_LINE(1000)
												{
													HX_STACK_LINE(1000)
													int _g3 = start;		HX_STACK_VAR(_g3,"_g3");
													HX_STACK_LINE(1000)
													while((true)){
														HX_STACK_LINE(1000)
														if ((!(((_g3 < end))))){
															HX_STACK_LINE(1000)
															break;
														}
														HX_STACK_LINE(1000)
														int i = (_g3)++;		HX_STACK_VAR(i,"i");
														HX_STACK_LINE(1000)
														::com::gamestudiohx::babylonhx::tools::math::Vector3 _g4;		HX_STACK_VAR(_g4,"_g4");
														HX_STACK_LINE(1000)
														{
															HX_STACK_LINE(1000)
															::com::gamestudiohx::babylonhx::tools::math::Vector3 vector = mesh->_positions->__get(i).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Vector3 >();		HX_STACK_VAR(vector,"vector");
															HX_STACK_LINE(1000)
															::com::gamestudiohx::babylonhx::tools::math::Vector3 result = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(result,"result");
															HX_STACK_LINE(1000)
															{
																HX_STACK_LINE(1000)
																Float x = ((((vector->x * transformMatrix->m->__get((int)0)) + (vector->y * transformMatrix->m->__get((int)4))) + (vector->z * transformMatrix->m->__get((int)8))) + transformMatrix->m->__get((int)12));		HX_STACK_VAR(x,"x");
																HX_STACK_LINE(1000)
																Float y = ((((vector->x * transformMatrix->m->__get((int)1)) + (vector->y * transformMatrix->m->__get((int)5))) + (vector->z * transformMatrix->m->__get((int)9))) + transformMatrix->m->__get((int)13));		HX_STACK_VAR(y,"y");
																HX_STACK_LINE(1000)
																Float z = ((((vector->x * transformMatrix->m->__get((int)2)) + (vector->y * transformMatrix->m->__get((int)6))) + (vector->z * transformMatrix->m->__get((int)10))) + transformMatrix->m->__get((int)14));		HX_STACK_VAR(z,"z");
																HX_STACK_LINE(1000)
																Float w = ((((vector->x * transformMatrix->m->__get((int)3)) + (vector->y * transformMatrix->m->__get((int)7))) + (vector->z * transformMatrix->m->__get((int)11))) + transformMatrix->m->__get((int)15));		HX_STACK_VAR(w,"w");
																HX_STACK_LINE(1000)
																result->x = (Float(x) / Float(w));
																HX_STACK_LINE(1000)
																result->y = (Float(y) / Float(w));
																HX_STACK_LINE(1000)
																result->z = (Float(z) / Float(w));
															}
															HX_STACK_LINE(1000)
															_g4 = result;
														}
														HX_STACK_LINE(1000)
														subMesh->_lastColliderWorldVertices->push(_g4);
													}
												}
											}
											HX_STACK_LINE(1000)
											{
												HX_STACK_LINE(1000)
												Array< ::Dynamic > pts = subMesh->_lastColliderWorldVertices;		HX_STACK_VAR(pts,"pts");
												HX_STACK_LINE(1000)
												Array< int > indices = mesh->_indices;		HX_STACK_VAR(indices,"indices");
												HX_STACK_LINE(1000)
												int decal = subMesh->verticesStart;		HX_STACK_VAR(decal,"decal");
												HX_STACK_LINE(1000)
												int i = subMesh->indexStart;		HX_STACK_VAR(i,"i");
												HX_STACK_LINE(1000)
												while((true)){
													HX_STACK_LINE(1000)
													if ((!(((i < (subMesh->indexStart + subMesh->indexCount)))))){
														HX_STACK_LINE(1000)
														break;
													}
													HX_STACK_LINE(1000)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 p1 = pts->__get((indices->__get(i) - decal)).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Vector3 >();		HX_STACK_VAR(p1,"p1");
													HX_STACK_LINE(1000)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 p2 = pts->__get((indices->__get((i + (int)1)) - decal)).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Vector3 >();		HX_STACK_VAR(p2,"p2");
													HX_STACK_LINE(1000)
													::com::gamestudiohx::babylonhx::tools::math::Vector3 p3 = pts->__get((indices->__get((i + (int)2)) - decal)).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Vector3 >();		HX_STACK_VAR(p3,"p3");
													HX_STACK_LINE(1000)
													collider->_testTriangle(i,subMesh,p3,p2,p1);
													HX_STACK_LINE(1000)
													hx::AddEq(i,(int)3);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			HX_STACK_LINE(1004)
			if ((!(collider->collisionFound))){
				HX_STACK_LINE(1005)
				finalPosition->x = (position->x + velocity->x);
				HX_STACK_LINE(1005)
				finalPosition->y = (position->y + velocity->y);
				HX_STACK_LINE(1005)
				finalPosition->z = (position->z + velocity->z);
				HX_STACK_LINE(1005)
				finalPosition;
			}
			else{
				HX_STACK_LINE(1008)
				if (((bool((bool((velocity->x != (int)0)) || bool((velocity->y != (int)0)))) || bool((velocity->z != (int)0))))){
					HX_STACK_LINE(1009)
					{
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 result = collider->_destinationPoint;		HX_STACK_VAR(result,"result");
						HX_STACK_LINE(1009)
						result->x = (position->x + velocity->x);
						HX_STACK_LINE(1009)
						result->y = (position->y + velocity->y);
						HX_STACK_LINE(1009)
						result->z = (position->z + velocity->z);
						HX_STACK_LINE(1009)
						result;
					}
					HX_STACK_LINE(1009)
					{
						HX_STACK_LINE(1009)
						Float _g1 = ::Math_obj::sqrt((((velocity->x * velocity->x) + (velocity->y * velocity->y)) + (velocity->z * velocity->z)));		HX_STACK_VAR(_g1,"_g1");
						HX_STACK_LINE(1009)
						Float scale = (Float(collider->nearestDistance) / Float(_g1));		HX_STACK_VAR(scale,"scale");
						HX_STACK_LINE(1009)
						hx::MultEq(velocity->x,scale);
						HX_STACK_LINE(1009)
						hx::MultEq(velocity->y,scale);
						HX_STACK_LINE(1009)
						hx::MultEq(velocity->z,scale);
					}
					HX_STACK_LINE(1009)
					{
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->basePoint;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1009)
						position->x = (_this->x + velocity->x);
						HX_STACK_LINE(1009)
						position->y = (_this->y + velocity->y);
						HX_STACK_LINE(1009)
						position->z = (_this->z + velocity->z);
						HX_STACK_LINE(1009)
						position;
					}
					HX_STACK_LINE(1009)
					{
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->intersectionPoint;		HX_STACK_VAR(otherVector,"otherVector");
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 result = collider->_slidePlaneNormal;		HX_STACK_VAR(result,"result");
						HX_STACK_LINE(1009)
						result->x = (position->x - otherVector->x);
						HX_STACK_LINE(1009)
						result->y = (position->y - otherVector->y);
						HX_STACK_LINE(1009)
						result->z = (position->z - otherVector->z);
					}
					HX_STACK_LINE(1009)
					{
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->_slidePlaneNormal;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1009)
						Float len = ::Math_obj::sqrt((((_this->x * _this->x) + (_this->y * _this->y)) + (_this->z * _this->z)));		HX_STACK_VAR(len,"len");
						HX_STACK_LINE(1009)
						if (((len != (int)0))){
							HX_STACK_LINE(1009)
							Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
							HX_STACK_LINE(1009)
							hx::MultEq(_this->x,num);
							HX_STACK_LINE(1009)
							hx::MultEq(_this->y,num);
							HX_STACK_LINE(1009)
							hx::MultEq(_this->z,num);
						}
					}
					HX_STACK_LINE(1009)
					{
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->_slidePlaneNormal;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1009)
						Float scale = collider->epsilon;		HX_STACK_VAR(scale,"scale");
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 result = collider->_displacementVector;		HX_STACK_VAR(result,"result");
						HX_STACK_LINE(1009)
						result->x = (_this->x * scale);
						HX_STACK_LINE(1009)
						result->y = (_this->y * scale);
						HX_STACK_LINE(1009)
						result->z = (_this->z * scale);
					}
					HX_STACK_LINE(1009)
					{
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->_displacementVector;		HX_STACK_VAR(otherVector,"otherVector");
						HX_STACK_LINE(1009)
						hx::AddEq(position->x,otherVector->x);
						HX_STACK_LINE(1009)
						hx::AddEq(position->y,otherVector->y);
						HX_STACK_LINE(1009)
						hx::AddEq(position->z,otherVector->z);
					}
					HX_STACK_LINE(1009)
					{
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->intersectionPoint;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->_displacementVector;		HX_STACK_VAR(otherVector,"otherVector");
						HX_STACK_LINE(1009)
						hx::AddEq(_this->x,otherVector->x);
						HX_STACK_LINE(1009)
						hx::AddEq(_this->y,otherVector->y);
						HX_STACK_LINE(1009)
						hx::AddEq(_this->z,otherVector->z);
					}
					HX_STACK_LINE(1009)
					{
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->_slidePlaneNormal;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1009)
						Float scale;		HX_STACK_VAR(scale,"scale");
						HX_STACK_LINE(1009)
						{
							HX_STACK_LINE(1009)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 origin = collider->intersectionPoint;		HX_STACK_VAR(origin,"origin");
							HX_STACK_LINE(1009)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 normal = collider->_slidePlaneNormal;		HX_STACK_VAR(normal,"normal");
							HX_STACK_LINE(1009)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 point = collider->_destinationPoint;		HX_STACK_VAR(point,"point");
							HX_STACK_LINE(1009)
							Float d = -(((((normal->x * origin->x) + (normal->y * origin->y)) + (normal->z * origin->z))));		HX_STACK_VAR(d,"d");
							HX_STACK_LINE(1009)
							scale = ((((point->x * normal->x) + (point->y * normal->y)) + (point->z * normal->z)) + d);
						}
						HX_STACK_LINE(1009)
						hx::MultEq(_this->x,scale);
						HX_STACK_LINE(1009)
						hx::MultEq(_this->y,scale);
						HX_STACK_LINE(1009)
						hx::MultEq(_this->z,scale);
					}
					HX_STACK_LINE(1009)
					{
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->_destinationPoint;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->_slidePlaneNormal;		HX_STACK_VAR(otherVector,"otherVector");
						HX_STACK_LINE(1009)
						hx::SubEq(_this->x,otherVector->x);
						HX_STACK_LINE(1009)
						hx::SubEq(_this->y,otherVector->y);
						HX_STACK_LINE(1009)
						hx::SubEq(_this->z,otherVector->z);
					}
					HX_STACK_LINE(1009)
					{
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = collider->_destinationPoint;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1009)
						::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = collider->intersectionPoint;		HX_STACK_VAR(otherVector,"otherVector");
						HX_STACK_LINE(1009)
						velocity->x = (_this->x - otherVector->x);
						HX_STACK_LINE(1009)
						velocity->y = (_this->y - otherVector->y);
						HX_STACK_LINE(1009)
						velocity->z = (_this->z - otherVector->z);
					}
				}
				HX_STACK_LINE(1012)
				Float _g2 = ::Math_obj::sqrt((((velocity->x * velocity->x) + (velocity->y * velocity->y)) + (velocity->z * velocity->z)));		HX_STACK_VAR(_g2,"_g2");
				HX_STACK_LINE(1012)
				if (((_g2 <= closeDistance))){
					HX_STACK_LINE(1013)
					finalPosition->x = position->x;
					HX_STACK_LINE(1013)
					finalPosition->y = position->y;
					HX_STACK_LINE(1013)
					finalPosition->z = position->z;
				}
				else{
					HX_STACK_LINE(1016)
					(collider->retry)++;
					HX_STACK_LINE(1017)
					this->_collideWithWorld(position,velocity,collider,maximumRetry,finalPosition);
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC5(Scene_obj,_collideWithWorld,(void))

Void Scene_obj::createOrUpdateSelectionOctree( ){
{
		HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","createOrUpdateSelectionOctree",0x6344e562,"com.gamestudiohx.babylonhx.Scene.createOrUpdateSelectionOctree","com/gamestudiohx/babylonhx/Scene.hx",1023,0x7c8236a5)
		HX_STACK_THIS(this)
		HX_STACK_LINE(1024)
		if (((this->_selectionOctree == null()))){
			HX_STACK_LINE(1025)
			::com::gamestudiohx::babylonhx::culling::octrees::Octree _g = ::com::gamestudiohx::babylonhx::culling::octrees::Octree_obj::__new(null());		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(1025)
			this->_selectionOctree = _g;
		}

		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_Function_1_1)
		Void run(::com::gamestudiohx::babylonhx::tools::math::Vector3 v,::com::gamestudiohx::babylonhx::tools::math::Vector3 min,::com::gamestudiohx::babylonhx::tools::math::Vector3 max){
			HX_STACK_FRAME("*","_Function_1_1",0x5200ed37,"*._Function_1_1","com/gamestudiohx/babylonhx/Scene.hx",1029,0x7c8236a5)
			HX_STACK_ARG(v,"v")
			HX_STACK_ARG(min,"min")
			HX_STACK_ARG(max,"max")
			{
				HX_STACK_LINE(1030)
				if (((v->x < min->x))){
					HX_STACK_LINE(1031)
					min->x = v->x;
				}
				HX_STACK_LINE(1032)
				if (((v->y < min->y))){
					HX_STACK_LINE(1033)
					min->y = v->y;
				}
				HX_STACK_LINE(1034)
				if (((v->z < min->z))){
					HX_STACK_LINE(1035)
					min->z = v->z;
				}
				HX_STACK_LINE(1037)
				if (((v->x > max->x))){
					HX_STACK_LINE(1038)
					max->x = v->x;
				}
				HX_STACK_LINE(1039)
				if (((v->y > max->y))){
					HX_STACK_LINE(1040)
					max->y = v->y;
				}
				HX_STACK_LINE(1041)
				if (((v->z > max->z))){
					HX_STACK_LINE(1042)
					max->z = v->z;
				}
			}
			return null();
		}
		HX_END_LOCAL_FUNC3((void))

		HX_STACK_LINE(1029)
		Dynamic checkExtends =  Dynamic(new _Function_1_1());		HX_STACK_VAR(checkExtends,"checkExtends");
		HX_STACK_LINE(1045)
		::com::gamestudiohx::babylonhx::tools::math::Vector3 min = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(::Math_obj::POSITIVE_INFINITY,::Math_obj::POSITIVE_INFINITY,::Math_obj::POSITIVE_INFINITY);		HX_STACK_VAR(min,"min");
		HX_STACK_LINE(1046)
		::com::gamestudiohx::babylonhx::tools::math::Vector3 max = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(::Math_obj::NEGATIVE_INFINITY,::Math_obj::NEGATIVE_INFINITY,::Math_obj::NEGATIVE_INFINITY);		HX_STACK_VAR(max,"max");
		HX_STACK_LINE(1047)
		{
			HX_STACK_LINE(1047)
			int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(1047)
			int _g = this->meshes->length;		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(1047)
			while((true)){
				HX_STACK_LINE(1047)
				if ((!(((_g1 < _g))))){
					HX_STACK_LINE(1047)
					break;
				}
				HX_STACK_LINE(1047)
				int index = (_g1)++;		HX_STACK_VAR(index,"index");
				HX_STACK_LINE(1048)
				::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = this->meshes->__get(index).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
				HX_STACK_LINE(1050)
				{
					HX_STACK_LINE(1050)
					bool force = false;		HX_STACK_VAR(force,"force");
					HX_STACK_LINE(1050)
					::com::gamestudiohx::babylonhx::tools::math::Matrix ret = mesh->_worldMatrix;		HX_STACK_VAR(ret,"ret");
					struct _Function_4_1{
						inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1050,0x7c8236a5)
							{
								HX_STACK_LINE(1050)
								int _g11 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(1050)
								return (  ((!(((mesh->_currentRenderId == _g11))))) ? bool(mesh->isSynchronized(null())) : bool(true) );
							}
							return null();
						}
					};
					HX_STACK_LINE(1050)
					if (((  ((!(force))) ? bool(_Function_4_1::Block(mesh)) : bool(false) ))){
						HX_STACK_LINE(1050)
						mesh->_childrenFlag = (int)0;
					}
					else{
						HX_STACK_LINE(1050)
						mesh->_childrenFlag = (int)1;
						HX_STACK_LINE(1050)
						mesh->_cache->__Field(HX_CSTRING("position"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->position);
						HX_STACK_LINE(1050)
						mesh->_cache->__Field(HX_CSTRING("scaling"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->scaling);
						HX_STACK_LINE(1050)
						mesh->_cache->__FieldRef(HX_CSTRING("pivotMatrixUpdated")) = false;
						HX_STACK_LINE(1050)
						int _g2 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g2,"_g2");
						HX_STACK_LINE(1050)
						mesh->_currentRenderId = _g2;
						HX_STACK_LINE(1050)
						{
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localScaling;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(1050)
							result->m[(int)0] = mesh->scaling->x;
							HX_STACK_LINE(1050)
							result->m[(int)1] = (int)0;
							HX_STACK_LINE(1050)
							result->m[(int)2] = (int)0;
							HX_STACK_LINE(1050)
							result->m[(int)3] = (int)0;
							HX_STACK_LINE(1050)
							result->m[(int)4] = (int)0;
							HX_STACK_LINE(1050)
							result->m[(int)5] = mesh->scaling->y;
							HX_STACK_LINE(1050)
							result->m[(int)6] = (int)0;
							HX_STACK_LINE(1050)
							result->m[(int)7] = (int)0;
							HX_STACK_LINE(1050)
							result->m[(int)8] = (int)0;
							HX_STACK_LINE(1050)
							result->m[(int)9] = (int)0;
							HX_STACK_LINE(1050)
							result->m[(int)10] = mesh->scaling->z;
							HX_STACK_LINE(1050)
							result->m[(int)11] = (int)0;
							HX_STACK_LINE(1050)
							result->m[(int)12] = (int)0;
							HX_STACK_LINE(1050)
							result->m[(int)13] = (int)0;
							HX_STACK_LINE(1050)
							result->m[(int)14] = (int)0;
							HX_STACK_LINE(1050)
							result->m[(int)15] = 1.0;
							HX_STACK_LINE(1050)
							result;
						}
						HX_STACK_LINE(1050)
						if (((mesh->rotationQuaternion != null()))){
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion _this = mesh->rotationQuaternion;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1050)
								Float xx = (_this->x * _this->x);		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(1050)
								Float yy = (_this->y * _this->y);		HX_STACK_VAR(yy,"yy");
								HX_STACK_LINE(1050)
								Float zz = (_this->z * _this->z);		HX_STACK_VAR(zz,"zz");
								HX_STACK_LINE(1050)
								Float xy = (_this->x * _this->y);		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(1050)
								Float zw = (_this->z * _this->w);		HX_STACK_VAR(zw,"zw");
								HX_STACK_LINE(1050)
								Float zx = (_this->z * _this->x);		HX_STACK_VAR(zx,"zx");
								HX_STACK_LINE(1050)
								Float yw = (_this->y * _this->w);		HX_STACK_VAR(yw,"yw");
								HX_STACK_LINE(1050)
								Float yz = (_this->y * _this->z);		HX_STACK_VAR(yz,"yz");
								HX_STACK_LINE(1050)
								Float xw = (_this->x * _this->w);		HX_STACK_VAR(xw,"xw");
								HX_STACK_LINE(1050)
								result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
								HX_STACK_LINE(1050)
								result->m[(int)1] = (2.0 * ((xy + zw)));
								HX_STACK_LINE(1050)
								result->m[(int)2] = (2.0 * ((zx - yw)));
								HX_STACK_LINE(1050)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)4] = (2.0 * ((xy - zw)));
								HX_STACK_LINE(1050)
								result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
								HX_STACK_LINE(1050)
								result->m[(int)6] = (2.0 * ((yz + xw)));
								HX_STACK_LINE(1050)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)8] = (2.0 * ((zx + yw)));
								HX_STACK_LINE(1050)
								result->m[(int)9] = (2.0 * ((yz - xw)));
								HX_STACK_LINE(1050)
								result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
								HX_STACK_LINE(1050)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)12] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)13] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)14] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(1050)
								result;
							}
							HX_STACK_LINE(1050)
							mesh->_cache->__Field(HX_CSTRING("rotationQuaternion"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotationQuaternion);
						}
						else{
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion tempQuaternion = ::com::gamestudiohx::babylonhx::tools::math::Quaternion_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tempQuaternion,"tempQuaternion");
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion _g3;		HX_STACK_VAR(_g3,"_g3");
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									Float halfRoll = (mesh->rotation->z * 0.5);		HX_STACK_VAR(halfRoll,"halfRoll");
									HX_STACK_LINE(1050)
									Float halfPitch = (mesh->rotation->x * 0.5);		HX_STACK_VAR(halfPitch,"halfPitch");
									HX_STACK_LINE(1050)
									Float halfYaw = (mesh->rotation->y * 0.5);		HX_STACK_VAR(halfYaw,"halfYaw");
									HX_STACK_LINE(1050)
									Float sinRoll = ::Math_obj::sin(halfRoll);		HX_STACK_VAR(sinRoll,"sinRoll");
									HX_STACK_LINE(1050)
									Float cosRoll = ::Math_obj::cos(halfRoll);		HX_STACK_VAR(cosRoll,"cosRoll");
									HX_STACK_LINE(1050)
									Float sinPitch = ::Math_obj::sin(halfPitch);		HX_STACK_VAR(sinPitch,"sinPitch");
									HX_STACK_LINE(1050)
									Float cosPitch = ::Math_obj::cos(halfPitch);		HX_STACK_VAR(cosPitch,"cosPitch");
									HX_STACK_LINE(1050)
									Float sinYaw = ::Math_obj::sin(halfYaw);		HX_STACK_VAR(sinYaw,"sinYaw");
									HX_STACK_LINE(1050)
									Float cosYaw = ::Math_obj::cos(halfYaw);		HX_STACK_VAR(cosYaw,"cosYaw");
									HX_STACK_LINE(1050)
									tempQuaternion->x = (((cosYaw * sinPitch) * cosRoll) + ((sinYaw * cosPitch) * sinRoll));
									HX_STACK_LINE(1050)
									tempQuaternion->y = (((sinYaw * cosPitch) * cosRoll) - ((cosYaw * sinPitch) * sinRoll));
									HX_STACK_LINE(1050)
									tempQuaternion->z = (((cosYaw * cosPitch) * sinRoll) - ((sinYaw * sinPitch) * cosRoll));
									HX_STACK_LINE(1050)
									tempQuaternion->w = (((cosYaw * cosPitch) * cosRoll) + ((sinYaw * sinPitch) * sinRoll));
									HX_STACK_LINE(1050)
									_g3 = tempQuaternion;
								}
								HX_STACK_LINE(1050)
								tempQuaternion = _g3;
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									Float xx = (tempQuaternion->x * tempQuaternion->x);		HX_STACK_VAR(xx,"xx");
									HX_STACK_LINE(1050)
									Float yy = (tempQuaternion->y * tempQuaternion->y);		HX_STACK_VAR(yy,"yy");
									HX_STACK_LINE(1050)
									Float zz = (tempQuaternion->z * tempQuaternion->z);		HX_STACK_VAR(zz,"zz");
									HX_STACK_LINE(1050)
									Float xy = (tempQuaternion->x * tempQuaternion->y);		HX_STACK_VAR(xy,"xy");
									HX_STACK_LINE(1050)
									Float zw = (tempQuaternion->z * tempQuaternion->w);		HX_STACK_VAR(zw,"zw");
									HX_STACK_LINE(1050)
									Float zx = (tempQuaternion->z * tempQuaternion->x);		HX_STACK_VAR(zx,"zx");
									HX_STACK_LINE(1050)
									Float yw = (tempQuaternion->y * tempQuaternion->w);		HX_STACK_VAR(yw,"yw");
									HX_STACK_LINE(1050)
									Float yz = (tempQuaternion->y * tempQuaternion->z);		HX_STACK_VAR(yz,"yz");
									HX_STACK_LINE(1050)
									Float xw = (tempQuaternion->x * tempQuaternion->w);		HX_STACK_VAR(xw,"xw");
									HX_STACK_LINE(1050)
									result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
									HX_STACK_LINE(1050)
									result->m[(int)1] = (2.0 * ((xy + zw)));
									HX_STACK_LINE(1050)
									result->m[(int)2] = (2.0 * ((zx - yw)));
									HX_STACK_LINE(1050)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)4] = (2.0 * ((xy - zw)));
									HX_STACK_LINE(1050)
									result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
									HX_STACK_LINE(1050)
									result->m[(int)6] = (2.0 * ((yz + xw)));
									HX_STACK_LINE(1050)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)8] = (2.0 * ((zx + yw)));
									HX_STACK_LINE(1050)
									result->m[(int)9] = (2.0 * ((yz - xw)));
									HX_STACK_LINE(1050)
									result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
									HX_STACK_LINE(1050)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)12] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)13] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)14] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(1050)
									result;
								}
							}
							HX_STACK_LINE(1050)
							mesh->_cache->__Field(HX_CSTRING("rotation"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotation);
						}
						HX_STACK_LINE(1050)
						if ((mesh->infiniteDistance)){
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::cameras::Camera camera = mesh->_scene->activeCamera;		HX_STACK_VAR(camera,"camera");
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									result->m[(int)0] = 1.0;
									HX_STACK_LINE(1050)
									result->m[(int)1] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)2] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)4] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)5] = 1.0;
									HX_STACK_LINE(1050)
									result->m[(int)6] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)8] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)9] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)10] = 1.0;
									HX_STACK_LINE(1050)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)12] = (mesh->position->x + camera->position->x);
									HX_STACK_LINE(1050)
									result->m[(int)13] = (mesh->position->y + camera->position->y);
									HX_STACK_LINE(1050)
									result->m[(int)14] = (mesh->position->z + camera->position->z);
									HX_STACK_LINE(1050)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(1050)
									result;
								}
							}
						}
						else{
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								result->m[(int)0] = 1.0;
								HX_STACK_LINE(1050)
								result->m[(int)1] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)2] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)4] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)5] = 1.0;
								HX_STACK_LINE(1050)
								result->m[(int)6] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)8] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)9] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)10] = 1.0;
								HX_STACK_LINE(1050)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(1050)
								result->m[(int)12] = mesh->position->x;
								HX_STACK_LINE(1050)
								result->m[(int)13] = mesh->position->y;
								HX_STACK_LINE(1050)
								result->m[(int)14] = mesh->position->z;
								HX_STACK_LINE(1050)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(1050)
								result;
							}
						}
						HX_STACK_LINE(1050)
						{
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_pivotMatrix;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localScaling;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								Array< Float > result = mesh->_localPivotScaling->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1050)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1050)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1050)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1050)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1050)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1050)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1050)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1050)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1050)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1050)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1050)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1050)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1050)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1050)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1050)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1050)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1050)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1050)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1050)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1050)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1050)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1050)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1050)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1050)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1050)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1050)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1050)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1050)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1050)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1050)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1050)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1050)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1050)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1050)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1050)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1050)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1050)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1050)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1050)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1050)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1050)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1050)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1050)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1050)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1050)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1050)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1050)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1050)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1050)
								result;
							}
						}
						HX_STACK_LINE(1050)
						{
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScaling;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localRotation;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1050)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1050)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1050)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1050)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1050)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1050)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1050)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1050)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1050)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1050)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1050)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1050)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1050)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1050)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1050)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1050)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1050)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1050)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1050)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1050)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1050)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1050)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1050)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1050)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1050)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1050)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1050)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1050)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1050)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1050)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1050)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1050)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1050)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1050)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1050)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1050)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1050)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1050)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1050)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1050)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1050)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1050)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1050)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1050)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1050)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1050)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1050)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1050)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1050)
								result;
							}
						}
						HX_STACK_LINE(1050)
						if (((mesh->billboardMode != ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE))){
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 localPosition;		HX_STACK_VAR(localPosition,"localPosition");
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->position;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1050)
								localPosition = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
							}
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 zero;		HX_STACK_VAR(zero,"zero");
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_scene->activeCamera->position;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1050)
								zero = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
							}
							HX_STACK_LINE(1050)
							if (((bool((mesh->parent != null())) && bool((mesh->parent->position != null()))))){
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = mesh->parent->position;		HX_STACK_VAR(otherVector,"otherVector");
									HX_STACK_LINE(1050)
									hx::AddEq(localPosition->x,otherVector->x);
									HX_STACK_LINE(1050)
									hx::AddEq(localPosition->y,otherVector->y);
									HX_STACK_LINE(1050)
									hx::AddEq(localPosition->z,otherVector->z);
								}
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1050)
									{
										HX_STACK_LINE(1050)
										result->m[(int)0] = 1.0;
										HX_STACK_LINE(1050)
										result->m[(int)1] = (int)0;
										HX_STACK_LINE(1050)
										result->m[(int)2] = (int)0;
										HX_STACK_LINE(1050)
										result->m[(int)3] = (int)0;
										HX_STACK_LINE(1050)
										result->m[(int)4] = (int)0;
										HX_STACK_LINE(1050)
										result->m[(int)5] = 1.0;
										HX_STACK_LINE(1050)
										result->m[(int)6] = (int)0;
										HX_STACK_LINE(1050)
										result->m[(int)7] = (int)0;
										HX_STACK_LINE(1050)
										result->m[(int)8] = (int)0;
										HX_STACK_LINE(1050)
										result->m[(int)9] = (int)0;
										HX_STACK_LINE(1050)
										result->m[(int)10] = 1.0;
										HX_STACK_LINE(1050)
										result->m[(int)11] = (int)0;
										HX_STACK_LINE(1050)
										result->m[(int)12] = localPosition->x;
										HX_STACK_LINE(1050)
										result->m[(int)13] = localPosition->y;
										HX_STACK_LINE(1050)
										result->m[(int)14] = localPosition->z;
										HX_STACK_LINE(1050)
										result->m[(int)15] = 1.0;
										HX_STACK_LINE(1050)
										result;
									}
								}
							}
							HX_STACK_LINE(1050)
							if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))) == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))){
								HX_STACK_LINE(1050)
								zero = mesh->_scene->activeCamera->position;
							}
							else{
								HX_STACK_LINE(1050)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_X))) != (int)0))){
									HX_STACK_LINE(1050)
									zero->x = (localPosition->x + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
								HX_STACK_LINE(1050)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Y))) != (int)0))){
									HX_STACK_LINE(1050)
									zero->y = (localPosition->y + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
								HX_STACK_LINE(1050)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Z))) != (int)0))){
									HX_STACK_LINE(1050)
									zero->z = (localPosition->z + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
							}
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 up = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Up();		HX_STACK_VAR(up,"up");
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localBillboard;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 xAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(xAxis,"xAxis");
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 yAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(yAxis,"yAxis");
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 zAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(zAxis,"zAxis");
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									zAxis->x = (zero->x - localPosition->x);
									HX_STACK_LINE(1050)
									zAxis->y = (zero->y - localPosition->y);
									HX_STACK_LINE(1050)
									zAxis->z = (zero->z - localPosition->z);
								}
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									Float len = ::Math_obj::sqrt((((zAxis->x * zAxis->x) + (zAxis->y * zAxis->y)) + (zAxis->z * zAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(1050)
									if (((len != (int)0))){
										HX_STACK_LINE(1050)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(1050)
										hx::MultEq(zAxis->x,num);
										HX_STACK_LINE(1050)
										hx::MultEq(zAxis->y,num);
										HX_STACK_LINE(1050)
										hx::MultEq(zAxis->z,num);
									}
								}
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									xAxis->x = ((up->y * zAxis->z) - (up->z * zAxis->y));
									HX_STACK_LINE(1050)
									xAxis->y = ((up->z * zAxis->x) - (up->x * zAxis->z));
									HX_STACK_LINE(1050)
									xAxis->z = ((up->x * zAxis->y) - (up->y * zAxis->x));
								}
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									Float len = ::Math_obj::sqrt((((xAxis->x * xAxis->x) + (xAxis->y * xAxis->y)) + (xAxis->z * xAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(1050)
									if (((len != (int)0))){
										HX_STACK_LINE(1050)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(1050)
										hx::MultEq(xAxis->x,num);
										HX_STACK_LINE(1050)
										hx::MultEq(xAxis->y,num);
										HX_STACK_LINE(1050)
										hx::MultEq(xAxis->z,num);
									}
								}
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									yAxis->x = ((zAxis->y * xAxis->z) - (zAxis->z * xAxis->y));
									HX_STACK_LINE(1050)
									yAxis->y = ((zAxis->z * xAxis->x) - (zAxis->x * xAxis->z));
									HX_STACK_LINE(1050)
									yAxis->z = ((zAxis->x * xAxis->y) - (zAxis->y * xAxis->x));
								}
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									Float len = ::Math_obj::sqrt((((yAxis->x * yAxis->x) + (yAxis->y * yAxis->y)) + (yAxis->z * yAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(1050)
									if (((len != (int)0))){
										HX_STACK_LINE(1050)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(1050)
										hx::MultEq(yAxis->x,num);
										HX_STACK_LINE(1050)
										hx::MultEq(yAxis->y,num);
										HX_STACK_LINE(1050)
										hx::MultEq(yAxis->z,num);
									}
								}
								HX_STACK_LINE(1050)
								Float ex = -(((((xAxis->x * localPosition->x) + (xAxis->y * localPosition->y)) + (xAxis->z * localPosition->z))));		HX_STACK_VAR(ex,"ex");
								HX_STACK_LINE(1050)
								Float ey = -(((((yAxis->x * localPosition->x) + (yAxis->y * localPosition->y)) + (yAxis->z * localPosition->z))));		HX_STACK_VAR(ey,"ey");
								HX_STACK_LINE(1050)
								Float ez = -(((((zAxis->x * localPosition->x) + (zAxis->y * localPosition->y)) + (zAxis->z * localPosition->z))));		HX_STACK_VAR(ez,"ez");
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									result->m[(int)0] = xAxis->x;
									HX_STACK_LINE(1050)
									result->m[(int)1] = yAxis->x;
									HX_STACK_LINE(1050)
									result->m[(int)2] = zAxis->x;
									HX_STACK_LINE(1050)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)4] = xAxis->y;
									HX_STACK_LINE(1050)
									result->m[(int)5] = yAxis->y;
									HX_STACK_LINE(1050)
									result->m[(int)6] = zAxis->y;
									HX_STACK_LINE(1050)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)8] = xAxis->z;
									HX_STACK_LINE(1050)
									result->m[(int)9] = yAxis->z;
									HX_STACK_LINE(1050)
									result->m[(int)10] = zAxis->z;
									HX_STACK_LINE(1050)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(1050)
									result->m[(int)12] = ex;
									HX_STACK_LINE(1050)
									result->m[(int)13] = ey;
									HX_STACK_LINE(1050)
									result->m[(int)14] = ez;
									HX_STACK_LINE(1050)
									result->m[(int)15] = (int)1;
									HX_STACK_LINE(1050)
									result;
								}
							}
							HX_STACK_LINE(1050)
							mesh->_localBillboard->m[(int)12] = mesh->_localBillboard->m[(int)13] = mesh->_localBillboard->m[(int)14] = (int)0;
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localBillboard;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
									HX_STACK_LINE(1050)
									Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
									HX_STACK_LINE(1050)
									Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
									HX_STACK_LINE(1050)
									Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
									HX_STACK_LINE(1050)
									Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
									HX_STACK_LINE(1050)
									Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
									HX_STACK_LINE(1050)
									Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
									HX_STACK_LINE(1050)
									Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
									HX_STACK_LINE(1050)
									Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
									HX_STACK_LINE(1050)
									Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
									HX_STACK_LINE(1050)
									Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
									HX_STACK_LINE(1050)
									Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
									HX_STACK_LINE(1050)
									Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
									HX_STACK_LINE(1050)
									Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
									HX_STACK_LINE(1050)
									Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
									HX_STACK_LINE(1050)
									Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
									HX_STACK_LINE(1050)
									Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
									HX_STACK_LINE(1050)
									Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
									HX_STACK_LINE(1050)
									Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
									HX_STACK_LINE(1050)
									Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
									HX_STACK_LINE(1050)
									Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
									HX_STACK_LINE(1050)
									Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
									HX_STACK_LINE(1050)
									Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
									HX_STACK_LINE(1050)
									Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
									HX_STACK_LINE(1050)
									Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
									HX_STACK_LINE(1050)
									Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
									HX_STACK_LINE(1050)
									Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
									HX_STACK_LINE(1050)
									Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
									HX_STACK_LINE(1050)
									Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
									HX_STACK_LINE(1050)
									Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
									HX_STACK_LINE(1050)
									Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
									HX_STACK_LINE(1050)
									Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
									HX_STACK_LINE(1050)
									Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
									HX_STACK_LINE(1050)
									Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
									HX_STACK_LINE(1050)
									Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
									HX_STACK_LINE(1050)
									Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
									HX_STACK_LINE(1050)
									Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
									HX_STACK_LINE(1050)
									Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
									HX_STACK_LINE(1050)
									Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
									HX_STACK_LINE(1050)
									_this->m[(int)0] = (l23 * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)4] = (l24 * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)8] = (l25 * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)12] = (l26 * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
									HX_STACK_LINE(1050)
									_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
								}
							}
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localBillboard;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1050)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1050)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1050)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1050)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1050)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1050)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1050)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1050)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1050)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1050)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1050)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1050)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1050)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1050)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1050)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1050)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1050)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1050)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1050)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1050)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1050)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1050)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1050)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1050)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1050)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1050)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1050)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1050)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1050)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1050)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1050)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1050)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1050)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1050)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1050)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1050)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1050)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1050)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1050)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1050)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1050)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1050)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1050)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1050)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1050)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1050)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1050)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1050)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1050)
									result;
								}
							}
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_rotateYByPI;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localWorld;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1050)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1050)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1050)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1050)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1050)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1050)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1050)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1050)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1050)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1050)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1050)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1050)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1050)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1050)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1050)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1050)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1050)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1050)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1050)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1050)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1050)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1050)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1050)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1050)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1050)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1050)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1050)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1050)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1050)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1050)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1050)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1050)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1050)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1050)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1050)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1050)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1050)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1050)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1050)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1050)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1050)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1050)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1050)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1050)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1050)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1050)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1050)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1050)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1050)
									result;
								}
							}
						}
						struct _Function_5_1{
							inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
								HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1050,0x7c8236a5)
								{
									HX_STACK_LINE(1050)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _g4 = mesh->parent->getWorldMatrix();		HX_STACK_VAR(_g4,"_g4");
									HX_STACK_LINE(1050)
									return (_g4 != null());
								}
								return null();
							}
						};
						HX_STACK_LINE(1050)
						if (((  (((  (((mesh->parent != null()))) ? bool(_Function_5_1::Block(mesh)) : bool(false) ))) ? bool((mesh->billboardMode == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE)) : bool(false) ))){
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1050)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1050)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1050)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1050)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1050)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1050)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1050)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1050)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1050)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1050)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1050)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1050)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1050)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1050)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1050)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1050)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1050)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1050)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1050)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1050)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1050)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1050)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1050)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1050)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1050)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1050)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1050)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1050)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1050)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1050)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1050)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1050)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1050)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1050)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1050)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1050)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1050)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1050)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1050)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1050)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1050)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1050)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1050)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1050)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1050)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1050)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1050)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1050)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1050)
									result;
								}
							}
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::tools::math::Matrix parentWorld = mesh->parent->getWorldMatrix();		HX_STACK_VAR(parentWorld,"parentWorld");
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localWorld;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1050)
								{
									HX_STACK_LINE(1050)
									Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1050)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1050)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1050)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1050)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1050)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1050)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1050)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1050)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1050)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1050)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1050)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1050)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1050)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1050)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1050)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1050)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1050)
									Float om0 = parentWorld->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1050)
									Float om1 = parentWorld->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1050)
									Float om2 = parentWorld->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1050)
									Float om3 = parentWorld->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1050)
									Float om4 = parentWorld->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1050)
									Float om5 = parentWorld->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1050)
									Float om6 = parentWorld->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1050)
									Float om7 = parentWorld->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1050)
									Float om8 = parentWorld->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1050)
									Float om9 = parentWorld->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1050)
									Float om10 = parentWorld->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1050)
									Float om11 = parentWorld->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1050)
									Float om12 = parentWorld->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1050)
									Float om13 = parentWorld->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1050)
									Float om14 = parentWorld->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1050)
									Float om15 = parentWorld->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1050)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1050)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1050)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1050)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1050)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1050)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1050)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1050)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1050)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1050)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1050)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1050)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1050)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1050)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1050)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1050)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1050)
									result;
								}
							}
						}
						else{
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1050)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1050)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1050)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1050)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1050)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1050)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1050)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1050)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1050)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1050)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1050)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1050)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1050)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1050)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1050)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1050)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1050)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1050)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1050)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1050)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1050)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1050)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1050)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1050)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1050)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1050)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1050)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1050)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1050)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1050)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1050)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1050)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1050)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1050)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1050)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1050)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1050)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1050)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1050)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1050)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1050)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1050)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1050)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1050)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1050)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1050)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1050)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1050)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1050)
								result;
							}
						}
						HX_STACK_LINE(1050)
						if (((mesh->_boundingInfo != null()))){
							HX_STACK_LINE(1050)
							Float _g5 = ::Math_obj::max(mesh->scaling->x,mesh->scaling->y);		HX_STACK_VAR(_g5,"_g5");
							HX_STACK_LINE(1050)
							mesh->_scaleFactor = _g5;
							HX_STACK_LINE(1050)
							Float _g6 = ::Math_obj::max(mesh->_scaleFactor,mesh->scaling->z);		HX_STACK_VAR(_g6,"_g6");
							HX_STACK_LINE(1050)
							mesh->_scaleFactor = _g6;
							struct _Function_6_1{
								inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
									HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1050,0x7c8236a5)
									{
										HX_STACK_LINE(1050)
										Dynamic _g7 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g7,"_g7");
										HX_STACK_LINE(1050)
										return (_g7 != null());
									}
									return null();
								}
							};
							HX_STACK_LINE(1050)
							if (((  (((mesh->parent != null()))) ? bool(_Function_6_1::Block(mesh)) : bool(false) ))){
								HX_STACK_LINE(1050)
								Dynamic _g8 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g8,"_g8");
								HX_STACK_LINE(1050)
								Float _g9 = (mesh->_scaleFactor * _g8);		HX_STACK_VAR(_g9,"_g9");
								HX_STACK_LINE(1050)
								mesh->_scaleFactor = _g9;
							}
							HX_STACK_LINE(1050)
							mesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
							HX_STACK_LINE(1050)
							{
								HX_STACK_LINE(1050)
								int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(1050)
								int _g3 = mesh->subMeshes->length;		HX_STACK_VAR(_g3,"_g3");
								HX_STACK_LINE(1050)
								while((true)){
									HX_STACK_LINE(1050)
									if ((!(((_g11 < _g3))))){
										HX_STACK_LINE(1050)
										break;
									}
									HX_STACK_LINE(1050)
									int subIndex = (_g11)++;		HX_STACK_VAR(subIndex,"subIndex");
									HX_STACK_LINE(1050)
									::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
									HX_STACK_LINE(1050)
									subMesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
								}
							}
						}
						HX_STACK_LINE(1050)
						{
							HX_STACK_LINE(1050)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_absolutePosition;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1050)
							_this->x = mesh->_worldMatrix->m->__get((int)12);
							HX_STACK_LINE(1050)
							_this->y = mesh->_worldMatrix->m->__get((int)13);
							HX_STACK_LINE(1050)
							_this->z = mesh->_worldMatrix->m->__get((int)14);
						}
						HX_STACK_LINE(1050)
						ret = mesh->_worldMatrix;
					}
					HX_STACK_LINE(1050)
					ret;
				}
				HX_STACK_LINE(1051)
				::com::gamestudiohx::babylonhx::tools::math::Vector3 minBox = mesh->getBoundingInfo()->boundingBox->minimumWorld;		HX_STACK_VAR(minBox,"minBox");
				HX_STACK_LINE(1052)
				::com::gamestudiohx::babylonhx::tools::math::Vector3 maxBox = mesh->getBoundingInfo()->boundingBox->maximumWorld;		HX_STACK_VAR(maxBox,"maxBox");
				HX_STACK_LINE(1054)
				checkExtends(minBox,min,max).Cast< Void >();
				HX_STACK_LINE(1055)
				checkExtends(maxBox,min,max).Cast< Void >();
			}
		}
		HX_STACK_LINE(1059)
		this->_selectionOctree->update(min,max,this->meshes);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,createOrUpdateSelectionOctree,(void))

::com::gamestudiohx::babylonhx::tools::math::Ray Scene_obj::createPickingRay( Float x,Float y,::com::gamestudiohx::babylonhx::tools::math::Matrix world,::com::gamestudiohx::babylonhx::cameras::Camera camera){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","createPickingRay",0x57967a19,"com.gamestudiohx.babylonhx.Scene.createPickingRay","com/gamestudiohx/babylonhx/Scene.hx",1062,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_ARG(y,"y")
	HX_STACK_ARG(world,"world")
	HX_STACK_ARG(camera,"camera")
	HX_STACK_LINE(1063)
	::com::gamestudiohx::babylonhx::Engine engine = this->_engine;		HX_STACK_VAR(engine,"engine");
	HX_STACK_LINE(1065)
	if (((camera == null()))){
		HX_STACK_LINE(1066)
		if (((this->activeCamera == null()))){
			HX_STACK_LINE(1067)
			HX_STACK_DO_THROW(HX_CSTRING("Active camera not set"));
		}
		HX_STACK_LINE(1070)
		camera = this->activeCamera;
	}
	HX_STACK_LINE(1072)
	::com::gamestudiohx::babylonhx::tools::math::Viewport viewport;		HX_STACK_VAR(viewport,"viewport");
	HX_STACK_LINE(1072)
	{
		HX_STACK_LINE(1072)
		::com::gamestudiohx::babylonhx::tools::math::Viewport _this = this->activeCamera->viewport;		HX_STACK_VAR(_this,"_this");
		HX_STACK_LINE(1072)
		int _g = engine->getRenderWidth();		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(1072)
		int _g1 = engine->getHardwareScalingLevel();		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(1072)
		int width = (_g * _g1);		HX_STACK_VAR(width,"width");
		HX_STACK_LINE(1072)
		int _g2 = engine->getRenderHeight();		HX_STACK_VAR(_g2,"_g2");
		HX_STACK_LINE(1072)
		int _g3 = engine->getHardwareScalingLevel();		HX_STACK_VAR(_g3,"_g3");
		HX_STACK_LINE(1072)
		int height = (_g2 * _g3);		HX_STACK_VAR(height,"height");
		HX_STACK_LINE(1072)
		viewport = ::com::gamestudiohx::babylonhx::tools::math::Viewport_obj::__new((_this->x * width),(_this->y * height),(_this->width * width),(_this->height * height));
	}
	HX_STACK_LINE(1075)
	::com::gamestudiohx::babylonhx::tools::math::Viewport viewport1;		HX_STACK_VAR(viewport1,"viewport1");
	HX_STACK_LINE(1075)
	{
		HX_STACK_LINE(1075)
		::com::gamestudiohx::babylonhx::tools::math::Viewport _this = camera->viewport;		HX_STACK_VAR(_this,"_this");
		HX_STACK_LINE(1075)
		int _g4 = engine->getRenderWidth();		HX_STACK_VAR(_g4,"_g4");
		HX_STACK_LINE(1075)
		int _g5 = engine->getHardwareScalingLevel();		HX_STACK_VAR(_g5,"_g5");
		HX_STACK_LINE(1075)
		int width = (_g4 * _g5);		HX_STACK_VAR(width,"width");
		HX_STACK_LINE(1075)
		int _g6 = engine->getRenderHeight();		HX_STACK_VAR(_g6,"_g6");
		HX_STACK_LINE(1075)
		int _g7 = engine->getHardwareScalingLevel();		HX_STACK_VAR(_g7,"_g7");
		HX_STACK_LINE(1075)
		int height = (_g6 * _g7);		HX_STACK_VAR(height,"height");
		HX_STACK_LINE(1075)
		viewport1 = ::com::gamestudiohx::babylonhx::tools::math::Viewport_obj::__new((_this->x * width),(_this->y * height),(_this->width * width),(_this->height * height));
	}
	HX_STACK_LINE(1076)
	::com::gamestudiohx::babylonhx::tools::math::Matrix _g8;		HX_STACK_VAR(_g8,"_g8");
	HX_STACK_LINE(1076)
	if (((world != null()))){
		HX_STACK_LINE(1076)
		_g8 = world;
	}
	else{
		HX_STACK_LINE(1076)
		::com::gamestudiohx::babylonhx::tools::math::Matrix result = ::com::gamestudiohx::babylonhx::tools::math::Matrix_obj::__new();		HX_STACK_VAR(result,"result");
		HX_STACK_LINE(1076)
		result->m[(int)0] = 1.0;
		HX_STACK_LINE(1076)
		result->m[(int)1] = (int)0;
		HX_STACK_LINE(1076)
		result->m[(int)2] = (int)0;
		HX_STACK_LINE(1076)
		result->m[(int)3] = (int)0;
		HX_STACK_LINE(1076)
		result->m[(int)4] = (int)0;
		HX_STACK_LINE(1076)
		result->m[(int)5] = 1.0;
		HX_STACK_LINE(1076)
		result->m[(int)6] = (int)0;
		HX_STACK_LINE(1076)
		result->m[(int)7] = (int)0;
		HX_STACK_LINE(1076)
		result->m[(int)8] = (int)0;
		HX_STACK_LINE(1076)
		result->m[(int)9] = (int)0;
		HX_STACK_LINE(1076)
		result->m[(int)10] = 1.0;
		HX_STACK_LINE(1076)
		result->m[(int)11] = (int)0;
		HX_STACK_LINE(1076)
		result->m[(int)12] = (int)0;
		HX_STACK_LINE(1076)
		result->m[(int)13] = (int)0;
		HX_STACK_LINE(1076)
		result->m[(int)14] = (int)0;
		HX_STACK_LINE(1076)
		result->m[(int)15] = 1.0;
		HX_STACK_LINE(1076)
		_g8 = result;
	}
	HX_STACK_LINE(1076)
	::com::gamestudiohx::babylonhx::tools::math::Matrix _g13;		HX_STACK_VAR(_g13,"_g13");
	HX_STACK_LINE(1076)
	{
		HX_STACK_LINE(1076)
		::com::gamestudiohx::babylonhx::tools::math::Matrix _g10;		HX_STACK_VAR(_g10,"_g10");
		HX_STACK_LINE(1076)
		{
			HX_STACK_LINE(1076)
			bool force = false;		HX_STACK_VAR(force,"force");
			HX_STACK_LINE(1076)
			if ((!(((  ((!(force))) ? bool(camera->_isSynchronizedViewMatrix()) : bool(false) ))))){
				HX_STACK_LINE(1076)
				camera->_syncChildFlag();
				HX_STACK_LINE(1076)
				::com::gamestudiohx::babylonhx::tools::math::Matrix _g9 = camera->_getViewMatrix();		HX_STACK_VAR(_g9,"_g9");
				HX_STACK_LINE(1076)
				camera->_computedViewMatrix = _g9;
			}
			HX_STACK_LINE(1076)
			_g10 = camera->_computedViewMatrix;
		}
		HX_STACK_LINE(1076)
		camera->_computedViewMatrix = _g10;
		struct _Function_2_1{
			inline static bool Block( ::com::gamestudiohx::babylonhx::cameras::Camera &camera){
				HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1076,0x7c8236a5)
				{
					HX_STACK_LINE(1076)
					::com::gamestudiohx::babylonhx::tools::math::Matrix _g11 = camera->parent->getWorldMatrix();		HX_STACK_VAR(_g11,"_g11");
					HX_STACK_LINE(1076)
					return (_g11 == null());
				}
				return null();
			}
		};
		struct _Function_2_2{
			inline static bool Block( ::com::gamestudiohx::babylonhx::cameras::Camera &camera){
				HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1076,0x7c8236a5)
				{
					HX_STACK_LINE(1076)
					return (  ((!(camera->hasNewParent(null())))) ? bool(camera->parent->isSynchronized(null())) : bool(false) );
				}
				return null();
			}
		};
		HX_STACK_LINE(1076)
		if ((!(((  ((!(((  ((!(((camera->parent == null()))))) ? bool(_Function_2_1::Block(camera)) : bool(true) ))))) ? bool(_Function_2_2::Block(camera)) : bool(true) ))))){
			HX_STACK_LINE(1076)
			if (((camera->_worldMatrix == null()))){
				HX_STACK_LINE(1076)
				::com::gamestudiohx::babylonhx::tools::math::Matrix _g12;		HX_STACK_VAR(_g12,"_g12");
				HX_STACK_LINE(1076)
				{
					HX_STACK_LINE(1076)
					::com::gamestudiohx::babylonhx::tools::math::Matrix result = ::com::gamestudiohx::babylonhx::tools::math::Matrix_obj::__new();		HX_STACK_VAR(result,"result");
					HX_STACK_LINE(1076)
					result->m[(int)0] = 1.0;
					HX_STACK_LINE(1076)
					result->m[(int)1] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)2] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)3] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)4] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)5] = 1.0;
					HX_STACK_LINE(1076)
					result->m[(int)6] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)7] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)8] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)9] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)10] = 1.0;
					HX_STACK_LINE(1076)
					result->m[(int)11] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)12] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)13] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)14] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)15] = 1.0;
					HX_STACK_LINE(1076)
					_g12 = result;
				}
				HX_STACK_LINE(1076)
				camera->_worldMatrix = _g12;
			}
			HX_STACK_LINE(1076)
			{
				HX_STACK_LINE(1076)
				::com::gamestudiohx::babylonhx::tools::math::Matrix _this = camera->_computedViewMatrix;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(1076)
				::com::gamestudiohx::babylonhx::tools::math::Matrix other = camera->_worldMatrix;		HX_STACK_VAR(other,"other");
				HX_STACK_LINE(1076)
				Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
				HX_STACK_LINE(1076)
				Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
				HX_STACK_LINE(1076)
				Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
				HX_STACK_LINE(1076)
				Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
				HX_STACK_LINE(1076)
				Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
				HX_STACK_LINE(1076)
				Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
				HX_STACK_LINE(1076)
				Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
				HX_STACK_LINE(1076)
				Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
				HX_STACK_LINE(1076)
				Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
				HX_STACK_LINE(1076)
				Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
				HX_STACK_LINE(1076)
				Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
				HX_STACK_LINE(1076)
				Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
				HX_STACK_LINE(1076)
				Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
				HX_STACK_LINE(1076)
				Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
				HX_STACK_LINE(1076)
				Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
				HX_STACK_LINE(1076)
				Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
				HX_STACK_LINE(1076)
				Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
				HX_STACK_LINE(1076)
				Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
				HX_STACK_LINE(1076)
				Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
				HX_STACK_LINE(1076)
				Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
				HX_STACK_LINE(1076)
				Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
				HX_STACK_LINE(1076)
				Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
				HX_STACK_LINE(1076)
				Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
				HX_STACK_LINE(1076)
				Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
				HX_STACK_LINE(1076)
				Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
				HX_STACK_LINE(1076)
				Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
				HX_STACK_LINE(1076)
				Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
				HX_STACK_LINE(1076)
				Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
				HX_STACK_LINE(1076)
				Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
				HX_STACK_LINE(1076)
				Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
				HX_STACK_LINE(1076)
				Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
				HX_STACK_LINE(1076)
				Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
				HX_STACK_LINE(1076)
				Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
				HX_STACK_LINE(1076)
				Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
				HX_STACK_LINE(1076)
				Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
				HX_STACK_LINE(1076)
				Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
				HX_STACK_LINE(1076)
				Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
				HX_STACK_LINE(1076)
				Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
				HX_STACK_LINE(1076)
				Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
				HX_STACK_LINE(1076)
				other->m[(int)0] = (l23 * l27);
				HX_STACK_LINE(1076)
				other->m[(int)4] = (l24 * l27);
				HX_STACK_LINE(1076)
				other->m[(int)8] = (l25 * l27);
				HX_STACK_LINE(1076)
				other->m[(int)12] = (l26 * l27);
				HX_STACK_LINE(1076)
				other->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
				HX_STACK_LINE(1076)
				other->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
				HX_STACK_LINE(1076)
				other->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
				HX_STACK_LINE(1076)
				other->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
				HX_STACK_LINE(1076)
				other->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
				HX_STACK_LINE(1076)
				other->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
				HX_STACK_LINE(1076)
				other->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
				HX_STACK_LINE(1076)
				other->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
				HX_STACK_LINE(1076)
				other->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
				HX_STACK_LINE(1076)
				other->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
				HX_STACK_LINE(1076)
				other->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
				HX_STACK_LINE(1076)
				other->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
			}
			HX_STACK_LINE(1076)
			{
				HX_STACK_LINE(1076)
				::com::gamestudiohx::babylonhx::tools::math::Matrix _this = camera->_worldMatrix;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(1076)
				::com::gamestudiohx::babylonhx::tools::math::Matrix other = camera->parent->getWorldMatrix();		HX_STACK_VAR(other,"other");
				HX_STACK_LINE(1076)
				{
					HX_STACK_LINE(1076)
					Array< Float > result = camera->_computedViewMatrix->m;		HX_STACK_VAR(result,"result");
					HX_STACK_LINE(1076)
					Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
					HX_STACK_LINE(1076)
					Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
					HX_STACK_LINE(1076)
					Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
					HX_STACK_LINE(1076)
					Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
					HX_STACK_LINE(1076)
					Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
					HX_STACK_LINE(1076)
					Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
					HX_STACK_LINE(1076)
					Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
					HX_STACK_LINE(1076)
					Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
					HX_STACK_LINE(1076)
					Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
					HX_STACK_LINE(1076)
					Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
					HX_STACK_LINE(1076)
					Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
					HX_STACK_LINE(1076)
					Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
					HX_STACK_LINE(1076)
					Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
					HX_STACK_LINE(1076)
					Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
					HX_STACK_LINE(1076)
					Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
					HX_STACK_LINE(1076)
					Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
					HX_STACK_LINE(1076)
					Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
					HX_STACK_LINE(1076)
					Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
					HX_STACK_LINE(1076)
					Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
					HX_STACK_LINE(1076)
					Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
					HX_STACK_LINE(1076)
					Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
					HX_STACK_LINE(1076)
					Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
					HX_STACK_LINE(1076)
					Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
					HX_STACK_LINE(1076)
					Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
					HX_STACK_LINE(1076)
					Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
					HX_STACK_LINE(1076)
					Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
					HX_STACK_LINE(1076)
					Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
					HX_STACK_LINE(1076)
					Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
					HX_STACK_LINE(1076)
					Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
					HX_STACK_LINE(1076)
					Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
					HX_STACK_LINE(1076)
					Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
					HX_STACK_LINE(1076)
					Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
					HX_STACK_LINE(1076)
					result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
					HX_STACK_LINE(1076)
					result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
					HX_STACK_LINE(1076)
					result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
					HX_STACK_LINE(1076)
					result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
					HX_STACK_LINE(1076)
					result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
					HX_STACK_LINE(1076)
					result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
					HX_STACK_LINE(1076)
					result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
					HX_STACK_LINE(1076)
					result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
					HX_STACK_LINE(1076)
					result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
					HX_STACK_LINE(1076)
					result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
					HX_STACK_LINE(1076)
					result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
					HX_STACK_LINE(1076)
					result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
					HX_STACK_LINE(1076)
					result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
					HX_STACK_LINE(1076)
					result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
					HX_STACK_LINE(1076)
					result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
					HX_STACK_LINE(1076)
					result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
					HX_STACK_LINE(1076)
					result;
				}
			}
			HX_STACK_LINE(1076)
			{
				HX_STACK_LINE(1076)
				::com::gamestudiohx::babylonhx::tools::math::Matrix _this = camera->_computedViewMatrix;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(1076)
				{
					HX_STACK_LINE(1076)
					Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
					HX_STACK_LINE(1076)
					Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
					HX_STACK_LINE(1076)
					Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
					HX_STACK_LINE(1076)
					Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
					HX_STACK_LINE(1076)
					Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
					HX_STACK_LINE(1076)
					Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
					HX_STACK_LINE(1076)
					Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
					HX_STACK_LINE(1076)
					Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
					HX_STACK_LINE(1076)
					Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
					HX_STACK_LINE(1076)
					Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
					HX_STACK_LINE(1076)
					Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
					HX_STACK_LINE(1076)
					Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
					HX_STACK_LINE(1076)
					Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
					HX_STACK_LINE(1076)
					Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
					HX_STACK_LINE(1076)
					Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
					HX_STACK_LINE(1076)
					Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
					HX_STACK_LINE(1076)
					Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
					HX_STACK_LINE(1076)
					Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
					HX_STACK_LINE(1076)
					Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
					HX_STACK_LINE(1076)
					Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
					HX_STACK_LINE(1076)
					Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
					HX_STACK_LINE(1076)
					Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
					HX_STACK_LINE(1076)
					Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
					HX_STACK_LINE(1076)
					Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
					HX_STACK_LINE(1076)
					Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
					HX_STACK_LINE(1076)
					Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
					HX_STACK_LINE(1076)
					Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
					HX_STACK_LINE(1076)
					Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
					HX_STACK_LINE(1076)
					Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
					HX_STACK_LINE(1076)
					Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
					HX_STACK_LINE(1076)
					Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
					HX_STACK_LINE(1076)
					Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
					HX_STACK_LINE(1076)
					Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
					HX_STACK_LINE(1076)
					Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
					HX_STACK_LINE(1076)
					Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
					HX_STACK_LINE(1076)
					Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
					HX_STACK_LINE(1076)
					Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
					HX_STACK_LINE(1076)
					Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
					HX_STACK_LINE(1076)
					Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
					HX_STACK_LINE(1076)
					_this->m[(int)0] = (l23 * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)4] = (l24 * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)8] = (l25 * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)12] = (l26 * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
					HX_STACK_LINE(1076)
					_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
				}
			}
		}
		HX_STACK_LINE(1076)
		_g13 = camera->_computedViewMatrix;
	}
	HX_STACK_LINE(1076)
	::com::gamestudiohx::babylonhx::tools::math::Matrix _g17;		HX_STACK_VAR(_g17,"_g17");
	HX_STACK_LINE(1076)
	{
		HX_STACK_LINE(1076)
		bool force = false;		HX_STACK_VAR(force,"force");
		HX_STACK_LINE(1076)
		if ((!(((  ((!(force))) ? bool(camera->_isSynchronizedProjectionMatrix()) : bool(false) ))))){
			HX_STACK_LINE(1076)
			::com::gamestudiohx::babylonhx::Engine engine1 = camera->_scene->getEngine();		HX_STACK_VAR(engine1,"engine1");
			HX_STACK_LINE(1076)
			if (((camera->mode == ::com::gamestudiohx::babylonhx::cameras::Camera_obj::PERSPECTIVE_CAMERA))){
				HX_STACK_LINE(1076)
				Float aspect = engine1->getAspectRatio(camera);		HX_STACK_VAR(aspect,"aspect");
				HX_STACK_LINE(1076)
				Float znear = camera->minZ;		HX_STACK_VAR(znear,"znear");
				HX_STACK_LINE(1076)
				Float zfar = camera->maxZ;		HX_STACK_VAR(zfar,"zfar");
				HX_STACK_LINE(1076)
				::com::gamestudiohx::babylonhx::tools::math::Matrix result = camera->_projectionMatrix;		HX_STACK_VAR(result,"result");
				HX_STACK_LINE(1076)
				Float _g14 = ::Math_obj::tan((camera->fov * 0.5));		HX_STACK_VAR(_g14,"_g14");
				HX_STACK_LINE(1076)
				Float tan = (Float(1.0) / Float(_g14));		HX_STACK_VAR(tan,"tan");
				HX_STACK_LINE(1076)
				result->m[(int)0] = (Float(tan) / Float(aspect));
				HX_STACK_LINE(1076)
				result->m[(int)1] = result->m[(int)2] = result->m[(int)3] = 0.0;
				HX_STACK_LINE(1076)
				result->m[(int)5] = tan;
				HX_STACK_LINE(1076)
				result->m[(int)4] = result->m[(int)6] = result->m[(int)7] = 0.0;
				HX_STACK_LINE(1076)
				result->m[(int)8] = result->m[(int)9] = 0.0;
				HX_STACK_LINE(1076)
				result->m[(int)10] = (Float(-(zfar)) / Float(((znear - zfar))));
				HX_STACK_LINE(1076)
				result->m[(int)11] = 1.0;
				HX_STACK_LINE(1076)
				result->m[(int)12] = result->m[(int)13] = result->m[(int)15] = 0.0;
				HX_STACK_LINE(1076)
				result->m[(int)14] = (Float((znear * zfar)) / Float(((znear - zfar))));
				HX_STACK_LINE(1076)
				result;
			}
			else{
				HX_STACK_LINE(1076)
				int _g15 = engine1->getRenderWidth();		HX_STACK_VAR(_g15,"_g15");
				HX_STACK_LINE(1076)
				Float halfWidth = (Float(_g15) / Float(2.0));		HX_STACK_VAR(halfWidth,"halfWidth");
				HX_STACK_LINE(1076)
				int _g16 = engine1->getRenderHeight();		HX_STACK_VAR(_g16,"_g16");
				HX_STACK_LINE(1076)
				Float halfHeight = (Float(_g16) / Float(2.0));		HX_STACK_VAR(halfHeight,"halfHeight");
				HX_STACK_LINE(1076)
				{
					HX_STACK_LINE(1076)
					Float left;		HX_STACK_VAR(left,"left");
					HX_STACK_LINE(1076)
					if (((camera->orthoLeft == null()))){
						HX_STACK_LINE(1076)
						left = -(halfWidth);
					}
					else{
						HX_STACK_LINE(1076)
						left = camera->orthoLeft;
					}
					HX_STACK_LINE(1076)
					Float right;		HX_STACK_VAR(right,"right");
					HX_STACK_LINE(1076)
					if (((camera->orthoRight == null()))){
						HX_STACK_LINE(1076)
						right = halfWidth;
					}
					else{
						HX_STACK_LINE(1076)
						right = camera->orthoRight;
					}
					HX_STACK_LINE(1076)
					Float bottom;		HX_STACK_VAR(bottom,"bottom");
					HX_STACK_LINE(1076)
					if (((camera->orthoBottom == null()))){
						HX_STACK_LINE(1076)
						bottom = -(halfHeight);
					}
					else{
						HX_STACK_LINE(1076)
						bottom = camera->orthoBottom;
					}
					HX_STACK_LINE(1076)
					Float top;		HX_STACK_VAR(top,"top");
					HX_STACK_LINE(1076)
					if (((camera->orthoTop == null()))){
						HX_STACK_LINE(1076)
						top = halfHeight;
					}
					else{
						HX_STACK_LINE(1076)
						top = camera->orthoTop;
					}
					HX_STACK_LINE(1076)
					Float znear = camera->minZ;		HX_STACK_VAR(znear,"znear");
					HX_STACK_LINE(1076)
					Float zfar = camera->maxZ;		HX_STACK_VAR(zfar,"zfar");
					HX_STACK_LINE(1076)
					::com::gamestudiohx::babylonhx::tools::math::Matrix result = camera->_projectionMatrix;		HX_STACK_VAR(result,"result");
					HX_STACK_LINE(1076)
					result->m[(int)0] = (Float(2.0) / Float(((right - left))));
					HX_STACK_LINE(1076)
					result->m[(int)1] = result->m[(int)2] = result->m[(int)3] = result->m[(int)4] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)5] = (Float(2.0) / Float(((top - bottom))));
					HX_STACK_LINE(1076)
					result->m[(int)6] = result->m[(int)7] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)8] = result->m[(int)9] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)10] = (Float((int)-1) / Float(((znear - zfar))));
					HX_STACK_LINE(1076)
					result->m[(int)11] = (int)0;
					HX_STACK_LINE(1076)
					result->m[(int)12] = (Float(((left + right))) / Float(((left - right))));
					HX_STACK_LINE(1076)
					result->m[(int)13] = (Float(((top + bottom))) / Float(((bottom - top))));
					HX_STACK_LINE(1076)
					result->m[(int)14] = (Float(znear) / Float(((znear - zfar))));
					HX_STACK_LINE(1076)
					result->m[(int)15] = 1.0;
					HX_STACK_LINE(1076)
					result;
				}
			}
		}
		HX_STACK_LINE(1076)
		_g17 = camera->_projectionMatrix;
	}
	HX_STACK_LINE(1076)
	return ::com::gamestudiohx::babylonhx::tools::math::Ray_obj::CreateNew(x,y,viewport1->width,viewport1->height,_g8,_g13,_g17);
}


HX_DEFINE_DYNAMIC_FUNC4(Scene_obj,createPickingRay,return )

::com::gamestudiohx::babylonhx::collisions::PickingInfo Scene_obj::_internalPick( Dynamic rayFunction,Dynamic predicate,bool fastCheck){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","_internalPick",0xc875cee9,"com.gamestudiohx.babylonhx.Scene._internalPick","com/gamestudiohx/babylonhx/Scene.hx",1079,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(rayFunction,"rayFunction")
	HX_STACK_ARG(predicate,"predicate")
	HX_STACK_ARG(fastCheck,"fastCheck")
	HX_STACK_LINE(1080)
	::com::gamestudiohx::babylonhx::collisions::PickingInfo pickingInfo = null();		HX_STACK_VAR(pickingInfo,"pickingInfo");
	HX_STACK_LINE(1082)
	{
		HX_STACK_LINE(1082)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(1082)
		int _g = this->meshes->length;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(1082)
		while((true)){
			HX_STACK_LINE(1082)
			if ((!(((_g1 < _g))))){
				HX_STACK_LINE(1082)
				break;
			}
			HX_STACK_LINE(1082)
			int meshIndex = (_g1)++;		HX_STACK_VAR(meshIndex,"meshIndex");
			HX_STACK_LINE(1083)
			::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = this->meshes->__get(meshIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
			HX_STACK_LINE(1085)
			if (((predicate != null()))){
				HX_STACK_LINE(1086)
				if ((!(predicate(mesh).Cast< bool >()))){
					HX_STACK_LINE(1087)
					continue;
				}
			}
			else{
				HX_STACK_LINE(1089)
				if (((  ((!(((  ((!((!(mesh->isEnabled()))))) ? bool(!(mesh->isVisible)) : bool(true) ))))) ? bool(!(mesh->isPickable)) : bool(true) ))){
					HX_STACK_LINE(1090)
					continue;
				}
			}
			HX_STACK_LINE(1093)
			::com::gamestudiohx::babylonhx::tools::math::Matrix world;		HX_STACK_VAR(world,"world");
			HX_STACK_LINE(1093)
			{
				HX_STACK_LINE(1093)
				int _g2 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g2,"_g2");
				HX_STACK_LINE(1093)
				if (((mesh->_currentRenderId != _g2))){
					HX_STACK_LINE(1093)
					bool force = false;		HX_STACK_VAR(force,"force");
					HX_STACK_LINE(1093)
					::com::gamestudiohx::babylonhx::tools::math::Matrix ret = mesh->_worldMatrix;		HX_STACK_VAR(ret,"ret");
					struct _Function_5_1{
						inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1093,0x7c8236a5)
							{
								HX_STACK_LINE(1093)
								int _g11 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(1093)
								return (  ((!(((mesh->_currentRenderId == _g11))))) ? bool(mesh->isSynchronized(null())) : bool(true) );
							}
							return null();
						}
					};
					HX_STACK_LINE(1093)
					if (((  ((!(force))) ? bool(_Function_5_1::Block(mesh)) : bool(false) ))){
						HX_STACK_LINE(1093)
						mesh->_childrenFlag = (int)0;
					}
					else{
						HX_STACK_LINE(1093)
						mesh->_childrenFlag = (int)1;
						HX_STACK_LINE(1093)
						mesh->_cache->__Field(HX_CSTRING("position"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->position);
						HX_STACK_LINE(1093)
						mesh->_cache->__Field(HX_CSTRING("scaling"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->scaling);
						HX_STACK_LINE(1093)
						mesh->_cache->__FieldRef(HX_CSTRING("pivotMatrixUpdated")) = false;
						HX_STACK_LINE(1093)
						int _g21 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g21,"_g21");
						HX_STACK_LINE(1093)
						mesh->_currentRenderId = _g21;
						HX_STACK_LINE(1093)
						{
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localScaling;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(1093)
							result->m[(int)0] = mesh->scaling->x;
							HX_STACK_LINE(1093)
							result->m[(int)1] = (int)0;
							HX_STACK_LINE(1093)
							result->m[(int)2] = (int)0;
							HX_STACK_LINE(1093)
							result->m[(int)3] = (int)0;
							HX_STACK_LINE(1093)
							result->m[(int)4] = (int)0;
							HX_STACK_LINE(1093)
							result->m[(int)5] = mesh->scaling->y;
							HX_STACK_LINE(1093)
							result->m[(int)6] = (int)0;
							HX_STACK_LINE(1093)
							result->m[(int)7] = (int)0;
							HX_STACK_LINE(1093)
							result->m[(int)8] = (int)0;
							HX_STACK_LINE(1093)
							result->m[(int)9] = (int)0;
							HX_STACK_LINE(1093)
							result->m[(int)10] = mesh->scaling->z;
							HX_STACK_LINE(1093)
							result->m[(int)11] = (int)0;
							HX_STACK_LINE(1093)
							result->m[(int)12] = (int)0;
							HX_STACK_LINE(1093)
							result->m[(int)13] = (int)0;
							HX_STACK_LINE(1093)
							result->m[(int)14] = (int)0;
							HX_STACK_LINE(1093)
							result->m[(int)15] = 1.0;
							HX_STACK_LINE(1093)
							result;
						}
						HX_STACK_LINE(1093)
						if (((mesh->rotationQuaternion != null()))){
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion _this = mesh->rotationQuaternion;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1093)
								Float xx = (_this->x * _this->x);		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(1093)
								Float yy = (_this->y * _this->y);		HX_STACK_VAR(yy,"yy");
								HX_STACK_LINE(1093)
								Float zz = (_this->z * _this->z);		HX_STACK_VAR(zz,"zz");
								HX_STACK_LINE(1093)
								Float xy = (_this->x * _this->y);		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(1093)
								Float zw = (_this->z * _this->w);		HX_STACK_VAR(zw,"zw");
								HX_STACK_LINE(1093)
								Float zx = (_this->z * _this->x);		HX_STACK_VAR(zx,"zx");
								HX_STACK_LINE(1093)
								Float yw = (_this->y * _this->w);		HX_STACK_VAR(yw,"yw");
								HX_STACK_LINE(1093)
								Float yz = (_this->y * _this->z);		HX_STACK_VAR(yz,"yz");
								HX_STACK_LINE(1093)
								Float xw = (_this->x * _this->w);		HX_STACK_VAR(xw,"xw");
								HX_STACK_LINE(1093)
								result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
								HX_STACK_LINE(1093)
								result->m[(int)1] = (2.0 * ((xy + zw)));
								HX_STACK_LINE(1093)
								result->m[(int)2] = (2.0 * ((zx - yw)));
								HX_STACK_LINE(1093)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)4] = (2.0 * ((xy - zw)));
								HX_STACK_LINE(1093)
								result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
								HX_STACK_LINE(1093)
								result->m[(int)6] = (2.0 * ((yz + xw)));
								HX_STACK_LINE(1093)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)8] = (2.0 * ((zx + yw)));
								HX_STACK_LINE(1093)
								result->m[(int)9] = (2.0 * ((yz - xw)));
								HX_STACK_LINE(1093)
								result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
								HX_STACK_LINE(1093)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)12] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)13] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)14] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(1093)
								result;
							}
							HX_STACK_LINE(1093)
							mesh->_cache->__Field(HX_CSTRING("rotationQuaternion"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotationQuaternion);
						}
						else{
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion tempQuaternion = ::com::gamestudiohx::babylonhx::tools::math::Quaternion_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tempQuaternion,"tempQuaternion");
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion _g3;		HX_STACK_VAR(_g3,"_g3");
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									Float halfRoll = (mesh->rotation->z * 0.5);		HX_STACK_VAR(halfRoll,"halfRoll");
									HX_STACK_LINE(1093)
									Float halfPitch = (mesh->rotation->x * 0.5);		HX_STACK_VAR(halfPitch,"halfPitch");
									HX_STACK_LINE(1093)
									Float halfYaw = (mesh->rotation->y * 0.5);		HX_STACK_VAR(halfYaw,"halfYaw");
									HX_STACK_LINE(1093)
									Float sinRoll = ::Math_obj::sin(halfRoll);		HX_STACK_VAR(sinRoll,"sinRoll");
									HX_STACK_LINE(1093)
									Float cosRoll = ::Math_obj::cos(halfRoll);		HX_STACK_VAR(cosRoll,"cosRoll");
									HX_STACK_LINE(1093)
									Float sinPitch = ::Math_obj::sin(halfPitch);		HX_STACK_VAR(sinPitch,"sinPitch");
									HX_STACK_LINE(1093)
									Float cosPitch = ::Math_obj::cos(halfPitch);		HX_STACK_VAR(cosPitch,"cosPitch");
									HX_STACK_LINE(1093)
									Float sinYaw = ::Math_obj::sin(halfYaw);		HX_STACK_VAR(sinYaw,"sinYaw");
									HX_STACK_LINE(1093)
									Float cosYaw = ::Math_obj::cos(halfYaw);		HX_STACK_VAR(cosYaw,"cosYaw");
									HX_STACK_LINE(1093)
									tempQuaternion->x = (((cosYaw * sinPitch) * cosRoll) + ((sinYaw * cosPitch) * sinRoll));
									HX_STACK_LINE(1093)
									tempQuaternion->y = (((sinYaw * cosPitch) * cosRoll) - ((cosYaw * sinPitch) * sinRoll));
									HX_STACK_LINE(1093)
									tempQuaternion->z = (((cosYaw * cosPitch) * sinRoll) - ((sinYaw * sinPitch) * cosRoll));
									HX_STACK_LINE(1093)
									tempQuaternion->w = (((cosYaw * cosPitch) * cosRoll) + ((sinYaw * sinPitch) * sinRoll));
									HX_STACK_LINE(1093)
									_g3 = tempQuaternion;
								}
								HX_STACK_LINE(1093)
								tempQuaternion = _g3;
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									Float xx = (tempQuaternion->x * tempQuaternion->x);		HX_STACK_VAR(xx,"xx");
									HX_STACK_LINE(1093)
									Float yy = (tempQuaternion->y * tempQuaternion->y);		HX_STACK_VAR(yy,"yy");
									HX_STACK_LINE(1093)
									Float zz = (tempQuaternion->z * tempQuaternion->z);		HX_STACK_VAR(zz,"zz");
									HX_STACK_LINE(1093)
									Float xy = (tempQuaternion->x * tempQuaternion->y);		HX_STACK_VAR(xy,"xy");
									HX_STACK_LINE(1093)
									Float zw = (tempQuaternion->z * tempQuaternion->w);		HX_STACK_VAR(zw,"zw");
									HX_STACK_LINE(1093)
									Float zx = (tempQuaternion->z * tempQuaternion->x);		HX_STACK_VAR(zx,"zx");
									HX_STACK_LINE(1093)
									Float yw = (tempQuaternion->y * tempQuaternion->w);		HX_STACK_VAR(yw,"yw");
									HX_STACK_LINE(1093)
									Float yz = (tempQuaternion->y * tempQuaternion->z);		HX_STACK_VAR(yz,"yz");
									HX_STACK_LINE(1093)
									Float xw = (tempQuaternion->x * tempQuaternion->w);		HX_STACK_VAR(xw,"xw");
									HX_STACK_LINE(1093)
									result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
									HX_STACK_LINE(1093)
									result->m[(int)1] = (2.0 * ((xy + zw)));
									HX_STACK_LINE(1093)
									result->m[(int)2] = (2.0 * ((zx - yw)));
									HX_STACK_LINE(1093)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)4] = (2.0 * ((xy - zw)));
									HX_STACK_LINE(1093)
									result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
									HX_STACK_LINE(1093)
									result->m[(int)6] = (2.0 * ((yz + xw)));
									HX_STACK_LINE(1093)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)8] = (2.0 * ((zx + yw)));
									HX_STACK_LINE(1093)
									result->m[(int)9] = (2.0 * ((yz - xw)));
									HX_STACK_LINE(1093)
									result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
									HX_STACK_LINE(1093)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)12] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)13] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)14] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(1093)
									result;
								}
							}
							HX_STACK_LINE(1093)
							mesh->_cache->__Field(HX_CSTRING("rotation"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotation);
						}
						HX_STACK_LINE(1093)
						if ((mesh->infiniteDistance)){
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::cameras::Camera camera = mesh->_scene->activeCamera;		HX_STACK_VAR(camera,"camera");
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									result->m[(int)0] = 1.0;
									HX_STACK_LINE(1093)
									result->m[(int)1] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)2] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)4] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)5] = 1.0;
									HX_STACK_LINE(1093)
									result->m[(int)6] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)8] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)9] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)10] = 1.0;
									HX_STACK_LINE(1093)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)12] = (mesh->position->x + camera->position->x);
									HX_STACK_LINE(1093)
									result->m[(int)13] = (mesh->position->y + camera->position->y);
									HX_STACK_LINE(1093)
									result->m[(int)14] = (mesh->position->z + camera->position->z);
									HX_STACK_LINE(1093)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(1093)
									result;
								}
							}
						}
						else{
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								result->m[(int)0] = 1.0;
								HX_STACK_LINE(1093)
								result->m[(int)1] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)2] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)4] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)5] = 1.0;
								HX_STACK_LINE(1093)
								result->m[(int)6] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)8] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)9] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)10] = 1.0;
								HX_STACK_LINE(1093)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(1093)
								result->m[(int)12] = mesh->position->x;
								HX_STACK_LINE(1093)
								result->m[(int)13] = mesh->position->y;
								HX_STACK_LINE(1093)
								result->m[(int)14] = mesh->position->z;
								HX_STACK_LINE(1093)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(1093)
								result;
							}
						}
						HX_STACK_LINE(1093)
						{
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_pivotMatrix;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localScaling;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								Array< Float > result = mesh->_localPivotScaling->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1093)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1093)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1093)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1093)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1093)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1093)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1093)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1093)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1093)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1093)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1093)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1093)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1093)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1093)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1093)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1093)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1093)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1093)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1093)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1093)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1093)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1093)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1093)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1093)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1093)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1093)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1093)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1093)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1093)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1093)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1093)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1093)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1093)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1093)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1093)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1093)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1093)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1093)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1093)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1093)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1093)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1093)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1093)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1093)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1093)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1093)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1093)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1093)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1093)
								result;
							}
						}
						HX_STACK_LINE(1093)
						{
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScaling;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localRotation;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1093)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1093)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1093)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1093)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1093)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1093)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1093)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1093)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1093)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1093)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1093)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1093)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1093)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1093)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1093)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1093)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1093)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1093)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1093)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1093)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1093)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1093)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1093)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1093)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1093)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1093)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1093)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1093)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1093)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1093)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1093)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1093)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1093)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1093)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1093)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1093)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1093)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1093)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1093)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1093)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1093)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1093)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1093)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1093)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1093)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1093)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1093)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1093)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1093)
								result;
							}
						}
						HX_STACK_LINE(1093)
						if (((mesh->billboardMode != ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE))){
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 localPosition;		HX_STACK_VAR(localPosition,"localPosition");
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->position;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1093)
								localPosition = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
							}
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 zero;		HX_STACK_VAR(zero,"zero");
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_scene->activeCamera->position;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1093)
								zero = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
							}
							HX_STACK_LINE(1093)
							if (((bool((mesh->parent != null())) && bool((mesh->parent->position != null()))))){
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = mesh->parent->position;		HX_STACK_VAR(otherVector,"otherVector");
									HX_STACK_LINE(1093)
									hx::AddEq(localPosition->x,otherVector->x);
									HX_STACK_LINE(1093)
									hx::AddEq(localPosition->y,otherVector->y);
									HX_STACK_LINE(1093)
									hx::AddEq(localPosition->z,otherVector->z);
								}
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1093)
									{
										HX_STACK_LINE(1093)
										result->m[(int)0] = 1.0;
										HX_STACK_LINE(1093)
										result->m[(int)1] = (int)0;
										HX_STACK_LINE(1093)
										result->m[(int)2] = (int)0;
										HX_STACK_LINE(1093)
										result->m[(int)3] = (int)0;
										HX_STACK_LINE(1093)
										result->m[(int)4] = (int)0;
										HX_STACK_LINE(1093)
										result->m[(int)5] = 1.0;
										HX_STACK_LINE(1093)
										result->m[(int)6] = (int)0;
										HX_STACK_LINE(1093)
										result->m[(int)7] = (int)0;
										HX_STACK_LINE(1093)
										result->m[(int)8] = (int)0;
										HX_STACK_LINE(1093)
										result->m[(int)9] = (int)0;
										HX_STACK_LINE(1093)
										result->m[(int)10] = 1.0;
										HX_STACK_LINE(1093)
										result->m[(int)11] = (int)0;
										HX_STACK_LINE(1093)
										result->m[(int)12] = localPosition->x;
										HX_STACK_LINE(1093)
										result->m[(int)13] = localPosition->y;
										HX_STACK_LINE(1093)
										result->m[(int)14] = localPosition->z;
										HX_STACK_LINE(1093)
										result->m[(int)15] = 1.0;
										HX_STACK_LINE(1093)
										result;
									}
								}
							}
							HX_STACK_LINE(1093)
							if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))) == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))){
								HX_STACK_LINE(1093)
								zero = mesh->_scene->activeCamera->position;
							}
							else{
								HX_STACK_LINE(1093)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_X))) != (int)0))){
									HX_STACK_LINE(1093)
									zero->x = (localPosition->x + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
								HX_STACK_LINE(1093)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Y))) != (int)0))){
									HX_STACK_LINE(1093)
									zero->y = (localPosition->y + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
								HX_STACK_LINE(1093)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Z))) != (int)0))){
									HX_STACK_LINE(1093)
									zero->z = (localPosition->z + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
							}
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 up = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Up();		HX_STACK_VAR(up,"up");
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localBillboard;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 xAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(xAxis,"xAxis");
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 yAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(yAxis,"yAxis");
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 zAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(zAxis,"zAxis");
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									zAxis->x = (zero->x - localPosition->x);
									HX_STACK_LINE(1093)
									zAxis->y = (zero->y - localPosition->y);
									HX_STACK_LINE(1093)
									zAxis->z = (zero->z - localPosition->z);
								}
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									Float len = ::Math_obj::sqrt((((zAxis->x * zAxis->x) + (zAxis->y * zAxis->y)) + (zAxis->z * zAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(1093)
									if (((len != (int)0))){
										HX_STACK_LINE(1093)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(1093)
										hx::MultEq(zAxis->x,num);
										HX_STACK_LINE(1093)
										hx::MultEq(zAxis->y,num);
										HX_STACK_LINE(1093)
										hx::MultEq(zAxis->z,num);
									}
								}
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									xAxis->x = ((up->y * zAxis->z) - (up->z * zAxis->y));
									HX_STACK_LINE(1093)
									xAxis->y = ((up->z * zAxis->x) - (up->x * zAxis->z));
									HX_STACK_LINE(1093)
									xAxis->z = ((up->x * zAxis->y) - (up->y * zAxis->x));
								}
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									Float len = ::Math_obj::sqrt((((xAxis->x * xAxis->x) + (xAxis->y * xAxis->y)) + (xAxis->z * xAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(1093)
									if (((len != (int)0))){
										HX_STACK_LINE(1093)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(1093)
										hx::MultEq(xAxis->x,num);
										HX_STACK_LINE(1093)
										hx::MultEq(xAxis->y,num);
										HX_STACK_LINE(1093)
										hx::MultEq(xAxis->z,num);
									}
								}
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									yAxis->x = ((zAxis->y * xAxis->z) - (zAxis->z * xAxis->y));
									HX_STACK_LINE(1093)
									yAxis->y = ((zAxis->z * xAxis->x) - (zAxis->x * xAxis->z));
									HX_STACK_LINE(1093)
									yAxis->z = ((zAxis->x * xAxis->y) - (zAxis->y * xAxis->x));
								}
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									Float len = ::Math_obj::sqrt((((yAxis->x * yAxis->x) + (yAxis->y * yAxis->y)) + (yAxis->z * yAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(1093)
									if (((len != (int)0))){
										HX_STACK_LINE(1093)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(1093)
										hx::MultEq(yAxis->x,num);
										HX_STACK_LINE(1093)
										hx::MultEq(yAxis->y,num);
										HX_STACK_LINE(1093)
										hx::MultEq(yAxis->z,num);
									}
								}
								HX_STACK_LINE(1093)
								Float ex = -(((((xAxis->x * localPosition->x) + (xAxis->y * localPosition->y)) + (xAxis->z * localPosition->z))));		HX_STACK_VAR(ex,"ex");
								HX_STACK_LINE(1093)
								Float ey = -(((((yAxis->x * localPosition->x) + (yAxis->y * localPosition->y)) + (yAxis->z * localPosition->z))));		HX_STACK_VAR(ey,"ey");
								HX_STACK_LINE(1093)
								Float ez = -(((((zAxis->x * localPosition->x) + (zAxis->y * localPosition->y)) + (zAxis->z * localPosition->z))));		HX_STACK_VAR(ez,"ez");
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									result->m[(int)0] = xAxis->x;
									HX_STACK_LINE(1093)
									result->m[(int)1] = yAxis->x;
									HX_STACK_LINE(1093)
									result->m[(int)2] = zAxis->x;
									HX_STACK_LINE(1093)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)4] = xAxis->y;
									HX_STACK_LINE(1093)
									result->m[(int)5] = yAxis->y;
									HX_STACK_LINE(1093)
									result->m[(int)6] = zAxis->y;
									HX_STACK_LINE(1093)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)8] = xAxis->z;
									HX_STACK_LINE(1093)
									result->m[(int)9] = yAxis->z;
									HX_STACK_LINE(1093)
									result->m[(int)10] = zAxis->z;
									HX_STACK_LINE(1093)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(1093)
									result->m[(int)12] = ex;
									HX_STACK_LINE(1093)
									result->m[(int)13] = ey;
									HX_STACK_LINE(1093)
									result->m[(int)14] = ez;
									HX_STACK_LINE(1093)
									result->m[(int)15] = (int)1;
									HX_STACK_LINE(1093)
									result;
								}
							}
							HX_STACK_LINE(1093)
							mesh->_localBillboard->m[(int)12] = mesh->_localBillboard->m[(int)13] = mesh->_localBillboard->m[(int)14] = (int)0;
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localBillboard;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
									HX_STACK_LINE(1093)
									Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
									HX_STACK_LINE(1093)
									Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
									HX_STACK_LINE(1093)
									Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
									HX_STACK_LINE(1093)
									Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
									HX_STACK_LINE(1093)
									Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
									HX_STACK_LINE(1093)
									Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
									HX_STACK_LINE(1093)
									Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
									HX_STACK_LINE(1093)
									Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
									HX_STACK_LINE(1093)
									Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
									HX_STACK_LINE(1093)
									Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
									HX_STACK_LINE(1093)
									Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
									HX_STACK_LINE(1093)
									Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
									HX_STACK_LINE(1093)
									Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
									HX_STACK_LINE(1093)
									Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
									HX_STACK_LINE(1093)
									Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
									HX_STACK_LINE(1093)
									Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
									HX_STACK_LINE(1093)
									Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
									HX_STACK_LINE(1093)
									Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
									HX_STACK_LINE(1093)
									Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
									HX_STACK_LINE(1093)
									Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
									HX_STACK_LINE(1093)
									Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
									HX_STACK_LINE(1093)
									Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
									HX_STACK_LINE(1093)
									Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
									HX_STACK_LINE(1093)
									Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
									HX_STACK_LINE(1093)
									Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
									HX_STACK_LINE(1093)
									Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
									HX_STACK_LINE(1093)
									Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
									HX_STACK_LINE(1093)
									Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
									HX_STACK_LINE(1093)
									Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
									HX_STACK_LINE(1093)
									Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
									HX_STACK_LINE(1093)
									Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
									HX_STACK_LINE(1093)
									Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
									HX_STACK_LINE(1093)
									Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
									HX_STACK_LINE(1093)
									Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
									HX_STACK_LINE(1093)
									Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
									HX_STACK_LINE(1093)
									Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
									HX_STACK_LINE(1093)
									Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
									HX_STACK_LINE(1093)
									Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
									HX_STACK_LINE(1093)
									_this->m[(int)0] = (l23 * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)4] = (l24 * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)8] = (l25 * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)12] = (l26 * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
									HX_STACK_LINE(1093)
									_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
								}
							}
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localBillboard;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1093)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1093)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1093)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1093)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1093)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1093)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1093)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1093)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1093)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1093)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1093)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1093)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1093)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1093)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1093)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1093)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1093)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1093)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1093)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1093)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1093)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1093)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1093)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1093)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1093)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1093)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1093)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1093)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1093)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1093)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1093)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1093)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1093)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1093)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1093)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1093)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1093)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1093)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1093)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1093)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1093)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1093)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1093)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1093)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1093)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1093)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1093)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1093)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1093)
									result;
								}
							}
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_rotateYByPI;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localWorld;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1093)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1093)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1093)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1093)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1093)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1093)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1093)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1093)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1093)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1093)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1093)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1093)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1093)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1093)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1093)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1093)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1093)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1093)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1093)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1093)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1093)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1093)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1093)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1093)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1093)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1093)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1093)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1093)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1093)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1093)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1093)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1093)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1093)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1093)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1093)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1093)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1093)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1093)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1093)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1093)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1093)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1093)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1093)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1093)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1093)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1093)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1093)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1093)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1093)
									result;
								}
							}
						}
						struct _Function_6_1{
							inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
								HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1093,0x7c8236a5)
								{
									HX_STACK_LINE(1093)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _g4 = mesh->parent->getWorldMatrix();		HX_STACK_VAR(_g4,"_g4");
									HX_STACK_LINE(1093)
									return (_g4 != null());
								}
								return null();
							}
						};
						HX_STACK_LINE(1093)
						if (((  (((  (((mesh->parent != null()))) ? bool(_Function_6_1::Block(mesh)) : bool(false) ))) ? bool((mesh->billboardMode == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE)) : bool(false) ))){
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1093)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1093)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1093)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1093)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1093)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1093)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1093)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1093)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1093)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1093)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1093)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1093)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1093)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1093)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1093)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1093)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1093)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1093)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1093)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1093)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1093)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1093)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1093)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1093)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1093)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1093)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1093)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1093)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1093)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1093)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1093)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1093)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1093)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1093)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1093)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1093)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1093)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1093)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1093)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1093)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1093)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1093)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1093)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1093)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1093)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1093)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1093)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1093)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1093)
									result;
								}
							}
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::tools::math::Matrix parentWorld = mesh->parent->getWorldMatrix();		HX_STACK_VAR(parentWorld,"parentWorld");
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localWorld;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1093)
								{
									HX_STACK_LINE(1093)
									Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1093)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1093)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1093)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1093)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1093)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1093)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1093)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1093)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1093)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1093)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1093)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1093)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1093)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1093)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1093)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1093)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1093)
									Float om0 = parentWorld->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1093)
									Float om1 = parentWorld->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1093)
									Float om2 = parentWorld->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1093)
									Float om3 = parentWorld->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1093)
									Float om4 = parentWorld->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1093)
									Float om5 = parentWorld->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1093)
									Float om6 = parentWorld->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1093)
									Float om7 = parentWorld->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1093)
									Float om8 = parentWorld->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1093)
									Float om9 = parentWorld->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1093)
									Float om10 = parentWorld->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1093)
									Float om11 = parentWorld->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1093)
									Float om12 = parentWorld->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1093)
									Float om13 = parentWorld->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1093)
									Float om14 = parentWorld->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1093)
									Float om15 = parentWorld->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1093)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1093)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1093)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1093)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1093)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1093)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1093)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1093)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1093)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1093)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1093)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1093)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1093)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1093)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1093)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1093)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1093)
									result;
								}
							}
						}
						else{
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1093)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1093)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1093)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1093)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1093)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1093)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1093)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1093)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1093)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1093)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1093)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1093)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1093)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1093)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1093)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1093)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1093)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1093)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1093)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1093)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1093)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1093)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1093)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1093)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1093)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1093)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1093)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1093)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1093)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1093)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1093)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1093)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1093)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1093)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1093)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1093)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1093)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1093)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1093)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1093)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1093)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1093)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1093)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1093)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1093)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1093)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1093)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1093)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1093)
								result;
							}
						}
						HX_STACK_LINE(1093)
						if (((mesh->_boundingInfo != null()))){
							HX_STACK_LINE(1093)
							Float _g5 = ::Math_obj::max(mesh->scaling->x,mesh->scaling->y);		HX_STACK_VAR(_g5,"_g5");
							HX_STACK_LINE(1093)
							mesh->_scaleFactor = _g5;
							HX_STACK_LINE(1093)
							Float _g6 = ::Math_obj::max(mesh->_scaleFactor,mesh->scaling->z);		HX_STACK_VAR(_g6,"_g6");
							HX_STACK_LINE(1093)
							mesh->_scaleFactor = _g6;
							struct _Function_7_1{
								inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
									HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1093,0x7c8236a5)
									{
										HX_STACK_LINE(1093)
										Dynamic _g7 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g7,"_g7");
										HX_STACK_LINE(1093)
										return (_g7 != null());
									}
									return null();
								}
							};
							HX_STACK_LINE(1093)
							if (((  (((mesh->parent != null()))) ? bool(_Function_7_1::Block(mesh)) : bool(false) ))){
								HX_STACK_LINE(1093)
								Dynamic _g8 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g8,"_g8");
								HX_STACK_LINE(1093)
								Float _g9 = (mesh->_scaleFactor * _g8);		HX_STACK_VAR(_g9,"_g9");
								HX_STACK_LINE(1093)
								mesh->_scaleFactor = _g9;
							}
							HX_STACK_LINE(1093)
							mesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
							HX_STACK_LINE(1093)
							{
								HX_STACK_LINE(1093)
								int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(1093)
								int _g3 = mesh->subMeshes->length;		HX_STACK_VAR(_g3,"_g3");
								HX_STACK_LINE(1093)
								while((true)){
									HX_STACK_LINE(1093)
									if ((!(((_g11 < _g3))))){
										HX_STACK_LINE(1093)
										break;
									}
									HX_STACK_LINE(1093)
									int subIndex = (_g11)++;		HX_STACK_VAR(subIndex,"subIndex");
									HX_STACK_LINE(1093)
									::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
									HX_STACK_LINE(1093)
									subMesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
								}
							}
						}
						HX_STACK_LINE(1093)
						{
							HX_STACK_LINE(1093)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_absolutePosition;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1093)
							_this->x = mesh->_worldMatrix->m->__get((int)12);
							HX_STACK_LINE(1093)
							_this->y = mesh->_worldMatrix->m->__get((int)13);
							HX_STACK_LINE(1093)
							_this->z = mesh->_worldMatrix->m->__get((int)14);
						}
						HX_STACK_LINE(1093)
						ret = mesh->_worldMatrix;
					}
					HX_STACK_LINE(1093)
					ret;
				}
				HX_STACK_LINE(1093)
				world = mesh->_worldMatrix;
			}
			HX_STACK_LINE(1094)
			::com::gamestudiohx::babylonhx::tools::math::Ray ray = rayFunction(world).Cast< ::com::gamestudiohx::babylonhx::tools::math::Ray >();		HX_STACK_VAR(ray,"ray");
			HX_STACK_LINE(1096)
			::com::gamestudiohx::babylonhx::collisions::PickingInfo result = mesh->intersects(ray,fastCheck);		HX_STACK_VAR(result,"result");
			HX_STACK_LINE(1097)
			if ((!(result->hit))){
				HX_STACK_LINE(1098)
				continue;
			}
			HX_STACK_LINE(1100)
			if (((bool((bool(!(fastCheck)) && bool((pickingInfo != null())))) && bool((result->distance >= pickingInfo->distance))))){
				HX_STACK_LINE(1101)
				continue;
			}
			HX_STACK_LINE(1103)
			pickingInfo = result;
			HX_STACK_LINE(1105)
			if ((fastCheck)){
				HX_STACK_LINE(1106)
				break;
			}
		}
	}
	HX_STACK_LINE(1110)
	if (((pickingInfo == null()))){
		HX_STACK_LINE(1110)
		return ::com::gamestudiohx::babylonhx::collisions::PickingInfo_obj::__new();
	}
	else{
		HX_STACK_LINE(1110)
		return pickingInfo;
	}
	HX_STACK_LINE(1110)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC3(Scene_obj,_internalPick,return )

::com::gamestudiohx::babylonhx::collisions::PickingInfo Scene_obj::pick( Float x,Float y,Dynamic predicate,bool fastCheck,::com::gamestudiohx::babylonhx::cameras::Camera camera){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","pick",0x9529e515,"com.gamestudiohx.babylonhx.Scene.pick","com/gamestudiohx/babylonhx/Scene.hx",1113,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_ARG(y,"y")
	HX_STACK_ARG(predicate,"predicate")
	HX_STACK_ARG(fastCheck,"fastCheck")
	HX_STACK_ARG(camera,"camera")
	HX_STACK_LINE(1113)
	::com::gamestudiohx::babylonhx::Scene _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
	HX_STACK_LINE(1114)
	::com::gamestudiohx::babylonhx::collisions::PickingInfo pickingInfo = null();		HX_STACK_VAR(pickingInfo,"pickingInfo");
	HX_STACK_LINE(1114)
	{
		HX_STACK_LINE(1114)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(1114)
		int _g2 = this->meshes->length;		HX_STACK_VAR(_g2,"_g2");
		HX_STACK_LINE(1114)
		while((true)){
			HX_STACK_LINE(1114)
			if ((!(((_g1 < _g2))))){
				HX_STACK_LINE(1114)
				break;
			}
			HX_STACK_LINE(1114)
			int meshIndex = (_g1)++;		HX_STACK_VAR(meshIndex,"meshIndex");
			HX_STACK_LINE(1114)
			::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = this->meshes->__get(meshIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
			HX_STACK_LINE(1114)
			if (((predicate != null()))){
				HX_STACK_LINE(1114)
				if ((!(predicate(mesh).Cast< bool >()))){
					HX_STACK_LINE(1114)
					continue;
				}
			}
			else{
				HX_STACK_LINE(1114)
				if (((  ((!(((  ((!((!(mesh->isEnabled()))))) ? bool(!(mesh->isVisible)) : bool(true) ))))) ? bool(!(mesh->isPickable)) : bool(true) ))){
					HX_STACK_LINE(1114)
					continue;
				}
			}
			HX_STACK_LINE(1114)
			::com::gamestudiohx::babylonhx::tools::math::Matrix world;		HX_STACK_VAR(world,"world");
			HX_STACK_LINE(1114)
			{
				HX_STACK_LINE(1114)
				int _g3 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g3,"_g3");
				HX_STACK_LINE(1114)
				if (((mesh->_currentRenderId != _g3))){
					HX_STACK_LINE(1114)
					bool force = false;		HX_STACK_VAR(force,"force");
					HX_STACK_LINE(1114)
					::com::gamestudiohx::babylonhx::tools::math::Matrix ret = mesh->_worldMatrix;		HX_STACK_VAR(ret,"ret");
					struct _Function_5_1{
						inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1114,0x7c8236a5)
							{
								HX_STACK_LINE(1114)
								int _g11 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(1114)
								return (  ((!(((mesh->_currentRenderId == _g11))))) ? bool(mesh->isSynchronized(null())) : bool(true) );
							}
							return null();
						}
					};
					HX_STACK_LINE(1114)
					if (((  ((!(force))) ? bool(_Function_5_1::Block(mesh)) : bool(false) ))){
						HX_STACK_LINE(1114)
						mesh->_childrenFlag = (int)0;
					}
					else{
						HX_STACK_LINE(1114)
						mesh->_childrenFlag = (int)1;
						HX_STACK_LINE(1114)
						mesh->_cache->__Field(HX_CSTRING("position"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->position);
						HX_STACK_LINE(1114)
						mesh->_cache->__Field(HX_CSTRING("scaling"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->scaling);
						HX_STACK_LINE(1114)
						mesh->_cache->__FieldRef(HX_CSTRING("pivotMatrixUpdated")) = false;
						HX_STACK_LINE(1114)
						int _g21 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g21,"_g21");
						HX_STACK_LINE(1114)
						mesh->_currentRenderId = _g21;
						HX_STACK_LINE(1114)
						{
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localScaling;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(1114)
							result->m[(int)0] = mesh->scaling->x;
							HX_STACK_LINE(1114)
							result->m[(int)1] = (int)0;
							HX_STACK_LINE(1114)
							result->m[(int)2] = (int)0;
							HX_STACK_LINE(1114)
							result->m[(int)3] = (int)0;
							HX_STACK_LINE(1114)
							result->m[(int)4] = (int)0;
							HX_STACK_LINE(1114)
							result->m[(int)5] = mesh->scaling->y;
							HX_STACK_LINE(1114)
							result->m[(int)6] = (int)0;
							HX_STACK_LINE(1114)
							result->m[(int)7] = (int)0;
							HX_STACK_LINE(1114)
							result->m[(int)8] = (int)0;
							HX_STACK_LINE(1114)
							result->m[(int)9] = (int)0;
							HX_STACK_LINE(1114)
							result->m[(int)10] = mesh->scaling->z;
							HX_STACK_LINE(1114)
							result->m[(int)11] = (int)0;
							HX_STACK_LINE(1114)
							result->m[(int)12] = (int)0;
							HX_STACK_LINE(1114)
							result->m[(int)13] = (int)0;
							HX_STACK_LINE(1114)
							result->m[(int)14] = (int)0;
							HX_STACK_LINE(1114)
							result->m[(int)15] = 1.0;
							HX_STACK_LINE(1114)
							result;
						}
						HX_STACK_LINE(1114)
						if (((mesh->rotationQuaternion != null()))){
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion _this = mesh->rotationQuaternion;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1114)
								Float xx = (_this->x * _this->x);		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(1114)
								Float yy = (_this->y * _this->y);		HX_STACK_VAR(yy,"yy");
								HX_STACK_LINE(1114)
								Float zz = (_this->z * _this->z);		HX_STACK_VAR(zz,"zz");
								HX_STACK_LINE(1114)
								Float xy = (_this->x * _this->y);		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(1114)
								Float zw = (_this->z * _this->w);		HX_STACK_VAR(zw,"zw");
								HX_STACK_LINE(1114)
								Float zx = (_this->z * _this->x);		HX_STACK_VAR(zx,"zx");
								HX_STACK_LINE(1114)
								Float yw = (_this->y * _this->w);		HX_STACK_VAR(yw,"yw");
								HX_STACK_LINE(1114)
								Float yz = (_this->y * _this->z);		HX_STACK_VAR(yz,"yz");
								HX_STACK_LINE(1114)
								Float xw = (_this->x * _this->w);		HX_STACK_VAR(xw,"xw");
								HX_STACK_LINE(1114)
								result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
								HX_STACK_LINE(1114)
								result->m[(int)1] = (2.0 * ((xy + zw)));
								HX_STACK_LINE(1114)
								result->m[(int)2] = (2.0 * ((zx - yw)));
								HX_STACK_LINE(1114)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)4] = (2.0 * ((xy - zw)));
								HX_STACK_LINE(1114)
								result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
								HX_STACK_LINE(1114)
								result->m[(int)6] = (2.0 * ((yz + xw)));
								HX_STACK_LINE(1114)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)8] = (2.0 * ((zx + yw)));
								HX_STACK_LINE(1114)
								result->m[(int)9] = (2.0 * ((yz - xw)));
								HX_STACK_LINE(1114)
								result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
								HX_STACK_LINE(1114)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)12] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)13] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)14] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(1114)
								result;
							}
							HX_STACK_LINE(1114)
							mesh->_cache->__Field(HX_CSTRING("rotationQuaternion"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotationQuaternion);
						}
						else{
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion tempQuaternion = ::com::gamestudiohx::babylonhx::tools::math::Quaternion_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tempQuaternion,"tempQuaternion");
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion _g31;		HX_STACK_VAR(_g31,"_g31");
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									Float halfRoll = (mesh->rotation->z * 0.5);		HX_STACK_VAR(halfRoll,"halfRoll");
									HX_STACK_LINE(1114)
									Float halfPitch = (mesh->rotation->x * 0.5);		HX_STACK_VAR(halfPitch,"halfPitch");
									HX_STACK_LINE(1114)
									Float halfYaw = (mesh->rotation->y * 0.5);		HX_STACK_VAR(halfYaw,"halfYaw");
									HX_STACK_LINE(1114)
									Float sinRoll = ::Math_obj::sin(halfRoll);		HX_STACK_VAR(sinRoll,"sinRoll");
									HX_STACK_LINE(1114)
									Float cosRoll = ::Math_obj::cos(halfRoll);		HX_STACK_VAR(cosRoll,"cosRoll");
									HX_STACK_LINE(1114)
									Float sinPitch = ::Math_obj::sin(halfPitch);		HX_STACK_VAR(sinPitch,"sinPitch");
									HX_STACK_LINE(1114)
									Float cosPitch = ::Math_obj::cos(halfPitch);		HX_STACK_VAR(cosPitch,"cosPitch");
									HX_STACK_LINE(1114)
									Float sinYaw = ::Math_obj::sin(halfYaw);		HX_STACK_VAR(sinYaw,"sinYaw");
									HX_STACK_LINE(1114)
									Float cosYaw = ::Math_obj::cos(halfYaw);		HX_STACK_VAR(cosYaw,"cosYaw");
									HX_STACK_LINE(1114)
									tempQuaternion->x = (((cosYaw * sinPitch) * cosRoll) + ((sinYaw * cosPitch) * sinRoll));
									HX_STACK_LINE(1114)
									tempQuaternion->y = (((sinYaw * cosPitch) * cosRoll) - ((cosYaw * sinPitch) * sinRoll));
									HX_STACK_LINE(1114)
									tempQuaternion->z = (((cosYaw * cosPitch) * sinRoll) - ((sinYaw * sinPitch) * cosRoll));
									HX_STACK_LINE(1114)
									tempQuaternion->w = (((cosYaw * cosPitch) * cosRoll) + ((sinYaw * sinPitch) * sinRoll));
									HX_STACK_LINE(1114)
									_g31 = tempQuaternion;
								}
								HX_STACK_LINE(1114)
								tempQuaternion = _g31;
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									Float xx = (tempQuaternion->x * tempQuaternion->x);		HX_STACK_VAR(xx,"xx");
									HX_STACK_LINE(1114)
									Float yy = (tempQuaternion->y * tempQuaternion->y);		HX_STACK_VAR(yy,"yy");
									HX_STACK_LINE(1114)
									Float zz = (tempQuaternion->z * tempQuaternion->z);		HX_STACK_VAR(zz,"zz");
									HX_STACK_LINE(1114)
									Float xy = (tempQuaternion->x * tempQuaternion->y);		HX_STACK_VAR(xy,"xy");
									HX_STACK_LINE(1114)
									Float zw = (tempQuaternion->z * tempQuaternion->w);		HX_STACK_VAR(zw,"zw");
									HX_STACK_LINE(1114)
									Float zx = (tempQuaternion->z * tempQuaternion->x);		HX_STACK_VAR(zx,"zx");
									HX_STACK_LINE(1114)
									Float yw = (tempQuaternion->y * tempQuaternion->w);		HX_STACK_VAR(yw,"yw");
									HX_STACK_LINE(1114)
									Float yz = (tempQuaternion->y * tempQuaternion->z);		HX_STACK_VAR(yz,"yz");
									HX_STACK_LINE(1114)
									Float xw = (tempQuaternion->x * tempQuaternion->w);		HX_STACK_VAR(xw,"xw");
									HX_STACK_LINE(1114)
									result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
									HX_STACK_LINE(1114)
									result->m[(int)1] = (2.0 * ((xy + zw)));
									HX_STACK_LINE(1114)
									result->m[(int)2] = (2.0 * ((zx - yw)));
									HX_STACK_LINE(1114)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)4] = (2.0 * ((xy - zw)));
									HX_STACK_LINE(1114)
									result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
									HX_STACK_LINE(1114)
									result->m[(int)6] = (2.0 * ((yz + xw)));
									HX_STACK_LINE(1114)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)8] = (2.0 * ((zx + yw)));
									HX_STACK_LINE(1114)
									result->m[(int)9] = (2.0 * ((yz - xw)));
									HX_STACK_LINE(1114)
									result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
									HX_STACK_LINE(1114)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)12] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)13] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)14] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(1114)
									result;
								}
							}
							HX_STACK_LINE(1114)
							mesh->_cache->__Field(HX_CSTRING("rotation"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotation);
						}
						HX_STACK_LINE(1114)
						if ((mesh->infiniteDistance)){
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::cameras::Camera camera1 = mesh->_scene->activeCamera;		HX_STACK_VAR(camera1,"camera1");
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									result->m[(int)0] = 1.0;
									HX_STACK_LINE(1114)
									result->m[(int)1] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)2] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)4] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)5] = 1.0;
									HX_STACK_LINE(1114)
									result->m[(int)6] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)8] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)9] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)10] = 1.0;
									HX_STACK_LINE(1114)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)12] = (mesh->position->x + camera1->position->x);
									HX_STACK_LINE(1114)
									result->m[(int)13] = (mesh->position->y + camera1->position->y);
									HX_STACK_LINE(1114)
									result->m[(int)14] = (mesh->position->z + camera1->position->z);
									HX_STACK_LINE(1114)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(1114)
									result;
								}
							}
						}
						else{
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								result->m[(int)0] = 1.0;
								HX_STACK_LINE(1114)
								result->m[(int)1] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)2] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)4] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)5] = 1.0;
								HX_STACK_LINE(1114)
								result->m[(int)6] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)8] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)9] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)10] = 1.0;
								HX_STACK_LINE(1114)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(1114)
								result->m[(int)12] = mesh->position->x;
								HX_STACK_LINE(1114)
								result->m[(int)13] = mesh->position->y;
								HX_STACK_LINE(1114)
								result->m[(int)14] = mesh->position->z;
								HX_STACK_LINE(1114)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(1114)
								result;
							}
						}
						HX_STACK_LINE(1114)
						{
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_pivotMatrix;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localScaling;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								Array< Float > result = mesh->_localPivotScaling->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1114)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1114)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1114)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1114)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1114)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1114)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1114)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1114)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1114)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1114)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1114)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1114)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1114)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1114)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1114)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1114)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1114)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1114)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1114)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1114)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1114)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1114)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1114)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1114)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1114)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1114)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1114)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1114)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1114)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1114)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1114)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1114)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1114)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1114)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1114)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1114)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1114)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1114)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1114)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1114)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1114)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1114)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1114)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1114)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1114)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1114)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1114)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1114)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1114)
								result;
							}
						}
						HX_STACK_LINE(1114)
						{
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScaling;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localRotation;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1114)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1114)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1114)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1114)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1114)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1114)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1114)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1114)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1114)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1114)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1114)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1114)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1114)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1114)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1114)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1114)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1114)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1114)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1114)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1114)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1114)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1114)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1114)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1114)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1114)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1114)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1114)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1114)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1114)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1114)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1114)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1114)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1114)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1114)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1114)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1114)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1114)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1114)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1114)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1114)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1114)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1114)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1114)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1114)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1114)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1114)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1114)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1114)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1114)
								result;
							}
						}
						HX_STACK_LINE(1114)
						if (((mesh->billboardMode != ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE))){
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 localPosition;		HX_STACK_VAR(localPosition,"localPosition");
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->position;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1114)
								localPosition = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
							}
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 zero;		HX_STACK_VAR(zero,"zero");
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_scene->activeCamera->position;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1114)
								zero = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
							}
							HX_STACK_LINE(1114)
							if (((bool((mesh->parent != null())) && bool((mesh->parent->position != null()))))){
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = mesh->parent->position;		HX_STACK_VAR(otherVector,"otherVector");
									HX_STACK_LINE(1114)
									hx::AddEq(localPosition->x,otherVector->x);
									HX_STACK_LINE(1114)
									hx::AddEq(localPosition->y,otherVector->y);
									HX_STACK_LINE(1114)
									hx::AddEq(localPosition->z,otherVector->z);
								}
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1114)
									{
										HX_STACK_LINE(1114)
										result->m[(int)0] = 1.0;
										HX_STACK_LINE(1114)
										result->m[(int)1] = (int)0;
										HX_STACK_LINE(1114)
										result->m[(int)2] = (int)0;
										HX_STACK_LINE(1114)
										result->m[(int)3] = (int)0;
										HX_STACK_LINE(1114)
										result->m[(int)4] = (int)0;
										HX_STACK_LINE(1114)
										result->m[(int)5] = 1.0;
										HX_STACK_LINE(1114)
										result->m[(int)6] = (int)0;
										HX_STACK_LINE(1114)
										result->m[(int)7] = (int)0;
										HX_STACK_LINE(1114)
										result->m[(int)8] = (int)0;
										HX_STACK_LINE(1114)
										result->m[(int)9] = (int)0;
										HX_STACK_LINE(1114)
										result->m[(int)10] = 1.0;
										HX_STACK_LINE(1114)
										result->m[(int)11] = (int)0;
										HX_STACK_LINE(1114)
										result->m[(int)12] = localPosition->x;
										HX_STACK_LINE(1114)
										result->m[(int)13] = localPosition->y;
										HX_STACK_LINE(1114)
										result->m[(int)14] = localPosition->z;
										HX_STACK_LINE(1114)
										result->m[(int)15] = 1.0;
										HX_STACK_LINE(1114)
										result;
									}
								}
							}
							HX_STACK_LINE(1114)
							if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))) == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))){
								HX_STACK_LINE(1114)
								zero = mesh->_scene->activeCamera->position;
							}
							else{
								HX_STACK_LINE(1114)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_X))) != (int)0))){
									HX_STACK_LINE(1114)
									zero->x = (localPosition->x + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
								HX_STACK_LINE(1114)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Y))) != (int)0))){
									HX_STACK_LINE(1114)
									zero->y = (localPosition->y + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
								HX_STACK_LINE(1114)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Z))) != (int)0))){
									HX_STACK_LINE(1114)
									zero->z = (localPosition->z + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
							}
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 up = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Up();		HX_STACK_VAR(up,"up");
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localBillboard;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 xAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(xAxis,"xAxis");
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 yAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(yAxis,"yAxis");
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 zAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(zAxis,"zAxis");
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									zAxis->x = (zero->x - localPosition->x);
									HX_STACK_LINE(1114)
									zAxis->y = (zero->y - localPosition->y);
									HX_STACK_LINE(1114)
									zAxis->z = (zero->z - localPosition->z);
								}
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									Float len = ::Math_obj::sqrt((((zAxis->x * zAxis->x) + (zAxis->y * zAxis->y)) + (zAxis->z * zAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(1114)
									if (((len != (int)0))){
										HX_STACK_LINE(1114)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(1114)
										hx::MultEq(zAxis->x,num);
										HX_STACK_LINE(1114)
										hx::MultEq(zAxis->y,num);
										HX_STACK_LINE(1114)
										hx::MultEq(zAxis->z,num);
									}
								}
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									xAxis->x = ((up->y * zAxis->z) - (up->z * zAxis->y));
									HX_STACK_LINE(1114)
									xAxis->y = ((up->z * zAxis->x) - (up->x * zAxis->z));
									HX_STACK_LINE(1114)
									xAxis->z = ((up->x * zAxis->y) - (up->y * zAxis->x));
								}
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									Float len = ::Math_obj::sqrt((((xAxis->x * xAxis->x) + (xAxis->y * xAxis->y)) + (xAxis->z * xAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(1114)
									if (((len != (int)0))){
										HX_STACK_LINE(1114)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(1114)
										hx::MultEq(xAxis->x,num);
										HX_STACK_LINE(1114)
										hx::MultEq(xAxis->y,num);
										HX_STACK_LINE(1114)
										hx::MultEq(xAxis->z,num);
									}
								}
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									yAxis->x = ((zAxis->y * xAxis->z) - (zAxis->z * xAxis->y));
									HX_STACK_LINE(1114)
									yAxis->y = ((zAxis->z * xAxis->x) - (zAxis->x * xAxis->z));
									HX_STACK_LINE(1114)
									yAxis->z = ((zAxis->x * xAxis->y) - (zAxis->y * xAxis->x));
								}
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									Float len = ::Math_obj::sqrt((((yAxis->x * yAxis->x) + (yAxis->y * yAxis->y)) + (yAxis->z * yAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(1114)
									if (((len != (int)0))){
										HX_STACK_LINE(1114)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(1114)
										hx::MultEq(yAxis->x,num);
										HX_STACK_LINE(1114)
										hx::MultEq(yAxis->y,num);
										HX_STACK_LINE(1114)
										hx::MultEq(yAxis->z,num);
									}
								}
								HX_STACK_LINE(1114)
								Float ex = -(((((xAxis->x * localPosition->x) + (xAxis->y * localPosition->y)) + (xAxis->z * localPosition->z))));		HX_STACK_VAR(ex,"ex");
								HX_STACK_LINE(1114)
								Float ey = -(((((yAxis->x * localPosition->x) + (yAxis->y * localPosition->y)) + (yAxis->z * localPosition->z))));		HX_STACK_VAR(ey,"ey");
								HX_STACK_LINE(1114)
								Float ez = -(((((zAxis->x * localPosition->x) + (zAxis->y * localPosition->y)) + (zAxis->z * localPosition->z))));		HX_STACK_VAR(ez,"ez");
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									result->m[(int)0] = xAxis->x;
									HX_STACK_LINE(1114)
									result->m[(int)1] = yAxis->x;
									HX_STACK_LINE(1114)
									result->m[(int)2] = zAxis->x;
									HX_STACK_LINE(1114)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)4] = xAxis->y;
									HX_STACK_LINE(1114)
									result->m[(int)5] = yAxis->y;
									HX_STACK_LINE(1114)
									result->m[(int)6] = zAxis->y;
									HX_STACK_LINE(1114)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)8] = xAxis->z;
									HX_STACK_LINE(1114)
									result->m[(int)9] = yAxis->z;
									HX_STACK_LINE(1114)
									result->m[(int)10] = zAxis->z;
									HX_STACK_LINE(1114)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(1114)
									result->m[(int)12] = ex;
									HX_STACK_LINE(1114)
									result->m[(int)13] = ey;
									HX_STACK_LINE(1114)
									result->m[(int)14] = ez;
									HX_STACK_LINE(1114)
									result->m[(int)15] = (int)1;
									HX_STACK_LINE(1114)
									result;
								}
							}
							HX_STACK_LINE(1114)
							mesh->_localBillboard->m[(int)12] = mesh->_localBillboard->m[(int)13] = mesh->_localBillboard->m[(int)14] = (int)0;
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localBillboard;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
									HX_STACK_LINE(1114)
									Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
									HX_STACK_LINE(1114)
									Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
									HX_STACK_LINE(1114)
									Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
									HX_STACK_LINE(1114)
									Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
									HX_STACK_LINE(1114)
									Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
									HX_STACK_LINE(1114)
									Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
									HX_STACK_LINE(1114)
									Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
									HX_STACK_LINE(1114)
									Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
									HX_STACK_LINE(1114)
									Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
									HX_STACK_LINE(1114)
									Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
									HX_STACK_LINE(1114)
									Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
									HX_STACK_LINE(1114)
									Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
									HX_STACK_LINE(1114)
									Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
									HX_STACK_LINE(1114)
									Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
									HX_STACK_LINE(1114)
									Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
									HX_STACK_LINE(1114)
									Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
									HX_STACK_LINE(1114)
									Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
									HX_STACK_LINE(1114)
									Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
									HX_STACK_LINE(1114)
									Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
									HX_STACK_LINE(1114)
									Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
									HX_STACK_LINE(1114)
									Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
									HX_STACK_LINE(1114)
									Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
									HX_STACK_LINE(1114)
									Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
									HX_STACK_LINE(1114)
									Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
									HX_STACK_LINE(1114)
									Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
									HX_STACK_LINE(1114)
									Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
									HX_STACK_LINE(1114)
									Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
									HX_STACK_LINE(1114)
									Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
									HX_STACK_LINE(1114)
									Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
									HX_STACK_LINE(1114)
									Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
									HX_STACK_LINE(1114)
									Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
									HX_STACK_LINE(1114)
									Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
									HX_STACK_LINE(1114)
									Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
									HX_STACK_LINE(1114)
									Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
									HX_STACK_LINE(1114)
									Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
									HX_STACK_LINE(1114)
									Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
									HX_STACK_LINE(1114)
									Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
									HX_STACK_LINE(1114)
									Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
									HX_STACK_LINE(1114)
									_this->m[(int)0] = (l23 * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)4] = (l24 * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)8] = (l25 * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)12] = (l26 * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
									HX_STACK_LINE(1114)
									_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
								}
							}
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localBillboard;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1114)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1114)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1114)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1114)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1114)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1114)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1114)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1114)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1114)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1114)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1114)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1114)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1114)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1114)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1114)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1114)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1114)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1114)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1114)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1114)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1114)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1114)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1114)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1114)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1114)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1114)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1114)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1114)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1114)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1114)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1114)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1114)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1114)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1114)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1114)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1114)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1114)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1114)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1114)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1114)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1114)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1114)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1114)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1114)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1114)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1114)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1114)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1114)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1114)
									result;
								}
							}
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_rotateYByPI;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localWorld;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1114)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1114)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1114)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1114)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1114)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1114)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1114)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1114)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1114)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1114)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1114)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1114)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1114)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1114)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1114)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1114)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1114)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1114)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1114)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1114)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1114)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1114)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1114)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1114)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1114)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1114)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1114)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1114)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1114)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1114)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1114)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1114)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1114)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1114)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1114)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1114)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1114)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1114)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1114)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1114)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1114)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1114)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1114)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1114)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1114)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1114)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1114)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1114)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1114)
									result;
								}
							}
						}
						struct _Function_6_1{
							inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
								HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1114,0x7c8236a5)
								{
									HX_STACK_LINE(1114)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _g4 = mesh->parent->getWorldMatrix();		HX_STACK_VAR(_g4,"_g4");
									HX_STACK_LINE(1114)
									return (_g4 != null());
								}
								return null();
							}
						};
						HX_STACK_LINE(1114)
						if (((  (((  (((mesh->parent != null()))) ? bool(_Function_6_1::Block(mesh)) : bool(false) ))) ? bool((mesh->billboardMode == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE)) : bool(false) ))){
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1114)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1114)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1114)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1114)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1114)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1114)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1114)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1114)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1114)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1114)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1114)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1114)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1114)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1114)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1114)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1114)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1114)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1114)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1114)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1114)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1114)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1114)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1114)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1114)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1114)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1114)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1114)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1114)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1114)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1114)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1114)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1114)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1114)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1114)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1114)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1114)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1114)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1114)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1114)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1114)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1114)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1114)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1114)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1114)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1114)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1114)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1114)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1114)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1114)
									result;
								}
							}
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::tools::math::Matrix parentWorld = mesh->parent->getWorldMatrix();		HX_STACK_VAR(parentWorld,"parentWorld");
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localWorld;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1114)
								{
									HX_STACK_LINE(1114)
									Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1114)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1114)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1114)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1114)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1114)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1114)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1114)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1114)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1114)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1114)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1114)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1114)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1114)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1114)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1114)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1114)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1114)
									Float om0 = parentWorld->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1114)
									Float om1 = parentWorld->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1114)
									Float om2 = parentWorld->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1114)
									Float om3 = parentWorld->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1114)
									Float om4 = parentWorld->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1114)
									Float om5 = parentWorld->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1114)
									Float om6 = parentWorld->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1114)
									Float om7 = parentWorld->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1114)
									Float om8 = parentWorld->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1114)
									Float om9 = parentWorld->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1114)
									Float om10 = parentWorld->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1114)
									Float om11 = parentWorld->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1114)
									Float om12 = parentWorld->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1114)
									Float om13 = parentWorld->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1114)
									Float om14 = parentWorld->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1114)
									Float om15 = parentWorld->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1114)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1114)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1114)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1114)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1114)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1114)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1114)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1114)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1114)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1114)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1114)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1114)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1114)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1114)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1114)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1114)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1114)
									result;
								}
							}
						}
						else{
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1114)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1114)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1114)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1114)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1114)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1114)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1114)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1114)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1114)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1114)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1114)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1114)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1114)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1114)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1114)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1114)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1114)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1114)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1114)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1114)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1114)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1114)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1114)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1114)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1114)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1114)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1114)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1114)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1114)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1114)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1114)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1114)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1114)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1114)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1114)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1114)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1114)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1114)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1114)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1114)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1114)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1114)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1114)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1114)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1114)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1114)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1114)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1114)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1114)
								result;
							}
						}
						HX_STACK_LINE(1114)
						if (((mesh->_boundingInfo != null()))){
							HX_STACK_LINE(1114)
							Float _g5 = ::Math_obj::max(mesh->scaling->x,mesh->scaling->y);		HX_STACK_VAR(_g5,"_g5");
							HX_STACK_LINE(1114)
							mesh->_scaleFactor = _g5;
							HX_STACK_LINE(1114)
							Float _g6 = ::Math_obj::max(mesh->_scaleFactor,mesh->scaling->z);		HX_STACK_VAR(_g6,"_g6");
							HX_STACK_LINE(1114)
							mesh->_scaleFactor = _g6;
							struct _Function_7_1{
								inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
									HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1114,0x7c8236a5)
									{
										HX_STACK_LINE(1114)
										Dynamic _g7 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g7,"_g7");
										HX_STACK_LINE(1114)
										return (_g7 != null());
									}
									return null();
								}
							};
							HX_STACK_LINE(1114)
							if (((  (((mesh->parent != null()))) ? bool(_Function_7_1::Block(mesh)) : bool(false) ))){
								HX_STACK_LINE(1114)
								Dynamic _g8 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g8,"_g8");
								HX_STACK_LINE(1114)
								Float _g9 = (mesh->_scaleFactor * _g8);		HX_STACK_VAR(_g9,"_g9");
								HX_STACK_LINE(1114)
								mesh->_scaleFactor = _g9;
							}
							HX_STACK_LINE(1114)
							mesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
							HX_STACK_LINE(1114)
							{
								HX_STACK_LINE(1114)
								int _g11 = (int)0;		HX_STACK_VAR(_g11,"_g11");
								HX_STACK_LINE(1114)
								int _g4 = mesh->subMeshes->length;		HX_STACK_VAR(_g4,"_g4");
								HX_STACK_LINE(1114)
								while((true)){
									HX_STACK_LINE(1114)
									if ((!(((_g11 < _g4))))){
										HX_STACK_LINE(1114)
										break;
									}
									HX_STACK_LINE(1114)
									int subIndex = (_g11)++;		HX_STACK_VAR(subIndex,"subIndex");
									HX_STACK_LINE(1114)
									::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
									HX_STACK_LINE(1114)
									subMesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
								}
							}
						}
						HX_STACK_LINE(1114)
						{
							HX_STACK_LINE(1114)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_absolutePosition;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1114)
							_this->x = mesh->_worldMatrix->m->__get((int)12);
							HX_STACK_LINE(1114)
							_this->y = mesh->_worldMatrix->m->__get((int)13);
							HX_STACK_LINE(1114)
							_this->z = mesh->_worldMatrix->m->__get((int)14);
						}
						HX_STACK_LINE(1114)
						ret = mesh->_worldMatrix;
					}
					HX_STACK_LINE(1114)
					ret;
				}
				HX_STACK_LINE(1114)
				world = mesh->_worldMatrix;
			}
			HX_STACK_LINE(1115)
			::com::gamestudiohx::babylonhx::tools::math::Ray ray;		HX_STACK_VAR(ray,"ray");
			HX_STACK_LINE(1115)
			{
				HX_STACK_LINE(1115)
				::com::gamestudiohx::babylonhx::cameras::Camera camera1 = camera;		HX_STACK_VAR(camera1,"camera1");
				HX_STACK_LINE(1115)
				::com::gamestudiohx::babylonhx::Engine engine = _g->_engine;		HX_STACK_VAR(engine,"engine");
				HX_STACK_LINE(1115)
				if (((camera1 == null()))){
					HX_STACK_LINE(1115)
					if (((_g->activeCamera == null()))){
						HX_STACK_LINE(1115)
						HX_STACK_DO_THROW(HX_CSTRING("Active camera not set"));
					}
					HX_STACK_LINE(1115)
					camera1 = _g->activeCamera;
				}
				HX_STACK_LINE(1115)
				::com::gamestudiohx::babylonhx::tools::math::Viewport viewport;		HX_STACK_VAR(viewport,"viewport");
				HX_STACK_LINE(1115)
				{
					HX_STACK_LINE(1115)
					::com::gamestudiohx::babylonhx::tools::math::Viewport _this = _g->activeCamera->viewport;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(1115)
					int _g10 = engine->getRenderWidth();		HX_STACK_VAR(_g10,"_g10");
					HX_STACK_LINE(1115)
					int _g11 = engine->getHardwareScalingLevel();		HX_STACK_VAR(_g11,"_g11");
					HX_STACK_LINE(1115)
					int width = (_g10 * _g11);		HX_STACK_VAR(width,"width");
					HX_STACK_LINE(1115)
					int _g12 = engine->getRenderHeight();		HX_STACK_VAR(_g12,"_g12");
					HX_STACK_LINE(1115)
					int _g13 = engine->getHardwareScalingLevel();		HX_STACK_VAR(_g13,"_g13");
					HX_STACK_LINE(1115)
					int height = (_g12 * _g13);		HX_STACK_VAR(height,"height");
					HX_STACK_LINE(1115)
					viewport = ::com::gamestudiohx::babylonhx::tools::math::Viewport_obj::__new((_this->x * width),(_this->y * height),(_this->width * width),(_this->height * height));
				}
				HX_STACK_LINE(1115)
				::com::gamestudiohx::babylonhx::tools::math::Viewport viewport1;		HX_STACK_VAR(viewport1,"viewport1");
				HX_STACK_LINE(1115)
				{
					HX_STACK_LINE(1115)
					::com::gamestudiohx::babylonhx::tools::math::Viewport _this = camera1->viewport;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(1115)
					int _g14 = engine->getRenderWidth();		HX_STACK_VAR(_g14,"_g14");
					HX_STACK_LINE(1115)
					int _g15 = engine->getHardwareScalingLevel();		HX_STACK_VAR(_g15,"_g15");
					HX_STACK_LINE(1115)
					int width = (_g14 * _g15);		HX_STACK_VAR(width,"width");
					HX_STACK_LINE(1115)
					int _g16 = engine->getRenderHeight();		HX_STACK_VAR(_g16,"_g16");
					HX_STACK_LINE(1115)
					int _g17 = engine->getHardwareScalingLevel();		HX_STACK_VAR(_g17,"_g17");
					HX_STACK_LINE(1115)
					int height = (_g16 * _g17);		HX_STACK_VAR(height,"height");
					HX_STACK_LINE(1115)
					viewport1 = ::com::gamestudiohx::babylonhx::tools::math::Viewport_obj::__new((_this->x * width),(_this->y * height),(_this->width * width),(_this->height * height));
				}
				HX_STACK_LINE(1115)
				::com::gamestudiohx::babylonhx::tools::math::Matrix _g18;		HX_STACK_VAR(_g18,"_g18");
				HX_STACK_LINE(1115)
				if (((world != null()))){
					HX_STACK_LINE(1114)
					_g18 = world;
				}
				else{
					HX_STACK_LINE(1115)
					::com::gamestudiohx::babylonhx::tools::math::Matrix result = ::com::gamestudiohx::babylonhx::tools::math::Matrix_obj::__new();		HX_STACK_VAR(result,"result");
					HX_STACK_LINE(1115)
					result->m[(int)0] = 1.0;
					HX_STACK_LINE(1115)
					result->m[(int)1] = (int)0;
					HX_STACK_LINE(1115)
					result->m[(int)2] = (int)0;
					HX_STACK_LINE(1115)
					result->m[(int)3] = (int)0;
					HX_STACK_LINE(1115)
					result->m[(int)4] = (int)0;
					HX_STACK_LINE(1115)
					result->m[(int)5] = 1.0;
					HX_STACK_LINE(1115)
					result->m[(int)6] = (int)0;
					HX_STACK_LINE(1115)
					result->m[(int)7] = (int)0;
					HX_STACK_LINE(1115)
					result->m[(int)8] = (int)0;
					HX_STACK_LINE(1115)
					result->m[(int)9] = (int)0;
					HX_STACK_LINE(1115)
					result->m[(int)10] = 1.0;
					HX_STACK_LINE(1115)
					result->m[(int)11] = (int)0;
					HX_STACK_LINE(1115)
					result->m[(int)12] = (int)0;
					HX_STACK_LINE(1115)
					result->m[(int)13] = (int)0;
					HX_STACK_LINE(1115)
					result->m[(int)14] = (int)0;
					HX_STACK_LINE(1115)
					result->m[(int)15] = 1.0;
					HX_STACK_LINE(1115)
					_g18 = result;
				}
				HX_STACK_LINE(1115)
				::com::gamestudiohx::babylonhx::tools::math::Matrix _g23;		HX_STACK_VAR(_g23,"_g23");
				HX_STACK_LINE(1115)
				{
					HX_STACK_LINE(1115)
					::com::gamestudiohx::babylonhx::tools::math::Matrix _g20;		HX_STACK_VAR(_g20,"_g20");
					HX_STACK_LINE(1115)
					{
						HX_STACK_LINE(1115)
						bool force = false;		HX_STACK_VAR(force,"force");
						HX_STACK_LINE(1115)
						if ((!(((  ((!(force))) ? bool(camera1->_isSynchronizedViewMatrix()) : bool(false) ))))){
							HX_STACK_LINE(1115)
							camera1->_syncChildFlag();
							HX_STACK_LINE(1115)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _g19 = camera1->_getViewMatrix();		HX_STACK_VAR(_g19,"_g19");
							HX_STACK_LINE(1115)
							camera1->_computedViewMatrix = _g19;
						}
						HX_STACK_LINE(1115)
						_g20 = camera1->_computedViewMatrix;
					}
					HX_STACK_LINE(1115)
					camera1->_computedViewMatrix = _g20;
					struct _Function_5_1{
						inline static bool Block( ::com::gamestudiohx::babylonhx::cameras::Camera &camera1){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1115,0x7c8236a5)
							{
								HX_STACK_LINE(1115)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _g21 = camera1->parent->getWorldMatrix();		HX_STACK_VAR(_g21,"_g21");
								HX_STACK_LINE(1115)
								return (_g21 == null());
							}
							return null();
						}
					};
					struct _Function_5_2{
						inline static bool Block( ::com::gamestudiohx::babylonhx::cameras::Camera &camera1){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1115,0x7c8236a5)
							{
								HX_STACK_LINE(1115)
								return (  ((!(camera1->hasNewParent(null())))) ? bool(camera1->parent->isSynchronized(null())) : bool(false) );
							}
							return null();
						}
					};
					HX_STACK_LINE(1115)
					if ((!(((  ((!(((  ((!(((camera1->parent == null()))))) ? bool(_Function_5_1::Block(camera1)) : bool(true) ))))) ? bool(_Function_5_2::Block(camera1)) : bool(true) ))))){
						HX_STACK_LINE(1115)
						if (((camera1->_worldMatrix == null()))){
							HX_STACK_LINE(1115)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _g22;		HX_STACK_VAR(_g22,"_g22");
							HX_STACK_LINE(1115)
							{
								HX_STACK_LINE(1115)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = ::com::gamestudiohx::babylonhx::tools::math::Matrix_obj::__new();		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1115)
								result->m[(int)0] = 1.0;
								HX_STACK_LINE(1115)
								result->m[(int)1] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)2] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)4] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)5] = 1.0;
								HX_STACK_LINE(1115)
								result->m[(int)6] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)8] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)9] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)10] = 1.0;
								HX_STACK_LINE(1115)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)12] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)13] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)14] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(1115)
								_g22 = result;
							}
							HX_STACK_LINE(1115)
							camera1->_worldMatrix = _g22;
						}
						HX_STACK_LINE(1115)
						{
							HX_STACK_LINE(1115)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = camera1->_computedViewMatrix;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1115)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = camera1->_worldMatrix;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1115)
							Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
							HX_STACK_LINE(1115)
							Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
							HX_STACK_LINE(1115)
							Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
							HX_STACK_LINE(1115)
							Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
							HX_STACK_LINE(1115)
							Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
							HX_STACK_LINE(1115)
							Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
							HX_STACK_LINE(1115)
							Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
							HX_STACK_LINE(1115)
							Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
							HX_STACK_LINE(1115)
							Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
							HX_STACK_LINE(1115)
							Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
							HX_STACK_LINE(1115)
							Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
							HX_STACK_LINE(1115)
							Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
							HX_STACK_LINE(1115)
							Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
							HX_STACK_LINE(1115)
							Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
							HX_STACK_LINE(1115)
							Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
							HX_STACK_LINE(1115)
							Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
							HX_STACK_LINE(1115)
							Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
							HX_STACK_LINE(1115)
							Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
							HX_STACK_LINE(1115)
							Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
							HX_STACK_LINE(1115)
							Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
							HX_STACK_LINE(1115)
							Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
							HX_STACK_LINE(1115)
							Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
							HX_STACK_LINE(1115)
							Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
							HX_STACK_LINE(1115)
							Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
							HX_STACK_LINE(1115)
							Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
							HX_STACK_LINE(1115)
							Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
							HX_STACK_LINE(1115)
							Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
							HX_STACK_LINE(1115)
							Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
							HX_STACK_LINE(1115)
							Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
							HX_STACK_LINE(1115)
							Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
							HX_STACK_LINE(1115)
							Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
							HX_STACK_LINE(1115)
							Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
							HX_STACK_LINE(1115)
							Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
							HX_STACK_LINE(1115)
							Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
							HX_STACK_LINE(1115)
							Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
							HX_STACK_LINE(1115)
							Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
							HX_STACK_LINE(1115)
							Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
							HX_STACK_LINE(1115)
							Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
							HX_STACK_LINE(1115)
							Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
							HX_STACK_LINE(1115)
							other->m[(int)0] = (l23 * l27);
							HX_STACK_LINE(1115)
							other->m[(int)4] = (l24 * l27);
							HX_STACK_LINE(1115)
							other->m[(int)8] = (l25 * l27);
							HX_STACK_LINE(1115)
							other->m[(int)12] = (l26 * l27);
							HX_STACK_LINE(1115)
							other->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
							HX_STACK_LINE(1115)
							other->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
							HX_STACK_LINE(1115)
							other->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
							HX_STACK_LINE(1115)
							other->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
							HX_STACK_LINE(1115)
							other->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
							HX_STACK_LINE(1115)
							other->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
							HX_STACK_LINE(1115)
							other->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
							HX_STACK_LINE(1115)
							other->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
							HX_STACK_LINE(1115)
							other->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
							HX_STACK_LINE(1115)
							other->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
							HX_STACK_LINE(1115)
							other->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
							HX_STACK_LINE(1115)
							other->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
						}
						HX_STACK_LINE(1115)
						{
							HX_STACK_LINE(1115)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = camera1->_worldMatrix;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1115)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = camera1->parent->getWorldMatrix();		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1115)
							{
								HX_STACK_LINE(1115)
								Array< Float > result = camera1->_computedViewMatrix->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1115)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1115)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1115)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1115)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1115)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1115)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1115)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1115)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1115)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1115)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1115)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1115)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1115)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1115)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1115)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1115)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1115)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1115)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1115)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1115)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1115)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1115)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1115)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1115)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1115)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1115)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1115)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1115)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1115)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1115)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1115)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1115)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1115)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1115)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1115)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1115)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1115)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1115)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1115)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1115)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1115)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1115)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1115)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1115)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1115)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1115)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1115)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1115)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1115)
								result;
							}
						}
						HX_STACK_LINE(1115)
						{
							HX_STACK_LINE(1115)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = camera1->_computedViewMatrix;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1115)
							{
								HX_STACK_LINE(1115)
								Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
								HX_STACK_LINE(1115)
								Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
								HX_STACK_LINE(1115)
								Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
								HX_STACK_LINE(1115)
								Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
								HX_STACK_LINE(1115)
								Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
								HX_STACK_LINE(1115)
								Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
								HX_STACK_LINE(1115)
								Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
								HX_STACK_LINE(1115)
								Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
								HX_STACK_LINE(1115)
								Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
								HX_STACK_LINE(1115)
								Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
								HX_STACK_LINE(1115)
								Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
								HX_STACK_LINE(1115)
								Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
								HX_STACK_LINE(1115)
								Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
								HX_STACK_LINE(1115)
								Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
								HX_STACK_LINE(1115)
								Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
								HX_STACK_LINE(1115)
								Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
								HX_STACK_LINE(1115)
								Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
								HX_STACK_LINE(1115)
								Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
								HX_STACK_LINE(1115)
								Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
								HX_STACK_LINE(1115)
								Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
								HX_STACK_LINE(1115)
								Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
								HX_STACK_LINE(1115)
								Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
								HX_STACK_LINE(1115)
								Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
								HX_STACK_LINE(1115)
								Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
								HX_STACK_LINE(1115)
								Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
								HX_STACK_LINE(1115)
								Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
								HX_STACK_LINE(1115)
								Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
								HX_STACK_LINE(1115)
								Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
								HX_STACK_LINE(1115)
								Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
								HX_STACK_LINE(1115)
								Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
								HX_STACK_LINE(1115)
								Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
								HX_STACK_LINE(1115)
								Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
								HX_STACK_LINE(1115)
								Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
								HX_STACK_LINE(1115)
								Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
								HX_STACK_LINE(1115)
								Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
								HX_STACK_LINE(1115)
								Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
								HX_STACK_LINE(1115)
								Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
								HX_STACK_LINE(1115)
								Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
								HX_STACK_LINE(1115)
								Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
								HX_STACK_LINE(1115)
								_this->m[(int)0] = (l23 * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)4] = (l24 * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)8] = (l25 * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)12] = (l26 * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
								HX_STACK_LINE(1115)
								_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
							}
						}
					}
					HX_STACK_LINE(1115)
					_g23 = camera1->_computedViewMatrix;
				}
				HX_STACK_LINE(1115)
				::com::gamestudiohx::babylonhx::tools::math::Matrix _g27;		HX_STACK_VAR(_g27,"_g27");
				HX_STACK_LINE(1115)
				{
					HX_STACK_LINE(1115)
					bool force = false;		HX_STACK_VAR(force,"force");
					HX_STACK_LINE(1115)
					if ((!(((  ((!(force))) ? bool(camera1->_isSynchronizedProjectionMatrix()) : bool(false) ))))){
						HX_STACK_LINE(1115)
						::com::gamestudiohx::babylonhx::Engine engine1 = camera1->_scene->getEngine();		HX_STACK_VAR(engine1,"engine1");
						HX_STACK_LINE(1115)
						if (((camera1->mode == ::com::gamestudiohx::babylonhx::cameras::Camera_obj::PERSPECTIVE_CAMERA))){
							HX_STACK_LINE(1115)
							Float aspect = engine1->getAspectRatio(camera1);		HX_STACK_VAR(aspect,"aspect");
							HX_STACK_LINE(1115)
							Float znear = camera1->minZ;		HX_STACK_VAR(znear,"znear");
							HX_STACK_LINE(1115)
							Float zfar = camera1->maxZ;		HX_STACK_VAR(zfar,"zfar");
							HX_STACK_LINE(1115)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = camera1->_projectionMatrix;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(1115)
							Float _g24 = ::Math_obj::tan((camera1->fov * 0.5));		HX_STACK_VAR(_g24,"_g24");
							HX_STACK_LINE(1115)
							Float tan = (Float(1.0) / Float(_g24));		HX_STACK_VAR(tan,"tan");
							HX_STACK_LINE(1115)
							result->m[(int)0] = (Float(tan) / Float(aspect));
							HX_STACK_LINE(1115)
							result->m[(int)1] = result->m[(int)2] = result->m[(int)3] = 0.0;
							HX_STACK_LINE(1115)
							result->m[(int)5] = tan;
							HX_STACK_LINE(1115)
							result->m[(int)4] = result->m[(int)6] = result->m[(int)7] = 0.0;
							HX_STACK_LINE(1115)
							result->m[(int)8] = result->m[(int)9] = 0.0;
							HX_STACK_LINE(1115)
							result->m[(int)10] = (Float(-(zfar)) / Float(((znear - zfar))));
							HX_STACK_LINE(1115)
							result->m[(int)11] = 1.0;
							HX_STACK_LINE(1115)
							result->m[(int)12] = result->m[(int)13] = result->m[(int)15] = 0.0;
							HX_STACK_LINE(1115)
							result->m[(int)14] = (Float((znear * zfar)) / Float(((znear - zfar))));
							HX_STACK_LINE(1115)
							result;
						}
						else{
							HX_STACK_LINE(1115)
							int _g25 = engine1->getRenderWidth();		HX_STACK_VAR(_g25,"_g25");
							HX_STACK_LINE(1115)
							Float halfWidth = (Float(_g25) / Float(2.0));		HX_STACK_VAR(halfWidth,"halfWidth");
							HX_STACK_LINE(1115)
							int _g26 = engine1->getRenderHeight();		HX_STACK_VAR(_g26,"_g26");
							HX_STACK_LINE(1115)
							Float halfHeight = (Float(_g26) / Float(2.0));		HX_STACK_VAR(halfHeight,"halfHeight");
							HX_STACK_LINE(1115)
							{
								HX_STACK_LINE(1115)
								Float left;		HX_STACK_VAR(left,"left");
								HX_STACK_LINE(1115)
								if (((camera1->orthoLeft == null()))){
									HX_STACK_LINE(1115)
									left = -(halfWidth);
								}
								else{
									HX_STACK_LINE(1115)
									left = camera1->orthoLeft;
								}
								HX_STACK_LINE(1115)
								Float right;		HX_STACK_VAR(right,"right");
								HX_STACK_LINE(1115)
								if (((camera1->orthoRight == null()))){
									HX_STACK_LINE(1115)
									right = halfWidth;
								}
								else{
									HX_STACK_LINE(1115)
									right = camera1->orthoRight;
								}
								HX_STACK_LINE(1115)
								Float bottom;		HX_STACK_VAR(bottom,"bottom");
								HX_STACK_LINE(1115)
								if (((camera1->orthoBottom == null()))){
									HX_STACK_LINE(1115)
									bottom = -(halfHeight);
								}
								else{
									HX_STACK_LINE(1115)
									bottom = camera1->orthoBottom;
								}
								HX_STACK_LINE(1115)
								Float top;		HX_STACK_VAR(top,"top");
								HX_STACK_LINE(1115)
								if (((camera1->orthoTop == null()))){
									HX_STACK_LINE(1115)
									top = halfHeight;
								}
								else{
									HX_STACK_LINE(1115)
									top = camera1->orthoTop;
								}
								HX_STACK_LINE(1115)
								Float znear = camera1->minZ;		HX_STACK_VAR(znear,"znear");
								HX_STACK_LINE(1115)
								Float zfar = camera1->maxZ;		HX_STACK_VAR(zfar,"zfar");
								HX_STACK_LINE(1115)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = camera1->_projectionMatrix;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1115)
								result->m[(int)0] = (Float(2.0) / Float(((right - left))));
								HX_STACK_LINE(1115)
								result->m[(int)1] = result->m[(int)2] = result->m[(int)3] = result->m[(int)4] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)5] = (Float(2.0) / Float(((top - bottom))));
								HX_STACK_LINE(1115)
								result->m[(int)6] = result->m[(int)7] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)8] = result->m[(int)9] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)10] = (Float((int)-1) / Float(((znear - zfar))));
								HX_STACK_LINE(1115)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(1115)
								result->m[(int)12] = (Float(((left + right))) / Float(((left - right))));
								HX_STACK_LINE(1115)
								result->m[(int)13] = (Float(((top + bottom))) / Float(((bottom - top))));
								HX_STACK_LINE(1115)
								result->m[(int)14] = (Float(znear) / Float(((znear - zfar))));
								HX_STACK_LINE(1115)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(1115)
								result;
							}
						}
					}
					HX_STACK_LINE(1115)
					_g27 = camera1->_projectionMatrix;
				}
				HX_STACK_LINE(1115)
				ray = ::com::gamestudiohx::babylonhx::tools::math::Ray_obj::CreateNew(x,y,viewport1->width,viewport1->height,_g18,_g23,_g27);
			}
			HX_STACK_LINE(1114)
			::com::gamestudiohx::babylonhx::collisions::PickingInfo result = mesh->intersects(ray,fastCheck);		HX_STACK_VAR(result,"result");
			HX_STACK_LINE(1114)
			if ((!(result->hit))){
				HX_STACK_LINE(1114)
				continue;
			}
			HX_STACK_LINE(1114)
			if (((bool((bool(!(fastCheck)) && bool((pickingInfo != null())))) && bool((result->distance >= pickingInfo->distance))))){
				HX_STACK_LINE(1114)
				continue;
			}
			HX_STACK_LINE(1114)
			pickingInfo = result;
			HX_STACK_LINE(1114)
			if ((fastCheck)){
				HX_STACK_LINE(1114)
				break;
			}
		}
	}
	HX_STACK_LINE(1114)
	if (((pickingInfo == null()))){
		HX_STACK_LINE(1114)
		return ::com::gamestudiohx::babylonhx::collisions::PickingInfo_obj::__new();
	}
	else{
		HX_STACK_LINE(1114)
		return pickingInfo;
	}
	HX_STACK_LINE(1114)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC5(Scene_obj,pick,return )

::com::gamestudiohx::babylonhx::collisions::PickingInfo Scene_obj::pickWithRay( ::com::gamestudiohx::babylonhx::tools::math::Ray ray,Dynamic predicate,bool fastCheck){
	HX_STACK_FRAME("com.gamestudiohx.babylonhx.Scene","pickWithRay",0x4fec5eef,"com.gamestudiohx.babylonhx.Scene.pickWithRay","com/gamestudiohx/babylonhx/Scene.hx",1119,0x7c8236a5)
	HX_STACK_THIS(this)
	HX_STACK_ARG(ray,"ray")
	HX_STACK_ARG(predicate,"predicate")
	HX_STACK_ARG(fastCheck,"fastCheck")
	HX_STACK_LINE(1119)
	Array< ::Dynamic > ray1 = Array_obj< ::Dynamic >::__new().Add(ray);		HX_STACK_VAR(ray1,"ray1");
	HX_STACK_LINE(1119)
	Array< ::Dynamic > _g = Array_obj< ::Dynamic >::__new().Add(hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(_g,"_g");

	HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_Function_1_1,Array< ::Dynamic >,ray1,Array< ::Dynamic >,_g)
	::com::gamestudiohx::babylonhx::tools::math::Ray run(::com::gamestudiohx::babylonhx::tools::math::Matrix world){
		HX_STACK_FRAME("*","_Function_1_1",0x5200ed37,"*._Function_1_1","com/gamestudiohx/babylonhx/Scene.hx",1120,0x7c8236a5)
		HX_STACK_ARG(world,"world")
		{
			HX_STACK_LINE(1121)
			if (((_g->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::Scene >()->_pickWithRayInverseMatrix == null()))){
				HX_STACK_LINE(1122)
				::com::gamestudiohx::babylonhx::tools::math::Matrix _g1;		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(1122)
				{
					HX_STACK_LINE(1122)
					::com::gamestudiohx::babylonhx::tools::math::Matrix result = ::com::gamestudiohx::babylonhx::tools::math::Matrix_obj::__new();		HX_STACK_VAR(result,"result");
					HX_STACK_LINE(1122)
					result->m[(int)0] = 1.0;
					HX_STACK_LINE(1122)
					result->m[(int)1] = (int)0;
					HX_STACK_LINE(1122)
					result->m[(int)2] = (int)0;
					HX_STACK_LINE(1122)
					result->m[(int)3] = (int)0;
					HX_STACK_LINE(1122)
					result->m[(int)4] = (int)0;
					HX_STACK_LINE(1122)
					result->m[(int)5] = 1.0;
					HX_STACK_LINE(1122)
					result->m[(int)6] = (int)0;
					HX_STACK_LINE(1122)
					result->m[(int)7] = (int)0;
					HX_STACK_LINE(1122)
					result->m[(int)8] = (int)0;
					HX_STACK_LINE(1122)
					result->m[(int)9] = (int)0;
					HX_STACK_LINE(1122)
					result->m[(int)10] = 1.0;
					HX_STACK_LINE(1122)
					result->m[(int)11] = (int)0;
					HX_STACK_LINE(1122)
					result->m[(int)12] = (int)0;
					HX_STACK_LINE(1122)
					result->m[(int)13] = (int)0;
					HX_STACK_LINE(1122)
					result->m[(int)14] = (int)0;
					HX_STACK_LINE(1122)
					result->m[(int)15] = 1.0;
					HX_STACK_LINE(1122)
					_g1 = result;
				}
				HX_STACK_LINE(1122)
				_g->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::Scene >()->_pickWithRayInverseMatrix = _g1;
			}
			HX_STACK_LINE(1124)
			{
				HX_STACK_LINE(1124)
				::com::gamestudiohx::babylonhx::tools::math::Matrix other = _g->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::Scene >()->_pickWithRayInverseMatrix;		HX_STACK_VAR(other,"other");
				HX_STACK_LINE(1124)
				Float l1 = world->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
				HX_STACK_LINE(1124)
				Float l2 = world->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
				HX_STACK_LINE(1124)
				Float l3 = world->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
				HX_STACK_LINE(1124)
				Float l4 = world->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
				HX_STACK_LINE(1124)
				Float l5 = world->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
				HX_STACK_LINE(1124)
				Float l6 = world->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
				HX_STACK_LINE(1124)
				Float l7 = world->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
				HX_STACK_LINE(1124)
				Float l8 = world->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
				HX_STACK_LINE(1124)
				Float l9 = world->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
				HX_STACK_LINE(1124)
				Float l10 = world->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
				HX_STACK_LINE(1124)
				Float l11 = world->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
				HX_STACK_LINE(1124)
				Float l12 = world->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
				HX_STACK_LINE(1124)
				Float l13 = world->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
				HX_STACK_LINE(1124)
				Float l14 = world->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
				HX_STACK_LINE(1124)
				Float l15 = world->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
				HX_STACK_LINE(1124)
				Float l16 = world->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
				HX_STACK_LINE(1124)
				Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
				HX_STACK_LINE(1124)
				Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
				HX_STACK_LINE(1124)
				Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
				HX_STACK_LINE(1124)
				Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
				HX_STACK_LINE(1124)
				Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
				HX_STACK_LINE(1124)
				Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
				HX_STACK_LINE(1124)
				Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
				HX_STACK_LINE(1124)
				Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
				HX_STACK_LINE(1124)
				Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
				HX_STACK_LINE(1124)
				Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
				HX_STACK_LINE(1124)
				Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
				HX_STACK_LINE(1124)
				Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
				HX_STACK_LINE(1124)
				Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
				HX_STACK_LINE(1124)
				Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
				HX_STACK_LINE(1124)
				Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
				HX_STACK_LINE(1124)
				Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
				HX_STACK_LINE(1124)
				Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
				HX_STACK_LINE(1124)
				Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
				HX_STACK_LINE(1124)
				Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
				HX_STACK_LINE(1124)
				Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
				HX_STACK_LINE(1124)
				Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
				HX_STACK_LINE(1124)
				Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
				HX_STACK_LINE(1124)
				Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
				HX_STACK_LINE(1124)
				other->m[(int)0] = (l23 * l27);
				HX_STACK_LINE(1124)
				other->m[(int)4] = (l24 * l27);
				HX_STACK_LINE(1124)
				other->m[(int)8] = (l25 * l27);
				HX_STACK_LINE(1124)
				other->m[(int)12] = (l26 * l27);
				HX_STACK_LINE(1124)
				other->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
				HX_STACK_LINE(1124)
				other->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
				HX_STACK_LINE(1124)
				other->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
				HX_STACK_LINE(1124)
				other->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
				HX_STACK_LINE(1124)
				other->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
				HX_STACK_LINE(1124)
				other->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
				HX_STACK_LINE(1124)
				other->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
				HX_STACK_LINE(1124)
				other->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
				HX_STACK_LINE(1124)
				other->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
				HX_STACK_LINE(1124)
				other->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
				HX_STACK_LINE(1124)
				other->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
				HX_STACK_LINE(1124)
				other->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
			}
			HX_STACK_LINE(1125)
			::com::gamestudiohx::babylonhx::tools::math::Matrix matrix = _g->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::Scene >()->_pickWithRayInverseMatrix;		HX_STACK_VAR(matrix,"matrix");
			HX_STACK_LINE(1125)
			::com::gamestudiohx::babylonhx::tools::math::Vector3 newOrigin;		HX_STACK_VAR(newOrigin,"newOrigin");
			HX_STACK_LINE(1125)
			{
				HX_STACK_LINE(1125)
				::com::gamestudiohx::babylonhx::tools::math::Vector3 vector = ray1->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Ray >()->origin;		HX_STACK_VAR(vector,"vector");
				HX_STACK_LINE(1125)
				::com::gamestudiohx::babylonhx::tools::math::Vector3 result = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(result,"result");
				HX_STACK_LINE(1125)
				{
					HX_STACK_LINE(1125)
					Float x = ((((vector->x * matrix->m->__get((int)0)) + (vector->y * matrix->m->__get((int)4))) + (vector->z * matrix->m->__get((int)8))) + matrix->m->__get((int)12));		HX_STACK_VAR(x,"x");
					HX_STACK_LINE(1125)
					Float y = ((((vector->x * matrix->m->__get((int)1)) + (vector->y * matrix->m->__get((int)5))) + (vector->z * matrix->m->__get((int)9))) + matrix->m->__get((int)13));		HX_STACK_VAR(y,"y");
					HX_STACK_LINE(1125)
					Float z = ((((vector->x * matrix->m->__get((int)2)) + (vector->y * matrix->m->__get((int)6))) + (vector->z * matrix->m->__get((int)10))) + matrix->m->__get((int)14));		HX_STACK_VAR(z,"z");
					HX_STACK_LINE(1125)
					Float w = ((((vector->x * matrix->m->__get((int)3)) + (vector->y * matrix->m->__get((int)7))) + (vector->z * matrix->m->__get((int)11))) + matrix->m->__get((int)15));		HX_STACK_VAR(w,"w");
					HX_STACK_LINE(1125)
					result->x = (Float(x) / Float(w));
					HX_STACK_LINE(1125)
					result->y = (Float(y) / Float(w));
					HX_STACK_LINE(1125)
					result->z = (Float(z) / Float(w));
				}
				HX_STACK_LINE(1125)
				newOrigin = result;
			}
			HX_STACK_LINE(1125)
			::com::gamestudiohx::babylonhx::tools::math::Vector3 newDirection;		HX_STACK_VAR(newDirection,"newDirection");
			HX_STACK_LINE(1125)
			{
				HX_STACK_LINE(1125)
				::com::gamestudiohx::babylonhx::tools::math::Vector3 vector = ray1->__get((int)0).StaticCast< ::com::gamestudiohx::babylonhx::tools::math::Ray >()->direction;		HX_STACK_VAR(vector,"vector");
				HX_STACK_LINE(1125)
				::com::gamestudiohx::babylonhx::tools::math::Vector3 result = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(result,"result");
				HX_STACK_LINE(1125)
				{
					HX_STACK_LINE(1125)
					result->x = (((vector->x * matrix->m->__get((int)0)) + (vector->y * matrix->m->__get((int)4))) + (vector->z * matrix->m->__get((int)8)));
					HX_STACK_LINE(1125)
					result->y = (((vector->x * matrix->m->__get((int)1)) + (vector->y * matrix->m->__get((int)5))) + (vector->z * matrix->m->__get((int)9)));
					HX_STACK_LINE(1125)
					result->z = (((vector->x * matrix->m->__get((int)2)) + (vector->y * matrix->m->__get((int)6))) + (vector->z * matrix->m->__get((int)10)));
				}
				HX_STACK_LINE(1125)
				newDirection = result;
			}
			HX_STACK_LINE(1125)
			return ::com::gamestudiohx::babylonhx::tools::math::Ray_obj::__new(newOrigin,newDirection);
		}
		return null();
	}
	HX_END_LOCAL_FUNC1(return)

	HX_STACK_LINE(1120)
	Dynamic param =  Dynamic(new _Function_1_1(ray1,_g));		HX_STACK_VAR(param,"param");
	HX_STACK_LINE(1128)
	::com::gamestudiohx::babylonhx::collisions::PickingInfo pickingInfo = null();		HX_STACK_VAR(pickingInfo,"pickingInfo");
	HX_STACK_LINE(1128)
	{
		HX_STACK_LINE(1128)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(1128)
		int _g2 = this->meshes->length;		HX_STACK_VAR(_g2,"_g2");
		HX_STACK_LINE(1128)
		while((true)){
			HX_STACK_LINE(1128)
			if ((!(((_g1 < _g2))))){
				HX_STACK_LINE(1128)
				break;
			}
			HX_STACK_LINE(1128)
			int meshIndex = (_g1)++;		HX_STACK_VAR(meshIndex,"meshIndex");
			HX_STACK_LINE(1128)
			::com::gamestudiohx::babylonhx::mesh::AbstractMesh mesh = this->meshes->__get(meshIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::AbstractMesh >();		HX_STACK_VAR(mesh,"mesh");
			HX_STACK_LINE(1128)
			if (((predicate != null()))){
				HX_STACK_LINE(1128)
				if ((!(predicate(mesh).Cast< bool >()))){
					HX_STACK_LINE(1128)
					continue;
				}
			}
			else{
				HX_STACK_LINE(1128)
				if (((  ((!(((  ((!((!(mesh->isEnabled()))))) ? bool(!(mesh->isVisible)) : bool(true) ))))) ? bool(!(mesh->isPickable)) : bool(true) ))){
					HX_STACK_LINE(1128)
					continue;
				}
			}
			HX_STACK_LINE(1128)
			::com::gamestudiohx::babylonhx::tools::math::Matrix world;		HX_STACK_VAR(world,"world");
			HX_STACK_LINE(1128)
			{
				HX_STACK_LINE(1128)
				int _g11 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g11,"_g11");
				HX_STACK_LINE(1128)
				if (((mesh->_currentRenderId != _g11))){
					HX_STACK_LINE(1128)
					bool force = false;		HX_STACK_VAR(force,"force");
					HX_STACK_LINE(1128)
					::com::gamestudiohx::babylonhx::tools::math::Matrix ret = mesh->_worldMatrix;		HX_STACK_VAR(ret,"ret");
					struct _Function_5_1{
						inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1128,0x7c8236a5)
							{
								HX_STACK_LINE(1128)
								int _g21 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g21,"_g21");
								HX_STACK_LINE(1128)
								return (  ((!(((mesh->_currentRenderId == _g21))))) ? bool(mesh->isSynchronized(null())) : bool(true) );
							}
							return null();
						}
					};
					HX_STACK_LINE(1128)
					if (((  ((!(force))) ? bool(_Function_5_1::Block(mesh)) : bool(false) ))){
						HX_STACK_LINE(1128)
						mesh->_childrenFlag = (int)0;
					}
					else{
						HX_STACK_LINE(1128)
						mesh->_childrenFlag = (int)1;
						HX_STACK_LINE(1128)
						mesh->_cache->__Field(HX_CSTRING("position"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->position);
						HX_STACK_LINE(1128)
						mesh->_cache->__Field(HX_CSTRING("scaling"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->scaling);
						HX_STACK_LINE(1128)
						mesh->_cache->__FieldRef(HX_CSTRING("pivotMatrixUpdated")) = false;
						HX_STACK_LINE(1128)
						int _g3 = mesh->_scene->getRenderId();		HX_STACK_VAR(_g3,"_g3");
						HX_STACK_LINE(1128)
						mesh->_currentRenderId = _g3;
						HX_STACK_LINE(1128)
						{
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localScaling;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(1128)
							result->m[(int)0] = mesh->scaling->x;
							HX_STACK_LINE(1128)
							result->m[(int)1] = (int)0;
							HX_STACK_LINE(1128)
							result->m[(int)2] = (int)0;
							HX_STACK_LINE(1128)
							result->m[(int)3] = (int)0;
							HX_STACK_LINE(1128)
							result->m[(int)4] = (int)0;
							HX_STACK_LINE(1128)
							result->m[(int)5] = mesh->scaling->y;
							HX_STACK_LINE(1128)
							result->m[(int)6] = (int)0;
							HX_STACK_LINE(1128)
							result->m[(int)7] = (int)0;
							HX_STACK_LINE(1128)
							result->m[(int)8] = (int)0;
							HX_STACK_LINE(1128)
							result->m[(int)9] = (int)0;
							HX_STACK_LINE(1128)
							result->m[(int)10] = mesh->scaling->z;
							HX_STACK_LINE(1128)
							result->m[(int)11] = (int)0;
							HX_STACK_LINE(1128)
							result->m[(int)12] = (int)0;
							HX_STACK_LINE(1128)
							result->m[(int)13] = (int)0;
							HX_STACK_LINE(1128)
							result->m[(int)14] = (int)0;
							HX_STACK_LINE(1128)
							result->m[(int)15] = 1.0;
							HX_STACK_LINE(1128)
							result;
						}
						HX_STACK_LINE(1128)
						if (((mesh->rotationQuaternion != null()))){
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion _this = mesh->rotationQuaternion;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1128)
								Float xx = (_this->x * _this->x);		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(1128)
								Float yy = (_this->y * _this->y);		HX_STACK_VAR(yy,"yy");
								HX_STACK_LINE(1128)
								Float zz = (_this->z * _this->z);		HX_STACK_VAR(zz,"zz");
								HX_STACK_LINE(1128)
								Float xy = (_this->x * _this->y);		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(1128)
								Float zw = (_this->z * _this->w);		HX_STACK_VAR(zw,"zw");
								HX_STACK_LINE(1128)
								Float zx = (_this->z * _this->x);		HX_STACK_VAR(zx,"zx");
								HX_STACK_LINE(1128)
								Float yw = (_this->y * _this->w);		HX_STACK_VAR(yw,"yw");
								HX_STACK_LINE(1128)
								Float yz = (_this->y * _this->z);		HX_STACK_VAR(yz,"yz");
								HX_STACK_LINE(1128)
								Float xw = (_this->x * _this->w);		HX_STACK_VAR(xw,"xw");
								HX_STACK_LINE(1128)
								result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
								HX_STACK_LINE(1128)
								result->m[(int)1] = (2.0 * ((xy + zw)));
								HX_STACK_LINE(1128)
								result->m[(int)2] = (2.0 * ((zx - yw)));
								HX_STACK_LINE(1128)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)4] = (2.0 * ((xy - zw)));
								HX_STACK_LINE(1128)
								result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
								HX_STACK_LINE(1128)
								result->m[(int)6] = (2.0 * ((yz + xw)));
								HX_STACK_LINE(1128)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)8] = (2.0 * ((zx + yw)));
								HX_STACK_LINE(1128)
								result->m[(int)9] = (2.0 * ((yz - xw)));
								HX_STACK_LINE(1128)
								result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
								HX_STACK_LINE(1128)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)12] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)13] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)14] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(1128)
								result;
							}
							HX_STACK_LINE(1128)
							mesh->_cache->__Field(HX_CSTRING("rotationQuaternion"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotationQuaternion);
						}
						else{
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localRotation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion tempQuaternion = ::com::gamestudiohx::babylonhx::tools::math::Quaternion_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tempQuaternion,"tempQuaternion");
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Quaternion _g4;		HX_STACK_VAR(_g4,"_g4");
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									Float halfRoll = (mesh->rotation->z * 0.5);		HX_STACK_VAR(halfRoll,"halfRoll");
									HX_STACK_LINE(1128)
									Float halfPitch = (mesh->rotation->x * 0.5);		HX_STACK_VAR(halfPitch,"halfPitch");
									HX_STACK_LINE(1128)
									Float halfYaw = (mesh->rotation->y * 0.5);		HX_STACK_VAR(halfYaw,"halfYaw");
									HX_STACK_LINE(1128)
									Float sinRoll = ::Math_obj::sin(halfRoll);		HX_STACK_VAR(sinRoll,"sinRoll");
									HX_STACK_LINE(1128)
									Float cosRoll = ::Math_obj::cos(halfRoll);		HX_STACK_VAR(cosRoll,"cosRoll");
									HX_STACK_LINE(1128)
									Float sinPitch = ::Math_obj::sin(halfPitch);		HX_STACK_VAR(sinPitch,"sinPitch");
									HX_STACK_LINE(1128)
									Float cosPitch = ::Math_obj::cos(halfPitch);		HX_STACK_VAR(cosPitch,"cosPitch");
									HX_STACK_LINE(1128)
									Float sinYaw = ::Math_obj::sin(halfYaw);		HX_STACK_VAR(sinYaw,"sinYaw");
									HX_STACK_LINE(1128)
									Float cosYaw = ::Math_obj::cos(halfYaw);		HX_STACK_VAR(cosYaw,"cosYaw");
									HX_STACK_LINE(1128)
									tempQuaternion->x = (((cosYaw * sinPitch) * cosRoll) + ((sinYaw * cosPitch) * sinRoll));
									HX_STACK_LINE(1128)
									tempQuaternion->y = (((sinYaw * cosPitch) * cosRoll) - ((cosYaw * sinPitch) * sinRoll));
									HX_STACK_LINE(1128)
									tempQuaternion->z = (((cosYaw * cosPitch) * sinRoll) - ((sinYaw * sinPitch) * cosRoll));
									HX_STACK_LINE(1128)
									tempQuaternion->w = (((cosYaw * cosPitch) * cosRoll) + ((sinYaw * sinPitch) * sinRoll));
									HX_STACK_LINE(1128)
									_g4 = tempQuaternion;
								}
								HX_STACK_LINE(1128)
								tempQuaternion = _g4;
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									Float xx = (tempQuaternion->x * tempQuaternion->x);		HX_STACK_VAR(xx,"xx");
									HX_STACK_LINE(1128)
									Float yy = (tempQuaternion->y * tempQuaternion->y);		HX_STACK_VAR(yy,"yy");
									HX_STACK_LINE(1128)
									Float zz = (tempQuaternion->z * tempQuaternion->z);		HX_STACK_VAR(zz,"zz");
									HX_STACK_LINE(1128)
									Float xy = (tempQuaternion->x * tempQuaternion->y);		HX_STACK_VAR(xy,"xy");
									HX_STACK_LINE(1128)
									Float zw = (tempQuaternion->z * tempQuaternion->w);		HX_STACK_VAR(zw,"zw");
									HX_STACK_LINE(1128)
									Float zx = (tempQuaternion->z * tempQuaternion->x);		HX_STACK_VAR(zx,"zx");
									HX_STACK_LINE(1128)
									Float yw = (tempQuaternion->y * tempQuaternion->w);		HX_STACK_VAR(yw,"yw");
									HX_STACK_LINE(1128)
									Float yz = (tempQuaternion->y * tempQuaternion->z);		HX_STACK_VAR(yz,"yz");
									HX_STACK_LINE(1128)
									Float xw = (tempQuaternion->x * tempQuaternion->w);		HX_STACK_VAR(xw,"xw");
									HX_STACK_LINE(1128)
									result->m[(int)0] = (1.0 - (2.0 * ((yy + zz))));
									HX_STACK_LINE(1128)
									result->m[(int)1] = (2.0 * ((xy + zw)));
									HX_STACK_LINE(1128)
									result->m[(int)2] = (2.0 * ((zx - yw)));
									HX_STACK_LINE(1128)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)4] = (2.0 * ((xy - zw)));
									HX_STACK_LINE(1128)
									result->m[(int)5] = (1.0 - (2.0 * ((zz + xx))));
									HX_STACK_LINE(1128)
									result->m[(int)6] = (2.0 * ((yz + xw)));
									HX_STACK_LINE(1128)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)8] = (2.0 * ((zx + yw)));
									HX_STACK_LINE(1128)
									result->m[(int)9] = (2.0 * ((yz - xw)));
									HX_STACK_LINE(1128)
									result->m[(int)10] = (1.0 - (2.0 * ((yy + xx))));
									HX_STACK_LINE(1128)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)12] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)13] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)14] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(1128)
									result;
								}
							}
							HX_STACK_LINE(1128)
							mesh->_cache->__Field(HX_CSTRING("rotation"),true)->__Field(HX_CSTRING("copyFrom"),true)(mesh->rotation);
						}
						HX_STACK_LINE(1128)
						if ((mesh->infiniteDistance)){
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::cameras::Camera camera = mesh->_scene->activeCamera;		HX_STACK_VAR(camera,"camera");
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									result->m[(int)0] = 1.0;
									HX_STACK_LINE(1128)
									result->m[(int)1] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)2] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)4] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)5] = 1.0;
									HX_STACK_LINE(1128)
									result->m[(int)6] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)8] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)9] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)10] = 1.0;
									HX_STACK_LINE(1128)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)12] = (mesh->position->x + camera->position->x);
									HX_STACK_LINE(1128)
									result->m[(int)13] = (mesh->position->y + camera->position->y);
									HX_STACK_LINE(1128)
									result->m[(int)14] = (mesh->position->z + camera->position->z);
									HX_STACK_LINE(1128)
									result->m[(int)15] = 1.0;
									HX_STACK_LINE(1128)
									result;
								}
							}
						}
						else{
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								result->m[(int)0] = 1.0;
								HX_STACK_LINE(1128)
								result->m[(int)1] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)2] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)3] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)4] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)5] = 1.0;
								HX_STACK_LINE(1128)
								result->m[(int)6] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)7] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)8] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)9] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)10] = 1.0;
								HX_STACK_LINE(1128)
								result->m[(int)11] = (int)0;
								HX_STACK_LINE(1128)
								result->m[(int)12] = mesh->position->x;
								HX_STACK_LINE(1128)
								result->m[(int)13] = mesh->position->y;
								HX_STACK_LINE(1128)
								result->m[(int)14] = mesh->position->z;
								HX_STACK_LINE(1128)
								result->m[(int)15] = 1.0;
								HX_STACK_LINE(1128)
								result;
							}
						}
						HX_STACK_LINE(1128)
						{
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_pivotMatrix;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localScaling;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								Array< Float > result = mesh->_localPivotScaling->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1128)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1128)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1128)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1128)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1128)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1128)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1128)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1128)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1128)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1128)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1128)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1128)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1128)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1128)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1128)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1128)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1128)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1128)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1128)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1128)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1128)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1128)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1128)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1128)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1128)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1128)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1128)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1128)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1128)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1128)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1128)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1128)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1128)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1128)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1128)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1128)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1128)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1128)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1128)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1128)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1128)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1128)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1128)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1128)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1128)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1128)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1128)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1128)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1128)
								result;
							}
						}
						HX_STACK_LINE(1128)
						{
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScaling;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localRotation;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1128)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1128)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1128)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1128)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1128)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1128)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1128)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1128)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1128)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1128)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1128)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1128)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1128)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1128)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1128)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1128)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1128)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1128)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1128)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1128)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1128)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1128)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1128)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1128)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1128)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1128)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1128)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1128)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1128)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1128)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1128)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1128)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1128)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1128)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1128)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1128)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1128)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1128)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1128)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1128)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1128)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1128)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1128)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1128)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1128)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1128)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1128)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1128)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1128)
								result;
							}
						}
						HX_STACK_LINE(1128)
						if (((mesh->billboardMode != ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE))){
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 localPosition;		HX_STACK_VAR(localPosition,"localPosition");
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->position;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1128)
								localPosition = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
							}
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 zero;		HX_STACK_VAR(zero,"zero");
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_scene->activeCamera->position;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1128)
								zero = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::__new(_this->x,_this->y,_this->z);
							}
							HX_STACK_LINE(1128)
							if (((bool((mesh->parent != null())) && bool((mesh->parent->position != null()))))){
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									::com::gamestudiohx::babylonhx::tools::math::Vector3 otherVector = mesh->parent->position;		HX_STACK_VAR(otherVector,"otherVector");
									HX_STACK_LINE(1128)
									hx::AddEq(localPosition->x,otherVector->x);
									HX_STACK_LINE(1128)
									hx::AddEq(localPosition->y,otherVector->y);
									HX_STACK_LINE(1128)
									hx::AddEq(localPosition->z,otherVector->z);
								}
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localTranslation;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1128)
									{
										HX_STACK_LINE(1128)
										result->m[(int)0] = 1.0;
										HX_STACK_LINE(1128)
										result->m[(int)1] = (int)0;
										HX_STACK_LINE(1128)
										result->m[(int)2] = (int)0;
										HX_STACK_LINE(1128)
										result->m[(int)3] = (int)0;
										HX_STACK_LINE(1128)
										result->m[(int)4] = (int)0;
										HX_STACK_LINE(1128)
										result->m[(int)5] = 1.0;
										HX_STACK_LINE(1128)
										result->m[(int)6] = (int)0;
										HX_STACK_LINE(1128)
										result->m[(int)7] = (int)0;
										HX_STACK_LINE(1128)
										result->m[(int)8] = (int)0;
										HX_STACK_LINE(1128)
										result->m[(int)9] = (int)0;
										HX_STACK_LINE(1128)
										result->m[(int)10] = 1.0;
										HX_STACK_LINE(1128)
										result->m[(int)11] = (int)0;
										HX_STACK_LINE(1128)
										result->m[(int)12] = localPosition->x;
										HX_STACK_LINE(1128)
										result->m[(int)13] = localPosition->y;
										HX_STACK_LINE(1128)
										result->m[(int)14] = localPosition->z;
										HX_STACK_LINE(1128)
										result->m[(int)15] = 1.0;
										HX_STACK_LINE(1128)
										result;
									}
								}
							}
							HX_STACK_LINE(1128)
							if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))) == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_ALL))){
								HX_STACK_LINE(1128)
								zero = mesh->_scene->activeCamera->position;
							}
							else{
								HX_STACK_LINE(1128)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_X))) != (int)0))){
									HX_STACK_LINE(1128)
									zero->x = (localPosition->x + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
								HX_STACK_LINE(1128)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Y))) != (int)0))){
									HX_STACK_LINE(1128)
									zero->y = (localPosition->y + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
								HX_STACK_LINE(1128)
								if (((((int(mesh->billboardMode) & int(::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_Z))) != (int)0))){
									HX_STACK_LINE(1128)
									zero->z = (localPosition->z + ::com::gamestudiohx::babylonhx::Engine_obj::epsilon);
								}
							}
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 up = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Up();		HX_STACK_VAR(up,"up");
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Matrix result = mesh->_localBillboard;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 xAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(xAxis,"xAxis");
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 yAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(yAxis,"yAxis");
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Vector3 zAxis = ::com::gamestudiohx::babylonhx::tools::math::Vector3_obj::Zero();		HX_STACK_VAR(zAxis,"zAxis");
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									zAxis->x = (zero->x - localPosition->x);
									HX_STACK_LINE(1128)
									zAxis->y = (zero->y - localPosition->y);
									HX_STACK_LINE(1128)
									zAxis->z = (zero->z - localPosition->z);
								}
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									Float len = ::Math_obj::sqrt((((zAxis->x * zAxis->x) + (zAxis->y * zAxis->y)) + (zAxis->z * zAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(1128)
									if (((len != (int)0))){
										HX_STACK_LINE(1128)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(1128)
										hx::MultEq(zAxis->x,num);
										HX_STACK_LINE(1128)
										hx::MultEq(zAxis->y,num);
										HX_STACK_LINE(1128)
										hx::MultEq(zAxis->z,num);
									}
								}
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									xAxis->x = ((up->y * zAxis->z) - (up->z * zAxis->y));
									HX_STACK_LINE(1128)
									xAxis->y = ((up->z * zAxis->x) - (up->x * zAxis->z));
									HX_STACK_LINE(1128)
									xAxis->z = ((up->x * zAxis->y) - (up->y * zAxis->x));
								}
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									Float len = ::Math_obj::sqrt((((xAxis->x * xAxis->x) + (xAxis->y * xAxis->y)) + (xAxis->z * xAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(1128)
									if (((len != (int)0))){
										HX_STACK_LINE(1128)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(1128)
										hx::MultEq(xAxis->x,num);
										HX_STACK_LINE(1128)
										hx::MultEq(xAxis->y,num);
										HX_STACK_LINE(1128)
										hx::MultEq(xAxis->z,num);
									}
								}
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									yAxis->x = ((zAxis->y * xAxis->z) - (zAxis->z * xAxis->y));
									HX_STACK_LINE(1128)
									yAxis->y = ((zAxis->z * xAxis->x) - (zAxis->x * xAxis->z));
									HX_STACK_LINE(1128)
									yAxis->z = ((zAxis->x * xAxis->y) - (zAxis->y * xAxis->x));
								}
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									Float len = ::Math_obj::sqrt((((yAxis->x * yAxis->x) + (yAxis->y * yAxis->y)) + (yAxis->z * yAxis->z)));		HX_STACK_VAR(len,"len");
									HX_STACK_LINE(1128)
									if (((len != (int)0))){
										HX_STACK_LINE(1128)
										Float num = (Float(1.0) / Float(len));		HX_STACK_VAR(num,"num");
										HX_STACK_LINE(1128)
										hx::MultEq(yAxis->x,num);
										HX_STACK_LINE(1128)
										hx::MultEq(yAxis->y,num);
										HX_STACK_LINE(1128)
										hx::MultEq(yAxis->z,num);
									}
								}
								HX_STACK_LINE(1128)
								Float ex = -(((((xAxis->x * localPosition->x) + (xAxis->y * localPosition->y)) + (xAxis->z * localPosition->z))));		HX_STACK_VAR(ex,"ex");
								HX_STACK_LINE(1128)
								Float ey = -(((((yAxis->x * localPosition->x) + (yAxis->y * localPosition->y)) + (yAxis->z * localPosition->z))));		HX_STACK_VAR(ey,"ey");
								HX_STACK_LINE(1128)
								Float ez = -(((((zAxis->x * localPosition->x) + (zAxis->y * localPosition->y)) + (zAxis->z * localPosition->z))));		HX_STACK_VAR(ez,"ez");
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									result->m[(int)0] = xAxis->x;
									HX_STACK_LINE(1128)
									result->m[(int)1] = yAxis->x;
									HX_STACK_LINE(1128)
									result->m[(int)2] = zAxis->x;
									HX_STACK_LINE(1128)
									result->m[(int)3] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)4] = xAxis->y;
									HX_STACK_LINE(1128)
									result->m[(int)5] = yAxis->y;
									HX_STACK_LINE(1128)
									result->m[(int)6] = zAxis->y;
									HX_STACK_LINE(1128)
									result->m[(int)7] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)8] = xAxis->z;
									HX_STACK_LINE(1128)
									result->m[(int)9] = yAxis->z;
									HX_STACK_LINE(1128)
									result->m[(int)10] = zAxis->z;
									HX_STACK_LINE(1128)
									result->m[(int)11] = (int)0;
									HX_STACK_LINE(1128)
									result->m[(int)12] = ex;
									HX_STACK_LINE(1128)
									result->m[(int)13] = ey;
									HX_STACK_LINE(1128)
									result->m[(int)14] = ez;
									HX_STACK_LINE(1128)
									result->m[(int)15] = (int)1;
									HX_STACK_LINE(1128)
									result;
								}
							}
							HX_STACK_LINE(1128)
							mesh->_localBillboard->m[(int)12] = mesh->_localBillboard->m[(int)13] = mesh->_localBillboard->m[(int)14] = (int)0;
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localBillboard;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									Float l1 = _this->m->__get((int)0);		HX_STACK_VAR(l1,"l1");
									HX_STACK_LINE(1128)
									Float l2 = _this->m->__get((int)1);		HX_STACK_VAR(l2,"l2");
									HX_STACK_LINE(1128)
									Float l3 = _this->m->__get((int)2);		HX_STACK_VAR(l3,"l3");
									HX_STACK_LINE(1128)
									Float l4 = _this->m->__get((int)3);		HX_STACK_VAR(l4,"l4");
									HX_STACK_LINE(1128)
									Float l5 = _this->m->__get((int)4);		HX_STACK_VAR(l5,"l5");
									HX_STACK_LINE(1128)
									Float l6 = _this->m->__get((int)5);		HX_STACK_VAR(l6,"l6");
									HX_STACK_LINE(1128)
									Float l7 = _this->m->__get((int)6);		HX_STACK_VAR(l7,"l7");
									HX_STACK_LINE(1128)
									Float l8 = _this->m->__get((int)7);		HX_STACK_VAR(l8,"l8");
									HX_STACK_LINE(1128)
									Float l9 = _this->m->__get((int)8);		HX_STACK_VAR(l9,"l9");
									HX_STACK_LINE(1128)
									Float l10 = _this->m->__get((int)9);		HX_STACK_VAR(l10,"l10");
									HX_STACK_LINE(1128)
									Float l11 = _this->m->__get((int)10);		HX_STACK_VAR(l11,"l11");
									HX_STACK_LINE(1128)
									Float l12 = _this->m->__get((int)11);		HX_STACK_VAR(l12,"l12");
									HX_STACK_LINE(1128)
									Float l13 = _this->m->__get((int)12);		HX_STACK_VAR(l13,"l13");
									HX_STACK_LINE(1128)
									Float l14 = _this->m->__get((int)13);		HX_STACK_VAR(l14,"l14");
									HX_STACK_LINE(1128)
									Float l15 = _this->m->__get((int)14);		HX_STACK_VAR(l15,"l15");
									HX_STACK_LINE(1128)
									Float l16 = _this->m->__get((int)15);		HX_STACK_VAR(l16,"l16");
									HX_STACK_LINE(1128)
									Float l17 = ((l11 * l16) - (l12 * l15));		HX_STACK_VAR(l17,"l17");
									HX_STACK_LINE(1128)
									Float l18 = ((l10 * l16) - (l12 * l14));		HX_STACK_VAR(l18,"l18");
									HX_STACK_LINE(1128)
									Float l19 = ((l10 * l15) - (l11 * l14));		HX_STACK_VAR(l19,"l19");
									HX_STACK_LINE(1128)
									Float l20 = ((l9 * l16) - (l12 * l13));		HX_STACK_VAR(l20,"l20");
									HX_STACK_LINE(1128)
									Float l21 = ((l9 * l15) - (l11 * l13));		HX_STACK_VAR(l21,"l21");
									HX_STACK_LINE(1128)
									Float l22 = ((l9 * l14) - (l10 * l13));		HX_STACK_VAR(l22,"l22");
									HX_STACK_LINE(1128)
									Float l23 = (((l6 * l17) - (l7 * l18)) + (l8 * l19));		HX_STACK_VAR(l23,"l23");
									HX_STACK_LINE(1128)
									Float l24 = -(((((l5 * l17) - (l7 * l20)) + (l8 * l21))));		HX_STACK_VAR(l24,"l24");
									HX_STACK_LINE(1128)
									Float l25 = (((l5 * l18) - (l6 * l20)) + (l8 * l22));		HX_STACK_VAR(l25,"l25");
									HX_STACK_LINE(1128)
									Float l26 = -(((((l5 * l19) - (l6 * l21)) + (l7 * l22))));		HX_STACK_VAR(l26,"l26");
									HX_STACK_LINE(1128)
									Float l27 = (Float(1.0) / Float((((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26)))));		HX_STACK_VAR(l27,"l27");
									HX_STACK_LINE(1128)
									Float l28 = ((l7 * l16) - (l8 * l15));		HX_STACK_VAR(l28,"l28");
									HX_STACK_LINE(1128)
									Float l29 = ((l6 * l16) - (l8 * l14));		HX_STACK_VAR(l29,"l29");
									HX_STACK_LINE(1128)
									Float l30 = ((l6 * l15) - (l7 * l14));		HX_STACK_VAR(l30,"l30");
									HX_STACK_LINE(1128)
									Float l31 = ((l5 * l16) - (l8 * l13));		HX_STACK_VAR(l31,"l31");
									HX_STACK_LINE(1128)
									Float l32 = ((l5 * l15) - (l7 * l13));		HX_STACK_VAR(l32,"l32");
									HX_STACK_LINE(1128)
									Float l33 = ((l5 * l14) - (l6 * l13));		HX_STACK_VAR(l33,"l33");
									HX_STACK_LINE(1128)
									Float l34 = ((l7 * l12) - (l8 * l11));		HX_STACK_VAR(l34,"l34");
									HX_STACK_LINE(1128)
									Float l35 = ((l6 * l12) - (l8 * l10));		HX_STACK_VAR(l35,"l35");
									HX_STACK_LINE(1128)
									Float l36 = ((l6 * l11) - (l7 * l10));		HX_STACK_VAR(l36,"l36");
									HX_STACK_LINE(1128)
									Float l37 = ((l5 * l12) - (l8 * l9));		HX_STACK_VAR(l37,"l37");
									HX_STACK_LINE(1128)
									Float l38 = ((l5 * l11) - (l7 * l9));		HX_STACK_VAR(l38,"l38");
									HX_STACK_LINE(1128)
									Float l39 = ((l5 * l10) - (l6 * l9));		HX_STACK_VAR(l39,"l39");
									HX_STACK_LINE(1128)
									_this->m[(int)0] = (l23 * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)4] = (l24 * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)8] = (l25 * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)12] = (l26 * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)1] = (-(((((l2 * l17) - (l3 * l18)) + (l4 * l19)))) * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)5] = (((((l1 * l17) - (l3 * l20)) + (l4 * l21))) * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)9] = (-(((((l1 * l18) - (l2 * l20)) + (l4 * l22)))) * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)13] = (((((l1 * l19) - (l2 * l21)) + (l3 * l22))) * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)2] = (((((l2 * l28) - (l3 * l29)) + (l4 * l30))) * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)6] = (-(((((l1 * l28) - (l3 * l31)) + (l4 * l32)))) * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)10] = (((((l1 * l29) - (l2 * l31)) + (l4 * l33))) * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)14] = (-(((((l1 * l30) - (l2 * l32)) + (l3 * l33)))) * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)3] = (-(((((l2 * l34) - (l3 * l35)) + (l4 * l36)))) * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)7] = (((((l1 * l34) - (l3 * l37)) + (l4 * l38))) * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)11] = (-(((((l1 * l35) - (l2 * l37)) + (l4 * l39)))) * l27);
									HX_STACK_LINE(1128)
									_this->m[(int)15] = (((((l1 * l36) - (l2 * l38)) + (l3 * l39))) * l27);
								}
							}
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localBillboard;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1128)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1128)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1128)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1128)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1128)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1128)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1128)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1128)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1128)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1128)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1128)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1128)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1128)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1128)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1128)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1128)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1128)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1128)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1128)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1128)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1128)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1128)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1128)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1128)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1128)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1128)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1128)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1128)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1128)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1128)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1128)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1128)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1128)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1128)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1128)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1128)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1128)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1128)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1128)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1128)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1128)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1128)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1128)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1128)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1128)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1128)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1128)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1128)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1128)
									result;
								}
							}
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_rotateYByPI;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localWorld;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									Array< Float > result = mesh->_localPivotScalingRotation->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1128)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1128)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1128)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1128)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1128)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1128)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1128)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1128)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1128)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1128)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1128)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1128)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1128)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1128)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1128)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1128)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1128)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1128)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1128)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1128)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1128)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1128)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1128)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1128)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1128)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1128)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1128)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1128)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1128)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1128)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1128)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1128)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1128)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1128)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1128)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1128)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1128)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1128)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1128)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1128)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1128)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1128)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1128)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1128)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1128)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1128)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1128)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1128)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1128)
									result;
								}
							}
						}
						struct _Function_6_1{
							inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
								HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1128,0x7c8236a5)
								{
									HX_STACK_LINE(1128)
									::com::gamestudiohx::babylonhx::tools::math::Matrix _g5 = mesh->parent->getWorldMatrix();		HX_STACK_VAR(_g5,"_g5");
									HX_STACK_LINE(1128)
									return (_g5 != null());
								}
								return null();
							}
						};
						HX_STACK_LINE(1128)
						if (((  (((  (((mesh->parent != null()))) ? bool(_Function_6_1::Block(mesh)) : bool(false) ))) ? bool((mesh->billboardMode == ::com::gamestudiohx::babylonhx::mesh::AbstractMesh_obj::BILLBOARDMODE_NONE)) : bool(false) ))){
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									Array< Float > result = mesh->_localWorld->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1128)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1128)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1128)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1128)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1128)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1128)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1128)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1128)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1128)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1128)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1128)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1128)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1128)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1128)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1128)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1128)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1128)
									Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1128)
									Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1128)
									Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1128)
									Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1128)
									Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1128)
									Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1128)
									Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1128)
									Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1128)
									Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1128)
									Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1128)
									Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1128)
									Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1128)
									Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1128)
									Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1128)
									Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1128)
									Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1128)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1128)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1128)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1128)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1128)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1128)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1128)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1128)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1128)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1128)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1128)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1128)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1128)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1128)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1128)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1128)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1128)
									result;
								}
							}
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::tools::math::Matrix parentWorld = mesh->parent->getWorldMatrix();		HX_STACK_VAR(parentWorld,"parentWorld");
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localWorld;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(1128)
								{
									HX_STACK_LINE(1128)
									Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
									HX_STACK_LINE(1128)
									Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
									HX_STACK_LINE(1128)
									Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
									HX_STACK_LINE(1128)
									Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
									HX_STACK_LINE(1128)
									Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
									HX_STACK_LINE(1128)
									Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
									HX_STACK_LINE(1128)
									Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
									HX_STACK_LINE(1128)
									Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
									HX_STACK_LINE(1128)
									Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
									HX_STACK_LINE(1128)
									Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
									HX_STACK_LINE(1128)
									Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
									HX_STACK_LINE(1128)
									Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
									HX_STACK_LINE(1128)
									Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
									HX_STACK_LINE(1128)
									Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
									HX_STACK_LINE(1128)
									Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
									HX_STACK_LINE(1128)
									Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
									HX_STACK_LINE(1128)
									Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
									HX_STACK_LINE(1128)
									Float om0 = parentWorld->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
									HX_STACK_LINE(1128)
									Float om1 = parentWorld->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
									HX_STACK_LINE(1128)
									Float om2 = parentWorld->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
									HX_STACK_LINE(1128)
									Float om3 = parentWorld->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
									HX_STACK_LINE(1128)
									Float om4 = parentWorld->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
									HX_STACK_LINE(1128)
									Float om5 = parentWorld->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
									HX_STACK_LINE(1128)
									Float om6 = parentWorld->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
									HX_STACK_LINE(1128)
									Float om7 = parentWorld->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
									HX_STACK_LINE(1128)
									Float om8 = parentWorld->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
									HX_STACK_LINE(1128)
									Float om9 = parentWorld->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
									HX_STACK_LINE(1128)
									Float om10 = parentWorld->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
									HX_STACK_LINE(1128)
									Float om11 = parentWorld->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
									HX_STACK_LINE(1128)
									Float om12 = parentWorld->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
									HX_STACK_LINE(1128)
									Float om13 = parentWorld->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
									HX_STACK_LINE(1128)
									Float om14 = parentWorld->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
									HX_STACK_LINE(1128)
									Float om15 = parentWorld->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
									HX_STACK_LINE(1128)
									result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
									HX_STACK_LINE(1128)
									result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
									HX_STACK_LINE(1128)
									result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
									HX_STACK_LINE(1128)
									result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
									HX_STACK_LINE(1128)
									result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
									HX_STACK_LINE(1128)
									result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
									HX_STACK_LINE(1128)
									result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
									HX_STACK_LINE(1128)
									result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
									HX_STACK_LINE(1128)
									result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
									HX_STACK_LINE(1128)
									result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
									HX_STACK_LINE(1128)
									result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
									HX_STACK_LINE(1128)
									result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
									HX_STACK_LINE(1128)
									result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
									HX_STACK_LINE(1128)
									result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
									HX_STACK_LINE(1128)
									result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
									HX_STACK_LINE(1128)
									result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
									HX_STACK_LINE(1128)
									result;
								}
							}
						}
						else{
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::tools::math::Matrix _this = mesh->_localPivotScalingRotation;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::tools::math::Matrix other = mesh->_localTranslation;		HX_STACK_VAR(other,"other");
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								Array< Float > result = mesh->_worldMatrix->m;		HX_STACK_VAR(result,"result");
								HX_STACK_LINE(1128)
								Float tm0 = _this->m->__get((int)0);		HX_STACK_VAR(tm0,"tm0");
								HX_STACK_LINE(1128)
								Float tm1 = _this->m->__get((int)1);		HX_STACK_VAR(tm1,"tm1");
								HX_STACK_LINE(1128)
								Float tm2 = _this->m->__get((int)2);		HX_STACK_VAR(tm2,"tm2");
								HX_STACK_LINE(1128)
								Float tm3 = _this->m->__get((int)3);		HX_STACK_VAR(tm3,"tm3");
								HX_STACK_LINE(1128)
								Float tm4 = _this->m->__get((int)4);		HX_STACK_VAR(tm4,"tm4");
								HX_STACK_LINE(1128)
								Float tm5 = _this->m->__get((int)5);		HX_STACK_VAR(tm5,"tm5");
								HX_STACK_LINE(1128)
								Float tm6 = _this->m->__get((int)6);		HX_STACK_VAR(tm6,"tm6");
								HX_STACK_LINE(1128)
								Float tm7 = _this->m->__get((int)7);		HX_STACK_VAR(tm7,"tm7");
								HX_STACK_LINE(1128)
								Float tm8 = _this->m->__get((int)8);		HX_STACK_VAR(tm8,"tm8");
								HX_STACK_LINE(1128)
								Float tm9 = _this->m->__get((int)9);		HX_STACK_VAR(tm9,"tm9");
								HX_STACK_LINE(1128)
								Float tm10 = _this->m->__get((int)10);		HX_STACK_VAR(tm10,"tm10");
								HX_STACK_LINE(1128)
								Float tm11 = _this->m->__get((int)11);		HX_STACK_VAR(tm11,"tm11");
								HX_STACK_LINE(1128)
								Float tm12 = _this->m->__get((int)12);		HX_STACK_VAR(tm12,"tm12");
								HX_STACK_LINE(1128)
								Float tm13 = _this->m->__get((int)13);		HX_STACK_VAR(tm13,"tm13");
								HX_STACK_LINE(1128)
								Float tm14 = _this->m->__get((int)14);		HX_STACK_VAR(tm14,"tm14");
								HX_STACK_LINE(1128)
								Float tm15 = _this->m->__get((int)15);		HX_STACK_VAR(tm15,"tm15");
								HX_STACK_LINE(1128)
								Float om0 = other->m->__get((int)0);		HX_STACK_VAR(om0,"om0");
								HX_STACK_LINE(1128)
								Float om1 = other->m->__get((int)1);		HX_STACK_VAR(om1,"om1");
								HX_STACK_LINE(1128)
								Float om2 = other->m->__get((int)2);		HX_STACK_VAR(om2,"om2");
								HX_STACK_LINE(1128)
								Float om3 = other->m->__get((int)3);		HX_STACK_VAR(om3,"om3");
								HX_STACK_LINE(1128)
								Float om4 = other->m->__get((int)4);		HX_STACK_VAR(om4,"om4");
								HX_STACK_LINE(1128)
								Float om5 = other->m->__get((int)5);		HX_STACK_VAR(om5,"om5");
								HX_STACK_LINE(1128)
								Float om6 = other->m->__get((int)6);		HX_STACK_VAR(om6,"om6");
								HX_STACK_LINE(1128)
								Float om7 = other->m->__get((int)7);		HX_STACK_VAR(om7,"om7");
								HX_STACK_LINE(1128)
								Float om8 = other->m->__get((int)8);		HX_STACK_VAR(om8,"om8");
								HX_STACK_LINE(1128)
								Float om9 = other->m->__get((int)9);		HX_STACK_VAR(om9,"om9");
								HX_STACK_LINE(1128)
								Float om10 = other->m->__get((int)10);		HX_STACK_VAR(om10,"om10");
								HX_STACK_LINE(1128)
								Float om11 = other->m->__get((int)11);		HX_STACK_VAR(om11,"om11");
								HX_STACK_LINE(1128)
								Float om12 = other->m->__get((int)12);		HX_STACK_VAR(om12,"om12");
								HX_STACK_LINE(1128)
								Float om13 = other->m->__get((int)13);		HX_STACK_VAR(om13,"om13");
								HX_STACK_LINE(1128)
								Float om14 = other->m->__get((int)14);		HX_STACK_VAR(om14,"om14");
								HX_STACK_LINE(1128)
								Float om15 = other->m->__get((int)15);		HX_STACK_VAR(om15,"om15");
								HX_STACK_LINE(1128)
								result[(int)0] = ((((tm0 * om0) + (tm1 * om4)) + (tm2 * om8)) + (tm3 * om12));
								HX_STACK_LINE(1128)
								result[(int)1] = ((((tm0 * om1) + (tm1 * om5)) + (tm2 * om9)) + (tm3 * om13));
								HX_STACK_LINE(1128)
								result[(int)2] = ((((tm0 * om2) + (tm1 * om6)) + (tm2 * om10)) + (tm3 * om14));
								HX_STACK_LINE(1128)
								result[(int)3] = ((((tm0 * om3) + (tm1 * om7)) + (tm2 * om11)) + (tm3 * om15));
								HX_STACK_LINE(1128)
								result[(int)4] = ((((tm4 * om0) + (tm5 * om4)) + (tm6 * om8)) + (tm7 * om12));
								HX_STACK_LINE(1128)
								result[(int)5] = ((((tm4 * om1) + (tm5 * om5)) + (tm6 * om9)) + (tm7 * om13));
								HX_STACK_LINE(1128)
								result[(int)6] = ((((tm4 * om2) + (tm5 * om6)) + (tm6 * om10)) + (tm7 * om14));
								HX_STACK_LINE(1128)
								result[(int)7] = ((((tm4 * om3) + (tm5 * om7)) + (tm6 * om11)) + (tm7 * om15));
								HX_STACK_LINE(1128)
								result[(int)8] = ((((tm8 * om0) + (tm9 * om4)) + (tm10 * om8)) + (tm11 * om12));
								HX_STACK_LINE(1128)
								result[(int)9] = ((((tm8 * om1) + (tm9 * om5)) + (tm10 * om9)) + (tm11 * om13));
								HX_STACK_LINE(1128)
								result[(int)10] = ((((tm8 * om2) + (tm9 * om6)) + (tm10 * om10)) + (tm11 * om14));
								HX_STACK_LINE(1128)
								result[(int)11] = ((((tm8 * om3) + (tm9 * om7)) + (tm10 * om11)) + (tm11 * om15));
								HX_STACK_LINE(1128)
								result[(int)12] = ((((tm12 * om0) + (tm13 * om4)) + (tm14 * om8)) + (tm15 * om12));
								HX_STACK_LINE(1128)
								result[(int)13] = ((((tm12 * om1) + (tm13 * om5)) + (tm14 * om9)) + (tm15 * om13));
								HX_STACK_LINE(1128)
								result[(int)14] = ((((tm12 * om2) + (tm13 * om6)) + (tm14 * om10)) + (tm15 * om14));
								HX_STACK_LINE(1128)
								result[(int)15] = ((((tm12 * om3) + (tm13 * om7)) + (tm14 * om11)) + (tm15 * om15));
								HX_STACK_LINE(1128)
								result;
							}
						}
						HX_STACK_LINE(1128)
						if (((mesh->_boundingInfo != null()))){
							HX_STACK_LINE(1128)
							Float _g6 = ::Math_obj::max(mesh->scaling->x,mesh->scaling->y);		HX_STACK_VAR(_g6,"_g6");
							HX_STACK_LINE(1128)
							mesh->_scaleFactor = _g6;
							HX_STACK_LINE(1128)
							Float _g7 = ::Math_obj::max(mesh->_scaleFactor,mesh->scaling->z);		HX_STACK_VAR(_g7,"_g7");
							HX_STACK_LINE(1128)
							mesh->_scaleFactor = _g7;
							struct _Function_7_1{
								inline static bool Block( ::com::gamestudiohx::babylonhx::mesh::AbstractMesh &mesh){
									HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","com/gamestudiohx/babylonhx/Scene.hx",1128,0x7c8236a5)
									{
										HX_STACK_LINE(1128)
										Dynamic _g8 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g8,"_g8");
										HX_STACK_LINE(1128)
										return (_g8 != null());
									}
									return null();
								}
							};
							HX_STACK_LINE(1128)
							if (((  (((mesh->parent != null()))) ? bool(_Function_7_1::Block(mesh)) : bool(false) ))){
								HX_STACK_LINE(1128)
								Dynamic _g9 = ::Reflect_obj::field(mesh->parent,HX_CSTRING("_scaleFactor"));		HX_STACK_VAR(_g9,"_g9");
								HX_STACK_LINE(1128)
								Float _g10 = (mesh->_scaleFactor * _g9);		HX_STACK_VAR(_g10,"_g10");
								HX_STACK_LINE(1128)
								mesh->_scaleFactor = _g10;
							}
							HX_STACK_LINE(1128)
							mesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
							HX_STACK_LINE(1128)
							{
								HX_STACK_LINE(1128)
								int _g12 = (int)0;		HX_STACK_VAR(_g12,"_g12");
								HX_STACK_LINE(1128)
								int _g4 = mesh->subMeshes->length;		HX_STACK_VAR(_g4,"_g4");
								HX_STACK_LINE(1128)
								while((true)){
									HX_STACK_LINE(1128)
									if ((!(((_g12 < _g4))))){
										HX_STACK_LINE(1128)
										break;
									}
									HX_STACK_LINE(1128)
									int subIndex = (_g12)++;		HX_STACK_VAR(subIndex,"subIndex");
									HX_STACK_LINE(1128)
									::com::gamestudiohx::babylonhx::mesh::SubMesh subMesh = mesh->subMeshes->__get(subIndex).StaticCast< ::com::gamestudiohx::babylonhx::mesh::SubMesh >();		HX_STACK_VAR(subMesh,"subMesh");
									HX_STACK_LINE(1128)
									subMesh->_boundingInfo->_update(mesh->_worldMatrix,mesh->_scaleFactor);
								}
							}
						}
						HX_STACK_LINE(1128)
						{
							HX_STACK_LINE(1128)
							::com::gamestudiohx::babylonhx::tools::math::Vector3 _this = mesh->_absolutePosition;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1128)
							_this->x = mesh->_worldMatrix->m->__get((int)12);
							HX_STACK_LINE(1128)
							_this->y = mesh->_worldMatrix->m->__get((int)13);
							HX_STACK_LINE(1128)
							_this->z = mesh->_worldMatrix->m->__get((int)14);
						}
						HX_STACK_LINE(1128)
						ret = mesh->_worldMatrix;
					}
					HX_STACK_LINE(1128)
					ret;
				}
				HX_STACK_LINE(1128)
				world = mesh->_worldMatrix;
			}
			HX_STACK_LINE(1128)
			::com::gamestudiohx::babylonhx::tools::math::Ray ray2 = param(world).Cast< ::com::gamestudiohx::babylonhx::tools::math::Ray >();		HX_STACK_VAR(ray2,"ray2");
			HX_STACK_LINE(1128)
			::com::gamestudiohx::babylonhx::collisions::PickingInfo result = mesh->intersects(ray2,fastCheck);		HX_STACK_VAR(result,"result");
			HX_STACK_LINE(1128)
			if ((!(result->hit))){
				HX_STACK_LINE(1128)
				continue;
			}
			HX_STACK_LINE(1128)
			if (((bool((bool(!(fastCheck)) && bool((pickingInfo != null())))) && bool((result->distance >= pickingInfo->distance))))){
				HX_STACK_LINE(1128)
				continue;
			}
			HX_STACK_LINE(1128)
			pickingInfo = result;
			HX_STACK_LINE(1128)
			if ((fastCheck)){
				HX_STACK_LINE(1128)
				break;
			}
		}
	}
	HX_STACK_LINE(1128)
	if (((pickingInfo == null()))){
		HX_STACK_LINE(1128)
		return ::com::gamestudiohx::babylonhx::collisions::PickingInfo_obj::__new();
	}
	else{
		HX_STACK_LINE(1128)
		return pickingInfo;
	}
	HX_STACK_LINE(1128)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC3(Scene_obj,pickWithRay,return )

int Scene_obj::FOGMODE_NONE;

int Scene_obj::FOGMODE_EXP;

int Scene_obj::FOGMODE_EXP2;

int Scene_obj::FOGMODE_LINEAR;


Scene_obj::Scene_obj()
{
}

void Scene_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Scene);
	HX_MARK_MEMBER_NAME(_engine,"_engine");
	HX_MARK_MEMBER_NAME(beforeRender,"beforeRender");
	HX_MARK_MEMBER_NAME(afterRender,"afterRender");
	HX_MARK_MEMBER_NAME(_viewMatrix,"_viewMatrix");
	HX_MARK_MEMBER_NAME(_projectionMatrix,"_projectionMatrix");
	HX_MARK_MEMBER_NAME(_physicsEngine,"_physicsEngine");
	HX_MARK_MEMBER_NAME(useDelayedTextureLoading,"useDelayedTextureLoading");
	HX_MARK_MEMBER_NAME(_totalVertices,"_totalVertices");
	HX_MARK_MEMBER_NAME(_activeVertices,"_activeVertices");
	HX_MARK_MEMBER_NAME(_activeParticles,"_activeParticles");
	HX_MARK_MEMBER_NAME(_lastFrameDuration,"_lastFrameDuration");
	HX_MARK_MEMBER_NAME(_evaluateActiveMeshesDuration,"_evaluateActiveMeshesDuration");
	HX_MARK_MEMBER_NAME(_renderTargetsDuration,"_renderTargetsDuration");
	HX_MARK_MEMBER_NAME(_renderDuration,"_renderDuration");
	HX_MARK_MEMBER_NAME(_particlesDuration,"_particlesDuration");
	HX_MARK_MEMBER_NAME(_spritesDuration,"_spritesDuration");
	HX_MARK_MEMBER_NAME(_animationRatio,"_animationRatio");
	HX_MARK_MEMBER_NAME(_renderId,"_renderId");
	HX_MARK_MEMBER_NAME(_executeWhenReadyTimeoutId,"_executeWhenReadyTimeoutId");
	HX_MARK_MEMBER_NAME(_frustumPlanes,"_frustumPlanes");
	HX_MARK_MEMBER_NAME(_selectionOctree,"_selectionOctree");
	HX_MARK_MEMBER_NAME(_toBeDisposed,"_toBeDisposed");
	HX_MARK_MEMBER_NAME(_onReadyCallbacks,"_onReadyCallbacks");
	HX_MARK_MEMBER_NAME(_pendingData,"_pendingData");
	HX_MARK_MEMBER_NAME(_onBeforeRenderCallbacks,"_onBeforeRenderCallbacks");
	HX_MARK_MEMBER_NAME(_pickWithRayInverseMatrix,"_pickWithRayInverseMatrix");
	HX_MARK_MEMBER_NAME(autoClear,"autoClear");
	HX_MARK_MEMBER_NAME(forceWireframe,"forceWireframe");
	HX_MARK_MEMBER_NAME(clearColor,"clearColor");
	HX_MARK_MEMBER_NAME(ambientColor,"ambientColor");
	HX_MARK_MEMBER_NAME(fogMode,"fogMode");
	HX_MARK_MEMBER_NAME(fogColor,"fogColor");
	HX_MARK_MEMBER_NAME(fogDensity,"fogDensity");
	HX_MARK_MEMBER_NAME(fogStart,"fogStart");
	HX_MARK_MEMBER_NAME(fogEnd,"fogEnd");
	HX_MARK_MEMBER_NAME(_activeMeshes,"_activeMeshes");
	HX_MARK_MEMBER_NAME(_processedMaterials,"_processedMaterials");
	HX_MARK_MEMBER_NAME(_renderTargets,"_renderTargets");
	HX_MARK_MEMBER_NAME(_activeParticleSystems,"_activeParticleSystems");
	HX_MARK_MEMBER_NAME(_activeSkeletons,"_activeSkeletons");
	HX_MARK_MEMBER_NAME(renderTargetsEnabled,"renderTargetsEnabled");
	HX_MARK_MEMBER_NAME(customRenderTargets,"customRenderTargets");
	HX_MARK_MEMBER_NAME(_scaledVelocity,"_scaledVelocity");
	HX_MARK_MEMBER_NAME(_scaledPosition,"_scaledPosition");
	HX_MARK_MEMBER_NAME(_transformMatrix,"_transformMatrix");
	HX_MARK_MEMBER_NAME(_activeAnimatables,"_activeAnimatables");
	HX_MARK_MEMBER_NAME(lensFlareSystems,"lensFlareSystems");
	HX_MARK_MEMBER_NAME(_renderingManager,"_renderingManager");
	HX_MARK_MEMBER_NAME(_geometries,"_geometries");
	HX_MARK_MEMBER_NAME(database,"database");
	HX_MARK_MEMBER_NAME(lightsEnabled,"lightsEnabled");
	HX_MARK_MEMBER_NAME(lights,"lights");
	HX_MARK_MEMBER_NAME(cameras,"cameras");
	HX_MARK_MEMBER_NAME(activeCamera,"activeCamera");
	HX_MARK_MEMBER_NAME(activeCameras,"activeCameras");
	HX_MARK_MEMBER_NAME(meshes,"meshes");
	HX_MARK_MEMBER_NAME(materials,"materials");
	HX_MARK_MEMBER_NAME(multiMaterials,"multiMaterials");
	HX_MARK_MEMBER_NAME(defaultMaterial,"defaultMaterial");
	HX_MARK_MEMBER_NAME(texturesEnabled,"texturesEnabled");
	HX_MARK_MEMBER_NAME(textures,"textures");
	HX_MARK_MEMBER_NAME(particlesEnabled,"particlesEnabled");
	HX_MARK_MEMBER_NAME(particleSystems,"particleSystems");
	HX_MARK_MEMBER_NAME(spriteManagers,"spriteManagers");
	HX_MARK_MEMBER_NAME(layers,"layers");
	HX_MARK_MEMBER_NAME(skeletons,"skeletons");
	HX_MARK_MEMBER_NAME(collisionsEnabled,"collisionsEnabled");
	HX_MARK_MEMBER_NAME(gravity,"gravity");
	HX_MARK_MEMBER_NAME(postProcessesEnabled,"postProcessesEnabled");
	HX_MARK_MEMBER_NAME(postProcessManager,"postProcessManager");
	HX_MARK_MEMBER_NAME(_animationStartDate,"_animationStartDate");
	HX_MARK_END_CLASS();
}

void Scene_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_engine,"_engine");
	HX_VISIT_MEMBER_NAME(beforeRender,"beforeRender");
	HX_VISIT_MEMBER_NAME(afterRender,"afterRender");
	HX_VISIT_MEMBER_NAME(_viewMatrix,"_viewMatrix");
	HX_VISIT_MEMBER_NAME(_projectionMatrix,"_projectionMatrix");
	HX_VISIT_MEMBER_NAME(_physicsEngine,"_physicsEngine");
	HX_VISIT_MEMBER_NAME(useDelayedTextureLoading,"useDelayedTextureLoading");
	HX_VISIT_MEMBER_NAME(_totalVertices,"_totalVertices");
	HX_VISIT_MEMBER_NAME(_activeVertices,"_activeVertices");
	HX_VISIT_MEMBER_NAME(_activeParticles,"_activeParticles");
	HX_VISIT_MEMBER_NAME(_lastFrameDuration,"_lastFrameDuration");
	HX_VISIT_MEMBER_NAME(_evaluateActiveMeshesDuration,"_evaluateActiveMeshesDuration");
	HX_VISIT_MEMBER_NAME(_renderTargetsDuration,"_renderTargetsDuration");
	HX_VISIT_MEMBER_NAME(_renderDuration,"_renderDuration");
	HX_VISIT_MEMBER_NAME(_particlesDuration,"_particlesDuration");
	HX_VISIT_MEMBER_NAME(_spritesDuration,"_spritesDuration");
	HX_VISIT_MEMBER_NAME(_animationRatio,"_animationRatio");
	HX_VISIT_MEMBER_NAME(_renderId,"_renderId");
	HX_VISIT_MEMBER_NAME(_executeWhenReadyTimeoutId,"_executeWhenReadyTimeoutId");
	HX_VISIT_MEMBER_NAME(_frustumPlanes,"_frustumPlanes");
	HX_VISIT_MEMBER_NAME(_selectionOctree,"_selectionOctree");
	HX_VISIT_MEMBER_NAME(_toBeDisposed,"_toBeDisposed");
	HX_VISIT_MEMBER_NAME(_onReadyCallbacks,"_onReadyCallbacks");
	HX_VISIT_MEMBER_NAME(_pendingData,"_pendingData");
	HX_VISIT_MEMBER_NAME(_onBeforeRenderCallbacks,"_onBeforeRenderCallbacks");
	HX_VISIT_MEMBER_NAME(_pickWithRayInverseMatrix,"_pickWithRayInverseMatrix");
	HX_VISIT_MEMBER_NAME(autoClear,"autoClear");
	HX_VISIT_MEMBER_NAME(forceWireframe,"forceWireframe");
	HX_VISIT_MEMBER_NAME(clearColor,"clearColor");
	HX_VISIT_MEMBER_NAME(ambientColor,"ambientColor");
	HX_VISIT_MEMBER_NAME(fogMode,"fogMode");
	HX_VISIT_MEMBER_NAME(fogColor,"fogColor");
	HX_VISIT_MEMBER_NAME(fogDensity,"fogDensity");
	HX_VISIT_MEMBER_NAME(fogStart,"fogStart");
	HX_VISIT_MEMBER_NAME(fogEnd,"fogEnd");
	HX_VISIT_MEMBER_NAME(_activeMeshes,"_activeMeshes");
	HX_VISIT_MEMBER_NAME(_processedMaterials,"_processedMaterials");
	HX_VISIT_MEMBER_NAME(_renderTargets,"_renderTargets");
	HX_VISIT_MEMBER_NAME(_activeParticleSystems,"_activeParticleSystems");
	HX_VISIT_MEMBER_NAME(_activeSkeletons,"_activeSkeletons");
	HX_VISIT_MEMBER_NAME(renderTargetsEnabled,"renderTargetsEnabled");
	HX_VISIT_MEMBER_NAME(customRenderTargets,"customRenderTargets");
	HX_VISIT_MEMBER_NAME(_scaledVelocity,"_scaledVelocity");
	HX_VISIT_MEMBER_NAME(_scaledPosition,"_scaledPosition");
	HX_VISIT_MEMBER_NAME(_transformMatrix,"_transformMatrix");
	HX_VISIT_MEMBER_NAME(_activeAnimatables,"_activeAnimatables");
	HX_VISIT_MEMBER_NAME(lensFlareSystems,"lensFlareSystems");
	HX_VISIT_MEMBER_NAME(_renderingManager,"_renderingManager");
	HX_VISIT_MEMBER_NAME(_geometries,"_geometries");
	HX_VISIT_MEMBER_NAME(database,"database");
	HX_VISIT_MEMBER_NAME(lightsEnabled,"lightsEnabled");
	HX_VISIT_MEMBER_NAME(lights,"lights");
	HX_VISIT_MEMBER_NAME(cameras,"cameras");
	HX_VISIT_MEMBER_NAME(activeCamera,"activeCamera");
	HX_VISIT_MEMBER_NAME(activeCameras,"activeCameras");
	HX_VISIT_MEMBER_NAME(meshes,"meshes");
	HX_VISIT_MEMBER_NAME(materials,"materials");
	HX_VISIT_MEMBER_NAME(multiMaterials,"multiMaterials");
	HX_VISIT_MEMBER_NAME(defaultMaterial,"defaultMaterial");
	HX_VISIT_MEMBER_NAME(texturesEnabled,"texturesEnabled");
	HX_VISIT_MEMBER_NAME(textures,"textures");
	HX_VISIT_MEMBER_NAME(particlesEnabled,"particlesEnabled");
	HX_VISIT_MEMBER_NAME(particleSystems,"particleSystems");
	HX_VISIT_MEMBER_NAME(spriteManagers,"spriteManagers");
	HX_VISIT_MEMBER_NAME(layers,"layers");
	HX_VISIT_MEMBER_NAME(skeletons,"skeletons");
	HX_VISIT_MEMBER_NAME(collisionsEnabled,"collisionsEnabled");
	HX_VISIT_MEMBER_NAME(gravity,"gravity");
	HX_VISIT_MEMBER_NAME(postProcessesEnabled,"postProcessesEnabled");
	HX_VISIT_MEMBER_NAME(postProcessManager,"postProcessManager");
	HX_VISIT_MEMBER_NAME(_animationStartDate,"_animationStartDate");
}

Dynamic Scene_obj::__Field(const ::String &inName,bool inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"pick") ) { return pick_dyn(); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fogEnd") ) { return fogEnd; }
		if (HX_FIELD_EQ(inName,"lights") ) { return lights; }
		if (HX_FIELD_EQ(inName,"meshes") ) { return meshes; }
		if (HX_FIELD_EQ(inName,"layers") ) { return layers; }
		if (HX_FIELD_EQ(inName,"render") ) { return render_dyn(); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_engine") ) { return _engine; }
		if (HX_FIELD_EQ(inName,"fogMode") ) { return fogMode; }
		if (HX_FIELD_EQ(inName,"cameras") ) { return cameras; }
		if (HX_FIELD_EQ(inName,"gravity") ) { return gravity; }
		if (HX_FIELD_EQ(inName,"isReady") ) { return isReady_dyn(); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return dispose_dyn(); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fogColor") ) { return fogColor; }
		if (HX_FIELD_EQ(inName,"fogStart") ) { return fogStart; }
		if (HX_FIELD_EQ(inName,"database") ) { return database; }
		if (HX_FIELD_EQ(inName,"textures") ) { return textures; }
		if (HX_FIELD_EQ(inName,"_animate") ) { return _animate_dyn(); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_renderId") ) { return _renderId; }
		if (HX_FIELD_EQ(inName,"autoClear") ) { return autoClear; }
		if (HX_FIELD_EQ(inName,"materials") ) { return materials; }
		if (HX_FIELD_EQ(inName,"skeletons") ) { return skeletons; }
		if (HX_FIELD_EQ(inName,"getEngine") ) { return getEngine_dyn(); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearColor") ) { return clearColor; }
		if (HX_FIELD_EQ(inName,"fogDensity") ) { return fogDensity; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"FOGMODE_EXP") ) { return FOGMODE_EXP; }
		if (HX_FIELD_EQ(inName,"afterRender") ) { return afterRender; }
		if (HX_FIELD_EQ(inName,"_viewMatrix") ) { return _viewMatrix; }
		if (HX_FIELD_EQ(inName,"_geometries") ) { return _geometries; }
		if (HX_FIELD_EQ(inName,"getRenderId") ) { return getRenderId_dyn(); }
		if (HX_FIELD_EQ(inName,"getMeshByID") ) { return getMeshByID_dyn(); }
		if (HX_FIELD_EQ(inName,"pickWithRay") ) { return pickWithRay_dyn(); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"FOGMODE_NONE") ) { return FOGMODE_NONE; }
		if (HX_FIELD_EQ(inName,"FOGMODE_EXP2") ) { return FOGMODE_EXP2; }
		if (HX_FIELD_EQ(inName,"beforeRender") ) { return beforeRender; }
		if (HX_FIELD_EQ(inName,"_pendingData") ) { return _pendingData; }
		if (HX_FIELD_EQ(inName,"ambientColor") ) { return ambientColor; }
		if (HX_FIELD_EQ(inName,"activeCamera") ) { return activeCamera; }
		if (HX_FIELD_EQ(inName,"getLightByID") ) { return getLightByID_dyn(); }
		if (HX_FIELD_EQ(inName,"isActiveMesh") ) { return isActiveMesh_dyn(); }
		if (HX_FIELD_EQ(inName,"pushGeometry") ) { return pushGeometry_dyn(); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_toBeDisposed") ) { return _toBeDisposed; }
		if (HX_FIELD_EQ(inName,"_activeMeshes") ) { return _activeMeshes; }
		if (HX_FIELD_EQ(inName,"lightsEnabled") ) { return lightsEnabled; }
		if (HX_FIELD_EQ(inName,"activeCameras") ) { return activeCameras; }
		if (HX_FIELD_EQ(inName,"_checkIsReady") ) { return _checkIsReady_dyn(); }
		if (HX_FIELD_EQ(inName,"stopAnimation") ) { return stopAnimation_dyn(); }
		if (HX_FIELD_EQ(inName,"getViewMatrix") ) { return getViewMatrix_dyn(); }
		if (HX_FIELD_EQ(inName,"getMeshByName") ) { return getMeshByName_dyn(); }
		if (HX_FIELD_EQ(inName,"_internalPick") ) { return _internalPick_dyn(); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"FOGMODE_LINEAR") ) { return FOGMODE_LINEAR; }
		if (HX_FIELD_EQ(inName,"_physicsEngine") ) { return _physicsEngine; }
		if (HX_FIELD_EQ(inName,"_totalVertices") ) { return _totalVertices; }
		if (HX_FIELD_EQ(inName,"_frustumPlanes") ) { return _frustumPlanes; }
		if (HX_FIELD_EQ(inName,"forceWireframe") ) { return forceWireframe; }
		if (HX_FIELD_EQ(inName,"_renderTargets") ) { return _renderTargets; }
		if (HX_FIELD_EQ(inName,"multiMaterials") ) { return multiMaterials; }
		if (HX_FIELD_EQ(inName,"spriteManagers") ) { return spriteManagers; }
		if (HX_FIELD_EQ(inName,"beginAnimation") ) { return beginAnimation_dyn(); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_activeVertices") ) { return _activeVertices; }
		if (HX_FIELD_EQ(inName,"_renderDuration") ) { return _renderDuration; }
		if (HX_FIELD_EQ(inName,"_animationRatio") ) { return _animationRatio; }
		if (HX_FIELD_EQ(inName,"_scaledVelocity") ) { return _scaledVelocity; }
		if (HX_FIELD_EQ(inName,"_scaledPosition") ) { return _scaledPosition; }
		if (HX_FIELD_EQ(inName,"defaultMaterial") ) { return defaultMaterial; }
		if (HX_FIELD_EQ(inName,"texturesEnabled") ) { return texturesEnabled; }
		if (HX_FIELD_EQ(inName,"particleSystems") ) { return particleSystems; }
		if (HX_FIELD_EQ(inName,"_addPendingData") ) { return _addPendingData_dyn(); }
		if (HX_FIELD_EQ(inName,"getMaterialByID") ) { return getMaterialByID_dyn(); }
		if (HX_FIELD_EQ(inName,"getLastMeshByID") ) { return getLastMeshByID_dyn(); }
		if (HX_FIELD_EQ(inName,"getSkeletonByID") ) { return getSkeletonByID_dyn(); }
		if (HX_FIELD_EQ(inName,"getGeometryByID") ) { return getGeometryByID_dyn(); }
		if (HX_FIELD_EQ(inName,"_getNewPosition") ) { return _getNewPosition_dyn(); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_activeParticles") ) { return _activeParticles; }
		if (HX_FIELD_EQ(inName,"_spritesDuration") ) { return _spritesDuration; }
		if (HX_FIELD_EQ(inName,"_selectionOctree") ) { return _selectionOctree; }
		if (HX_FIELD_EQ(inName,"_activeSkeletons") ) { return _activeSkeletons; }
		if (HX_FIELD_EQ(inName,"_transformMatrix") ) { return _transformMatrix; }
		if (HX_FIELD_EQ(inName,"lensFlareSystems") ) { return lensFlareSystems; }
		if (HX_FIELD_EQ(inName,"particlesEnabled") ) { return particlesEnabled; }
		if (HX_FIELD_EQ(inName,"getTotalVertices") ) { return getTotalVertices_dyn(); }
		if (HX_FIELD_EQ(inName,"executeWhenReady") ) { return executeWhenReady_dyn(); }
		if (HX_FIELD_EQ(inName,"activeCameraByID") ) { return activeCameraByID_dyn(); }
		if (HX_FIELD_EQ(inName,"getLastEntryByID") ) { return getLastEntryByID_dyn(); }
		if (HX_FIELD_EQ(inName,"_evaluateSubMesh") ) { return _evaluateSubMesh_dyn(); }
		if (HX_FIELD_EQ(inName,"_renderForCamera") ) { return _renderForCamera_dyn(); }
		if (HX_FIELD_EQ(inName,"createPickingRay") ) { return createPickingRay_dyn(); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_projectionMatrix") ) { return _projectionMatrix; }
		if (HX_FIELD_EQ(inName,"_onReadyCallbacks") ) { return _onReadyCallbacks; }
		if (HX_FIELD_EQ(inName,"_renderingManager") ) { return _renderingManager; }
		if (HX_FIELD_EQ(inName,"collisionsEnabled") ) { return collisionsEnabled; }
		if (HX_FIELD_EQ(inName,"getActiveVertices") ) { return getActiveVertices_dyn(); }
		if (HX_FIELD_EQ(inName,"getRenderDuration") ) { return getRenderDuration_dyn(); }
		if (HX_FIELD_EQ(inName,"getAnimationRatio") ) { return getAnimationRatio_dyn(); }
		if (HX_FIELD_EQ(inName,"getMaterialByName") ) { return getMaterialByName_dyn(); }
		if (HX_FIELD_EQ(inName,"getSkeletonByName") ) { return getSkeletonByName_dyn(); }
		if (HX_FIELD_EQ(inName,"_collideWithWorld") ) { return _collideWithWorld_dyn(); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_lastFrameDuration") ) { return _lastFrameDuration; }
		if (HX_FIELD_EQ(inName,"_particlesDuration") ) { return _particlesDuration; }
		if (HX_FIELD_EQ(inName,"_activeAnimatables") ) { return _activeAnimatables; }
		if (HX_FIELD_EQ(inName,"postProcessManager") ) { return postProcessManager; }
		if (HX_FIELD_EQ(inName,"getActiveParticles") ) { return getActiveParticles_dyn(); }
		if (HX_FIELD_EQ(inName,"getSpritesDuration") ) { return getSpritesDuration_dyn(); }
		if (HX_FIELD_EQ(inName,"_removePendingData") ) { return _removePendingData_dyn(); }
		if (HX_FIELD_EQ(inName,"getTransformMatrix") ) { return getTransformMatrix_dyn(); }
		if (HX_FIELD_EQ(inName,"setTransformMatrix") ) { return setTransformMatrix_dyn(); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_processedMaterials") ) { return _processedMaterials; }
		if (HX_FIELD_EQ(inName,"customRenderTargets") ) { return customRenderTargets; }
		if (HX_FIELD_EQ(inName,"_animationStartDate") ) { return _animationStartDate; }
		if (HX_FIELD_EQ(inName,"getProjectionMatrix") ) { return getProjectionMatrix_dyn(); }
		if (HX_FIELD_EQ(inName,"getLastSkeletonByID") ) { return getLastSkeletonByID_dyn(); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"renderTargetsEnabled") ) { return renderTargetsEnabled; }
		if (HX_FIELD_EQ(inName,"postProcessesEnabled") ) { return postProcessesEnabled; }
		if (HX_FIELD_EQ(inName,"getLastFrameDuration") ) { return getLastFrameDuration_dyn(); }
		if (HX_FIELD_EQ(inName,"getParticlesDuration") ) { return getParticlesDuration_dyn(); }
		if (HX_FIELD_EQ(inName,"registerBeforeRender") ) { return registerBeforeRender_dyn(); }
		if (HX_FIELD_EQ(inName,"getWaitingItemsCount") ) { return getWaitingItemsCount_dyn(); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_evaluateActiveMeshes") ) { return _evaluateActiveMeshes_dyn(); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_renderTargetsDuration") ) { return _renderTargetsDuration; }
		if (HX_FIELD_EQ(inName,"_activeParticleSystems") ) { return _activeParticleSystems; }
		if (HX_FIELD_EQ(inName,"unregisterBeforeRender") ) { return unregisterBeforeRender_dyn(); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"useDelayedTextureLoading") ) { return useDelayedTextureLoading; }
		if (HX_FIELD_EQ(inName,"_onBeforeRenderCallbacks") ) { return _onBeforeRenderCallbacks; }
		if (HX_FIELD_EQ(inName,"getRenderTargetsDuration") ) { return getRenderTargetsDuration_dyn(); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_pickWithRayInverseMatrix") ) { return _pickWithRayInverseMatrix; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_executeWhenReadyTimeoutId") ) { return _executeWhenReadyTimeoutId; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"_evaluateActiveMeshesDuration") ) { return _evaluateActiveMeshesDuration; }
		if (HX_FIELD_EQ(inName,"createOrUpdateSelectionOctree") ) { return createOrUpdateSelectionOctree_dyn(); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"getEvaluateActiveMeshesDuration") ) { return getEvaluateActiveMeshesDuration_dyn(); }
	}
	return super::__Field(inName,inCallProp);
}

Dynamic Scene_obj::__SetField(const ::String &inName,const Dynamic &inValue,bool inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"fogEnd") ) { fogEnd=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lights") ) { lights=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"meshes") ) { meshes=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layers") ) { layers=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_engine") ) { _engine=inValue.Cast< ::com::gamestudiohx::babylonhx::Engine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fogMode") ) { fogMode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cameras") ) { cameras=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravity") ) { gravity=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::math::Vector3 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fogColor") ) { fogColor=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::math::Color3 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fogStart") ) { fogStart=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"database") ) { database=inValue.Cast< Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textures") ) { textures=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_renderId") ) { _renderId=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoClear") ) { autoClear=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"materials") ) { materials=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skeletons") ) { skeletons=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearColor") ) { clearColor=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::math::Color4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fogDensity") ) { fogDensity=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"FOGMODE_EXP") ) { FOGMODE_EXP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"afterRender") ) { afterRender=inValue.Cast< Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_viewMatrix") ) { _viewMatrix=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::math::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_geometries") ) { _geometries=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"FOGMODE_NONE") ) { FOGMODE_NONE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FOGMODE_EXP2") ) { FOGMODE_EXP2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"beforeRender") ) { beforeRender=inValue.Cast< Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pendingData") ) { _pendingData=inValue.Cast< Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ambientColor") ) { ambientColor=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::math::Color3 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"activeCamera") ) { activeCamera=inValue.Cast< ::com::gamestudiohx::babylonhx::cameras::Camera >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_toBeDisposed") ) { _toBeDisposed=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::SmartArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_activeMeshes") ) { _activeMeshes=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::SmartArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightsEnabled") ) { lightsEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"activeCameras") ) { activeCameras=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"FOGMODE_LINEAR") ) { FOGMODE_LINEAR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_physicsEngine") ) { _physicsEngine=inValue.Cast< Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_totalVertices") ) { _totalVertices=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_frustumPlanes") ) { _frustumPlanes=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"forceWireframe") ) { forceWireframe=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_renderTargets") ) { _renderTargets=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::SmartArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"multiMaterials") ) { multiMaterials=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spriteManagers") ) { spriteManagers=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_activeVertices") ) { _activeVertices=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_renderDuration") ) { _renderDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_animationRatio") ) { _animationRatio=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scaledVelocity") ) { _scaledVelocity=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::math::Vector3 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scaledPosition") ) { _scaledPosition=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::math::Vector3 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultMaterial") ) { defaultMaterial=inValue.Cast< ::com::gamestudiohx::babylonhx::materials::StandardMaterial >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texturesEnabled") ) { texturesEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"particleSystems") ) { particleSystems=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_activeParticles") ) { _activeParticles=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_spritesDuration") ) { _spritesDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selectionOctree") ) { _selectionOctree=inValue.Cast< ::com::gamestudiohx::babylonhx::culling::octrees::Octree >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_activeSkeletons") ) { _activeSkeletons=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::SmartArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_transformMatrix") ) { _transformMatrix=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::math::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lensFlareSystems") ) { lensFlareSystems=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"particlesEnabled") ) { particlesEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_projectionMatrix") ) { _projectionMatrix=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::math::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_onReadyCallbacks") ) { _onReadyCallbacks=inValue.Cast< Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_renderingManager") ) { _renderingManager=inValue.Cast< ::com::gamestudiohx::babylonhx::rendering::RenderingManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"collisionsEnabled") ) { collisionsEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_lastFrameDuration") ) { _lastFrameDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_particlesDuration") ) { _particlesDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_activeAnimatables") ) { _activeAnimatables=inValue.Cast< Array< ::Dynamic > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"postProcessManager") ) { postProcessManager=inValue.Cast< ::com::gamestudiohx::babylonhx::postprocess::PostProcessManager >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_processedMaterials") ) { _processedMaterials=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::SmartArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"customRenderTargets") ) { customRenderTargets=inValue.Cast< Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_animationStartDate") ) { _animationStartDate=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"renderTargetsEnabled") ) { renderTargetsEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"postProcessesEnabled") ) { postProcessesEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_renderTargetsDuration") ) { _renderTargetsDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_activeParticleSystems") ) { _activeParticleSystems=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::SmartArray >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"useDelayedTextureLoading") ) { useDelayedTextureLoading=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_onBeforeRenderCallbacks") ) { _onBeforeRenderCallbacks=inValue.Cast< Dynamic >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_pickWithRayInverseMatrix") ) { _pickWithRayInverseMatrix=inValue.Cast< ::com::gamestudiohx::babylonhx::tools::math::Matrix >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_executeWhenReadyTimeoutId") ) { _executeWhenReadyTimeoutId=inValue.Cast< int >(); return inValue; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"_evaluateActiveMeshesDuration") ) { _evaluateActiveMeshesDuration=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Scene_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_CSTRING("_engine"));
	outFields->push(HX_CSTRING("_viewMatrix"));
	outFields->push(HX_CSTRING("_projectionMatrix"));
	outFields->push(HX_CSTRING("_physicsEngine"));
	outFields->push(HX_CSTRING("useDelayedTextureLoading"));
	outFields->push(HX_CSTRING("_totalVertices"));
	outFields->push(HX_CSTRING("_activeVertices"));
	outFields->push(HX_CSTRING("_activeParticles"));
	outFields->push(HX_CSTRING("_lastFrameDuration"));
	outFields->push(HX_CSTRING("_evaluateActiveMeshesDuration"));
	outFields->push(HX_CSTRING("_renderTargetsDuration"));
	outFields->push(HX_CSTRING("_renderDuration"));
	outFields->push(HX_CSTRING("_particlesDuration"));
	outFields->push(HX_CSTRING("_spritesDuration"));
	outFields->push(HX_CSTRING("_animationRatio"));
	outFields->push(HX_CSTRING("_renderId"));
	outFields->push(HX_CSTRING("_executeWhenReadyTimeoutId"));
	outFields->push(HX_CSTRING("_frustumPlanes"));
	outFields->push(HX_CSTRING("_selectionOctree"));
	outFields->push(HX_CSTRING("_toBeDisposed"));
	outFields->push(HX_CSTRING("_onReadyCallbacks"));
	outFields->push(HX_CSTRING("_pendingData"));
	outFields->push(HX_CSTRING("_onBeforeRenderCallbacks"));
	outFields->push(HX_CSTRING("_pickWithRayInverseMatrix"));
	outFields->push(HX_CSTRING("autoClear"));
	outFields->push(HX_CSTRING("forceWireframe"));
	outFields->push(HX_CSTRING("clearColor"));
	outFields->push(HX_CSTRING("ambientColor"));
	outFields->push(HX_CSTRING("fogMode"));
	outFields->push(HX_CSTRING("fogColor"));
	outFields->push(HX_CSTRING("fogDensity"));
	outFields->push(HX_CSTRING("fogStart"));
	outFields->push(HX_CSTRING("fogEnd"));
	outFields->push(HX_CSTRING("_activeMeshes"));
	outFields->push(HX_CSTRING("_processedMaterials"));
	outFields->push(HX_CSTRING("_renderTargets"));
	outFields->push(HX_CSTRING("_activeParticleSystems"));
	outFields->push(HX_CSTRING("_activeSkeletons"));
	outFields->push(HX_CSTRING("renderTargetsEnabled"));
	outFields->push(HX_CSTRING("customRenderTargets"));
	outFields->push(HX_CSTRING("_scaledVelocity"));
	outFields->push(HX_CSTRING("_scaledPosition"));
	outFields->push(HX_CSTRING("_transformMatrix"));
	outFields->push(HX_CSTRING("_activeAnimatables"));
	outFields->push(HX_CSTRING("lensFlareSystems"));
	outFields->push(HX_CSTRING("_renderingManager"));
	outFields->push(HX_CSTRING("_geometries"));
	outFields->push(HX_CSTRING("database"));
	outFields->push(HX_CSTRING("lightsEnabled"));
	outFields->push(HX_CSTRING("lights"));
	outFields->push(HX_CSTRING("cameras"));
	outFields->push(HX_CSTRING("activeCamera"));
	outFields->push(HX_CSTRING("activeCameras"));
	outFields->push(HX_CSTRING("meshes"));
	outFields->push(HX_CSTRING("materials"));
	outFields->push(HX_CSTRING("multiMaterials"));
	outFields->push(HX_CSTRING("defaultMaterial"));
	outFields->push(HX_CSTRING("texturesEnabled"));
	outFields->push(HX_CSTRING("textures"));
	outFields->push(HX_CSTRING("particlesEnabled"));
	outFields->push(HX_CSTRING("particleSystems"));
	outFields->push(HX_CSTRING("spriteManagers"));
	outFields->push(HX_CSTRING("layers"));
	outFields->push(HX_CSTRING("skeletons"));
	outFields->push(HX_CSTRING("collisionsEnabled"));
	outFields->push(HX_CSTRING("gravity"));
	outFields->push(HX_CSTRING("postProcessesEnabled"));
	outFields->push(HX_CSTRING("postProcessManager"));
	outFields->push(HX_CSTRING("_animationStartDate"));
	super::__GetFields(outFields);
};

static ::String sStaticFields[] = {
	HX_CSTRING("FOGMODE_NONE"),
	HX_CSTRING("FOGMODE_EXP"),
	HX_CSTRING("FOGMODE_EXP2"),
	HX_CSTRING("FOGMODE_LINEAR"),
	String(null()) };

#if HXCPP_SCRIPTABLE
static hx::StorageInfo sMemberStorageInfo[] = {
	{hx::fsObject /*::com::gamestudiohx::babylonhx::Engine*/ ,(int)offsetof(Scene_obj,_engine),HX_CSTRING("_engine")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Scene_obj,beforeRender),HX_CSTRING("beforeRender")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Scene_obj,afterRender),HX_CSTRING("afterRender")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::math::Matrix*/ ,(int)offsetof(Scene_obj,_viewMatrix),HX_CSTRING("_viewMatrix")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::math::Matrix*/ ,(int)offsetof(Scene_obj,_projectionMatrix),HX_CSTRING("_projectionMatrix")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Scene_obj,_physicsEngine),HX_CSTRING("_physicsEngine")},
	{hx::fsBool,(int)offsetof(Scene_obj,useDelayedTextureLoading),HX_CSTRING("useDelayedTextureLoading")},
	{hx::fsInt,(int)offsetof(Scene_obj,_totalVertices),HX_CSTRING("_totalVertices")},
	{hx::fsInt,(int)offsetof(Scene_obj,_activeVertices),HX_CSTRING("_activeVertices")},
	{hx::fsInt,(int)offsetof(Scene_obj,_activeParticles),HX_CSTRING("_activeParticles")},
	{hx::fsFloat,(int)offsetof(Scene_obj,_lastFrameDuration),HX_CSTRING("_lastFrameDuration")},
	{hx::fsFloat,(int)offsetof(Scene_obj,_evaluateActiveMeshesDuration),HX_CSTRING("_evaluateActiveMeshesDuration")},
	{hx::fsFloat,(int)offsetof(Scene_obj,_renderTargetsDuration),HX_CSTRING("_renderTargetsDuration")},
	{hx::fsFloat,(int)offsetof(Scene_obj,_renderDuration),HX_CSTRING("_renderDuration")},
	{hx::fsFloat,(int)offsetof(Scene_obj,_particlesDuration),HX_CSTRING("_particlesDuration")},
	{hx::fsFloat,(int)offsetof(Scene_obj,_spritesDuration),HX_CSTRING("_spritesDuration")},
	{hx::fsFloat,(int)offsetof(Scene_obj,_animationRatio),HX_CSTRING("_animationRatio")},
	{hx::fsInt,(int)offsetof(Scene_obj,_renderId),HX_CSTRING("_renderId")},
	{hx::fsInt,(int)offsetof(Scene_obj,_executeWhenReadyTimeoutId),HX_CSTRING("_executeWhenReadyTimeoutId")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,_frustumPlanes),HX_CSTRING("_frustumPlanes")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::culling::octrees::Octree*/ ,(int)offsetof(Scene_obj,_selectionOctree),HX_CSTRING("_selectionOctree")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::SmartArray*/ ,(int)offsetof(Scene_obj,_toBeDisposed),HX_CSTRING("_toBeDisposed")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Scene_obj,_onReadyCallbacks),HX_CSTRING("_onReadyCallbacks")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Scene_obj,_pendingData),HX_CSTRING("_pendingData")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Scene_obj,_onBeforeRenderCallbacks),HX_CSTRING("_onBeforeRenderCallbacks")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::math::Matrix*/ ,(int)offsetof(Scene_obj,_pickWithRayInverseMatrix),HX_CSTRING("_pickWithRayInverseMatrix")},
	{hx::fsBool,(int)offsetof(Scene_obj,autoClear),HX_CSTRING("autoClear")},
	{hx::fsBool,(int)offsetof(Scene_obj,forceWireframe),HX_CSTRING("forceWireframe")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::math::Color4*/ ,(int)offsetof(Scene_obj,clearColor),HX_CSTRING("clearColor")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::math::Color3*/ ,(int)offsetof(Scene_obj,ambientColor),HX_CSTRING("ambientColor")},
	{hx::fsInt,(int)offsetof(Scene_obj,fogMode),HX_CSTRING("fogMode")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::math::Color3*/ ,(int)offsetof(Scene_obj,fogColor),HX_CSTRING("fogColor")},
	{hx::fsFloat,(int)offsetof(Scene_obj,fogDensity),HX_CSTRING("fogDensity")},
	{hx::fsFloat,(int)offsetof(Scene_obj,fogStart),HX_CSTRING("fogStart")},
	{hx::fsFloat,(int)offsetof(Scene_obj,fogEnd),HX_CSTRING("fogEnd")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::SmartArray*/ ,(int)offsetof(Scene_obj,_activeMeshes),HX_CSTRING("_activeMeshes")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::SmartArray*/ ,(int)offsetof(Scene_obj,_processedMaterials),HX_CSTRING("_processedMaterials")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::SmartArray*/ ,(int)offsetof(Scene_obj,_renderTargets),HX_CSTRING("_renderTargets")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::SmartArray*/ ,(int)offsetof(Scene_obj,_activeParticleSystems),HX_CSTRING("_activeParticleSystems")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::SmartArray*/ ,(int)offsetof(Scene_obj,_activeSkeletons),HX_CSTRING("_activeSkeletons")},
	{hx::fsBool,(int)offsetof(Scene_obj,renderTargetsEnabled),HX_CSTRING("renderTargetsEnabled")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Scene_obj,customRenderTargets),HX_CSTRING("customRenderTargets")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::math::Vector3*/ ,(int)offsetof(Scene_obj,_scaledVelocity),HX_CSTRING("_scaledVelocity")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::math::Vector3*/ ,(int)offsetof(Scene_obj,_scaledPosition),HX_CSTRING("_scaledPosition")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::math::Matrix*/ ,(int)offsetof(Scene_obj,_transformMatrix),HX_CSTRING("_transformMatrix")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,_activeAnimatables),HX_CSTRING("_activeAnimatables")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,lensFlareSystems),HX_CSTRING("lensFlareSystems")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::rendering::RenderingManager*/ ,(int)offsetof(Scene_obj,_renderingManager),HX_CSTRING("_renderingManager")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,_geometries),HX_CSTRING("_geometries")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Scene_obj,database),HX_CSTRING("database")},
	{hx::fsBool,(int)offsetof(Scene_obj,lightsEnabled),HX_CSTRING("lightsEnabled")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,lights),HX_CSTRING("lights")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,cameras),HX_CSTRING("cameras")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::cameras::Camera*/ ,(int)offsetof(Scene_obj,activeCamera),HX_CSTRING("activeCamera")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,activeCameras),HX_CSTRING("activeCameras")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,meshes),HX_CSTRING("meshes")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,materials),HX_CSTRING("materials")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,multiMaterials),HX_CSTRING("multiMaterials")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::materials::StandardMaterial*/ ,(int)offsetof(Scene_obj,defaultMaterial),HX_CSTRING("defaultMaterial")},
	{hx::fsBool,(int)offsetof(Scene_obj,texturesEnabled),HX_CSTRING("texturesEnabled")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,textures),HX_CSTRING("textures")},
	{hx::fsBool,(int)offsetof(Scene_obj,particlesEnabled),HX_CSTRING("particlesEnabled")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,particleSystems),HX_CSTRING("particleSystems")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,spriteManagers),HX_CSTRING("spriteManagers")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,layers),HX_CSTRING("layers")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,skeletons),HX_CSTRING("skeletons")},
	{hx::fsBool,(int)offsetof(Scene_obj,collisionsEnabled),HX_CSTRING("collisionsEnabled")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::tools::math::Vector3*/ ,(int)offsetof(Scene_obj,gravity),HX_CSTRING("gravity")},
	{hx::fsBool,(int)offsetof(Scene_obj,postProcessesEnabled),HX_CSTRING("postProcessesEnabled")},
	{hx::fsObject /*::com::gamestudiohx::babylonhx::postprocess::PostProcessManager*/ ,(int)offsetof(Scene_obj,postProcessManager),HX_CSTRING("postProcessManager")},
	{hx::fsInt,(int)offsetof(Scene_obj,_animationStartDate),HX_CSTRING("_animationStartDate")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String sMemberFields[] = {
	HX_CSTRING("_engine"),
	HX_CSTRING("beforeRender"),
	HX_CSTRING("afterRender"),
	HX_CSTRING("_viewMatrix"),
	HX_CSTRING("_projectionMatrix"),
	HX_CSTRING("_physicsEngine"),
	HX_CSTRING("useDelayedTextureLoading"),
	HX_CSTRING("_totalVertices"),
	HX_CSTRING("_activeVertices"),
	HX_CSTRING("_activeParticles"),
	HX_CSTRING("_lastFrameDuration"),
	HX_CSTRING("_evaluateActiveMeshesDuration"),
	HX_CSTRING("_renderTargetsDuration"),
	HX_CSTRING("_renderDuration"),
	HX_CSTRING("_particlesDuration"),
	HX_CSTRING("_spritesDuration"),
	HX_CSTRING("_animationRatio"),
	HX_CSTRING("_renderId"),
	HX_CSTRING("_executeWhenReadyTimeoutId"),
	HX_CSTRING("_frustumPlanes"),
	HX_CSTRING("_selectionOctree"),
	HX_CSTRING("_toBeDisposed"),
	HX_CSTRING("_onReadyCallbacks"),
	HX_CSTRING("_pendingData"),
	HX_CSTRING("_onBeforeRenderCallbacks"),
	HX_CSTRING("_pickWithRayInverseMatrix"),
	HX_CSTRING("autoClear"),
	HX_CSTRING("forceWireframe"),
	HX_CSTRING("clearColor"),
	HX_CSTRING("ambientColor"),
	HX_CSTRING("fogMode"),
	HX_CSTRING("fogColor"),
	HX_CSTRING("fogDensity"),
	HX_CSTRING("fogStart"),
	HX_CSTRING("fogEnd"),
	HX_CSTRING("_activeMeshes"),
	HX_CSTRING("_processedMaterials"),
	HX_CSTRING("_renderTargets"),
	HX_CSTRING("_activeParticleSystems"),
	HX_CSTRING("_activeSkeletons"),
	HX_CSTRING("renderTargetsEnabled"),
	HX_CSTRING("customRenderTargets"),
	HX_CSTRING("_scaledVelocity"),
	HX_CSTRING("_scaledPosition"),
	HX_CSTRING("_transformMatrix"),
	HX_CSTRING("_activeAnimatables"),
	HX_CSTRING("lensFlareSystems"),
	HX_CSTRING("_renderingManager"),
	HX_CSTRING("_geometries"),
	HX_CSTRING("database"),
	HX_CSTRING("lightsEnabled"),
	HX_CSTRING("lights"),
	HX_CSTRING("cameras"),
	HX_CSTRING("activeCamera"),
	HX_CSTRING("activeCameras"),
	HX_CSTRING("meshes"),
	HX_CSTRING("materials"),
	HX_CSTRING("multiMaterials"),
	HX_CSTRING("defaultMaterial"),
	HX_CSTRING("texturesEnabled"),
	HX_CSTRING("textures"),
	HX_CSTRING("particlesEnabled"),
	HX_CSTRING("particleSystems"),
	HX_CSTRING("spriteManagers"),
	HX_CSTRING("layers"),
	HX_CSTRING("skeletons"),
	HX_CSTRING("collisionsEnabled"),
	HX_CSTRING("gravity"),
	HX_CSTRING("postProcessesEnabled"),
	HX_CSTRING("postProcessManager"),
	HX_CSTRING("_animationStartDate"),
	HX_CSTRING("getEngine"),
	HX_CSTRING("getTotalVertices"),
	HX_CSTRING("getActiveVertices"),
	HX_CSTRING("getActiveParticles"),
	HX_CSTRING("getLastFrameDuration"),
	HX_CSTRING("getEvaluateActiveMeshesDuration"),
	HX_CSTRING("getRenderTargetsDuration"),
	HX_CSTRING("getRenderDuration"),
	HX_CSTRING("getParticlesDuration"),
	HX_CSTRING("getSpritesDuration"),
	HX_CSTRING("getAnimationRatio"),
	HX_CSTRING("getRenderId"),
	HX_CSTRING("isReady"),
	HX_CSTRING("registerBeforeRender"),
	HX_CSTRING("unregisterBeforeRender"),
	HX_CSTRING("_addPendingData"),
	HX_CSTRING("_removePendingData"),
	HX_CSTRING("getWaitingItemsCount"),
	HX_CSTRING("executeWhenReady"),
	HX_CSTRING("_checkIsReady"),
	HX_CSTRING("beginAnimation"),
	HX_CSTRING("stopAnimation"),
	HX_CSTRING("_animate"),
	HX_CSTRING("getViewMatrix"),
	HX_CSTRING("getProjectionMatrix"),
	HX_CSTRING("getTransformMatrix"),
	HX_CSTRING("setTransformMatrix"),
	HX_CSTRING("activeCameraByID"),
	HX_CSTRING("getMaterialByID"),
	HX_CSTRING("getMaterialByName"),
	HX_CSTRING("getLightByID"),
	HX_CSTRING("getMeshByID"),
	HX_CSTRING("getLastMeshByID"),
	HX_CSTRING("getLastEntryByID"),
	HX_CSTRING("getMeshByName"),
	HX_CSTRING("isActiveMesh"),
	HX_CSTRING("getLastSkeletonByID"),
	HX_CSTRING("getSkeletonByID"),
	HX_CSTRING("getSkeletonByName"),
	HX_CSTRING("_evaluateSubMesh"),
	HX_CSTRING("_evaluateActiveMeshes"),
	HX_CSTRING("_renderForCamera"),
	HX_CSTRING("render"),
	HX_CSTRING("dispose"),
	HX_CSTRING("getGeometryByID"),
	HX_CSTRING("pushGeometry"),
	HX_CSTRING("_getNewPosition"),
	HX_CSTRING("_collideWithWorld"),
	HX_CSTRING("createOrUpdateSelectionOctree"),
	HX_CSTRING("createPickingRay"),
	HX_CSTRING("_internalPick"),
	HX_CSTRING("pick"),
	HX_CSTRING("pickWithRay"),
	String(null()) };

static void sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Scene_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Scene_obj::FOGMODE_NONE,"FOGMODE_NONE");
	HX_MARK_MEMBER_NAME(Scene_obj::FOGMODE_EXP,"FOGMODE_EXP");
	HX_MARK_MEMBER_NAME(Scene_obj::FOGMODE_EXP2,"FOGMODE_EXP2");
	HX_MARK_MEMBER_NAME(Scene_obj::FOGMODE_LINEAR,"FOGMODE_LINEAR");
};

#ifdef HXCPP_VISIT_ALLOCS
static void sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Scene_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Scene_obj::FOGMODE_NONE,"FOGMODE_NONE");
	HX_VISIT_MEMBER_NAME(Scene_obj::FOGMODE_EXP,"FOGMODE_EXP");
	HX_VISIT_MEMBER_NAME(Scene_obj::FOGMODE_EXP2,"FOGMODE_EXP2");
	HX_VISIT_MEMBER_NAME(Scene_obj::FOGMODE_LINEAR,"FOGMODE_LINEAR");
};

#endif

Class Scene_obj::__mClass;

void Scene_obj::__register()
{
	hx::Static(__mClass) = hx::RegisterClass(HX_CSTRING("com.gamestudiohx.babylonhx.Scene"), hx::TCanCast< Scene_obj> ,sStaticFields,sMemberFields,
	&__CreateEmpty, &__Create,
	&super::__SGetClass(), 0, sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , sVisitStatics
#endif
#ifdef HXCPP_SCRIPTABLE
    , sMemberStorageInfo
#endif
);
}

void Scene_obj::__boot()
{
	FOGMODE_NONE= (int)0;
	FOGMODE_EXP= (int)1;
	FOGMODE_EXP2= (int)2;
	FOGMODE_LINEAR= (int)3;
}

} // end namespace com
} // end namespace gamestudiohx
} // end namespace babylonhx
